{
  "hash": "5e0de274ba84e5c68247a004051a043a",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n# Network-based data integration for gene discovery\n\nIn this lesson, you will learn how to use networks to integrate\ndata and prioritize genes associated with traits of interest. \nAt the end of the lesson, you will be able to:\n\n- work with `GRanges` objects\n- integrate GWAS-derived SNPs with coexpression networks to trait-related\ngenes\n\nLet's start by loading the packages we will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load required packages\nlibrary(SummarizedExperiment)\nlibrary(GenomicRanges)\nlibrary(cageminer)\nlibrary(here)\n```\n:::\n\n\n## Getting to know the example data\n\nIn this chapter, we will use data from @almeida2021integration,\navailable in the `data/` directory of the \n[GitHub repo associated with this course](https://github.com/almeidasilvaf/NASB).\nThe data set comprises:\n\n- GWAS-derived SNPs associated with soybean resistance to multiple\nphytopathogenic fungi.\n- RNA-seq data of soybean response to multiple phytopathogenic fungi.\n\nOur goal here is to prioritize candidate genes associated with resistance\nto fungal diseases.\n\nThe expression data are available in a `SummarizedExperiment` object,\nwhich by now should be a familiar data class to you.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression data\nload(here(\"data\", \"se_soyfungi.rda\"))\n\n# Take a look at the object\nse_soyfungi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SummarizedExperiment \ndim: 20272 127 \nmetadata(0):\nassays(1): ''\nrownames(20272): Glyma.01G000100 Glyma.01G000137 ... Glyma.U032705\n  Glyma.U039400\nrowData names(0):\ncolnames(127): SAMD00117549 SAMD00117550 ... SAMN13743072 SAMN13743073\ncolData names(4): Pathogen Treatment Tissue Pathogen_Treatment\n```\n:::\n\n```{.r .cell-code}\ncolData(se_soyfungi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 127 rows and 4 columns\n                        Pathogen       Treatment      Tissue\n                     <character>     <character> <character>\nSAMD00117549         Ppachyrhizi control_res_24h      leaves\nSAMD00117550         Ppachyrhizi  stress_res_24h      leaves\nSAMD00117552         Ppachyrhizi  stress_res_24h      leaves\nSAMD00117551         Ppachyrhizi  stress_res_24h      leaves\nSAMD00117541         Ppachyrhizi control_sus_24h      leaves\n...                          ...             ...         ...\nSAMN13743069          Foxysporum          stress        root\nSAMN13743070          Foxysporum          stress        root\nSAMN13743071 Foxysporum_Fmosseae          stress        root\nSAMN13743072 Foxysporum_Fmosseae          stress        root\nSAMN13743073 Foxysporum_Fmosseae          stress        root\n                 Pathogen_Treatment\n                        <character>\nSAMD00117549 Ppachyrhizi_control_..\nSAMD00117550 Ppachyrhizi_stress_r..\nSAMD00117552 Ppachyrhizi_stress_r..\nSAMD00117551 Ppachyrhizi_stress_r..\nSAMD00117541 Ppachyrhizi_control_..\n...                             ...\nSAMN13743069      Foxysporum_stress\nSAMN13743070      Foxysporum_stress\nSAMN13743071 Foxysporum_Fmosseae_..\nSAMN13743072 Foxysporum_Fmosseae_..\nSAMN13743073 Foxysporum_Fmosseae_..\n```\n:::\n:::\n\n\nWe will also need an object containing information on the genomic coordinates\nof all genes in the soybean genome. If you have some experience with genomic\ndata analyses, you probably know that this kind of information is usually\nstored in GFF3/GTF files. In Bioconductor, the standard data class to store\ngenomic coordinates is called `GRanges`. You can create `GRanges` objects \nmanually or directly from GFF3/GTF files using the `import()` function from\nthe *[rtracklayer](https://bioconductor.org/packages/3.17/rtracklayer)* package. Let's demonstrate how this\nworks by reading a GFF3 file with soybean gene ranges onto a `GRanges` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load GFF3 file into the R session as a `GRanges` object\ngma_ranges <- rtracklayer::import(\n    here(\"data\", \"gma_primary_transcripts.gff3.gz\")\n)\n\ngma_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 791305 ranges and 16 metadata columns:\n              seqnames      ranges strand |         source            type\n                 <Rle>   <IRanges>  <Rle> |       <factor>        <factor>\n       [1]       Chr01 27355-28320      - | JGI Wm82.a2.v1 gene           \n       [2]       Chr01 27355-28320      - | JGI Wm82.a2.v1 mRNA           \n       [3]       Chr01 27355-27824      - | JGI Wm82.a2.v1 exon           \n       [4]       Chr01 27355-27655      - | JGI Wm82.a2.v1 three_prime_UTR\n       [5]       Chr01 27656-27824      - | JGI Wm82.a2.v1 CDS            \n       ...         ...         ...    ... .            ...             ...\n  [791301] scaffold_99 27528-27561      - | JGI Wm82.a2.v1            CDS \n  [791302] scaffold_99 27574-28051      - | JGI Wm82.a2.v1            exon\n  [791303] scaffold_99 27574-28051      - | JGI Wm82.a2.v1            CDS \n  [791304] scaffold_99 29024-29105      - | JGI Wm82.a2.v1            exon\n  [791305] scaffold_99 29024-29105      - | JGI Wm82.a2.v1            CDS \n               score     phase                     ID       pacid\n           <numeric> <integer>            <character> <character>\n       [1]        NA      <NA>        Glyma.01G000100    30544134\n       [2]        NA      <NA>      Glyma.01G000100.1        <NA>\n       [3]        NA      <NA> Glyma.01G000100.1:ex..        <NA>\n       [4]        NA      <NA> Glyma.01G000100.1:th..        <NA>\n       [5]        NA         1  Glyma.01G000100.1:CDS        <NA>\n       ...       ...       ...                    ...         ...\n  [791301]        NA         1    Glyma.U045500.1:CDS        <NA>\n  [791302]        NA      <NA> Glyma.U045500.1:exon:5        <NA>\n  [791303]        NA         2    Glyma.U045500.1:CDS        <NA>\n  [791304]        NA      <NA> Glyma.U045500.1:exon:6        <NA>\n  [791305]        NA         0    Glyma.U045500.1:CDS        <NA>\n                           pid                     id         alias\n                   <character>            <character>   <character>\n       [1] Glyma.01G000100.1.p Glyma.01G000100.Wm82.. Glyma01g00210\n       [2]                <NA>                   <NA>          <NA>\n       [3]                <NA>                   <NA>          <NA>\n       [4]                <NA>                   <NA>          <NA>\n       [5]                <NA>                   <NA>          <NA>\n       ...                 ...                    ...           ...\n  [791301]                <NA>                   <NA>          <NA>\n  [791302]                <NA>                   <NA>          <NA>\n  [791303]                <NA>                   <NA>          <NA>\n  [791304]                <NA>                   <NA>          <NA>\n  [791305]                <NA>                   <NA>          <NA>\n                              tid        old_id            Name         gene_id\n                      <character>   <character>     <character>     <character>\n       [1] Glyma.01G000100.1.Wm.. Glyma01g00210 Glyma.01G000100 Glyma.01G000100\n       [2]                   <NA>          <NA> Glyma.01G000100 Glyma.01G000100\n       [3]                   <NA>          <NA> Glyma.01G000100 Glyma.01G000100\n       [4]                   <NA>          <NA> Glyma.01G000100 Glyma.01G000100\n       [5]                   <NA>          <NA> Glyma.01G000100 Glyma.01G000100\n       ...                    ...           ...             ...             ...\n  [791301]                   <NA>          <NA>   Glyma.U045500   Glyma.U045500\n  [791302]                   <NA>          <NA>   Glyma.U045500   Glyma.U045500\n  [791303]                   <NA>          <NA>   Glyma.U045500   Glyma.U045500\n  [791304]                   <NA>          <NA>   Glyma.U045500   Glyma.U045500\n  [791305]                   <NA>          <NA>   Glyma.U045500   Glyma.U045500\n                      Parent     old_tid       UniProtKB\n             <CharacterList> <character> <CharacterList>\n       [1]                          <NA>                \n       [2]   Glyma.01G000100        <NA>                \n       [3] Glyma.01G000100.1        <NA>                \n       [4] Glyma.01G000100.1        <NA>                \n       [5] Glyma.01G000100.1        <NA>                \n       ...               ...         ...             ...\n  [791301]   Glyma.U045500.1        <NA>                \n  [791302]   Glyma.U045500.1        <NA>                \n  [791303]   Glyma.U045500.1        <NA>                \n  [791304]   Glyma.U045500.1        <NA>                \n  [791305]   Glyma.U045500.1        <NA>                \n  -------\n  seqinfo: 147 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n\nThe first three columns of a `GRanges` object are mandatory, and they \nindicate the chromosome name, the ranges (i.e., start and end positions \nof a particular genomic element), and the strand where the element is. \nAll other columns are called *annotations*, and they are optional.\nTo demonstrate how to interpret `GRanges` object, let's take a closer look \nat the first element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset the first element of the `GRanges` object\ngma_ranges[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 1 range and 16 metadata columns:\n      seqnames      ranges strand |         source     type     score     phase\n         <Rle>   <IRanges>  <Rle> |       <factor> <factor> <numeric> <integer>\n  [1]    Chr01 27355-28320      - | JGI Wm82.a2.v1     gene        NA      <NA>\n                   ID       pacid                 pid                     id\n          <character> <character>         <character>            <character>\n  [1] Glyma.01G000100    30544134 Glyma.01G000100.1.p Glyma.01G000100.Wm82..\n              alias                    tid        old_id            Name\n        <character>            <character>   <character>     <character>\n  [1] Glyma01g00210 Glyma.01G000100.1.Wm.. Glyma01g00210 Glyma.01G000100\n              gene_id          Parent     old_tid       UniProtKB\n          <character> <CharacterList> <character> <CharacterList>\n  [1] Glyma.01G000100                        <NA>                \n  -------\n  seqinfo: 147 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n\nBy looking at the first element, we can see that it represents \na gene located in chromosome \nChr01, from position\n27355 to position 28320, and with ID\n`gma_ranges$gene_id[1]`.\n\n\nImportantly, to extract data for the first 3 variables, you will use the\nspecial functions `seqnames()`, `ranges()` (or `start()` and `end()`),\nand `strand()`. However, extracting information on the range annotations\ncan be done with the `$` operator, as you would do for a data frame. You\ncan also use the function `mcols()` to extract only range annotations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract seqnames (chromosome names)\nhead(seqnames(gma_ranges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfactor-Rle of length 6 with 1 run\n  Lengths:     6\n  Values : Chr01\nLevels(147): Chr01 Chr02 Chr03 Chr04 ... scaffold_93 scaffold_97 scaffold_99\n```\n:::\n\n```{.r .cell-code}\n# Extract start and end positions\n## Option 1: ranges()\nhead(ranges(gma_ranges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIRanges object with 6 ranges and 0 metadata columns:\n          start       end     width\n      <integer> <integer> <integer>\n  [1]     27355     28320       966\n  [2]     27355     28320       966\n  [3]     27355     27824       470\n  [4]     27355     27655       301\n  [5]     27656     27824       169\n  [6]     27926     27991        66\n```\n:::\n\n```{.r .cell-code}\n## Option 2: start() and end()\nhead(start(gma_ranges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 27355 27355 27355 27355 27656 27926\n```\n:::\n\n```{.r .cell-code}\nhead(end(gma_ranges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28320 28320 27824 27655 27824 27991\n```\n:::\n\n```{.r .cell-code}\n# Extract all range annotations\nhead(mcols(gma_ranges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 6 rows and 16 columns\n          source            type     score     phase                     ID\n        <factor>        <factor> <numeric> <integer>            <character>\n1 JGI Wm82.a2.v1 gene                   NA        NA        Glyma.01G000100\n2 JGI Wm82.a2.v1 mRNA                   NA        NA      Glyma.01G000100.1\n3 JGI Wm82.a2.v1 exon                   NA        NA Glyma.01G000100.1:ex..\n4 JGI Wm82.a2.v1 three_prime_UTR        NA        NA Glyma.01G000100.1:th..\n5 JGI Wm82.a2.v1 CDS                    NA         1  Glyma.01G000100.1:CDS\n6 JGI Wm82.a2.v1 exon                   NA        NA Glyma.01G000100.1:ex..\n        pacid                 pid                     id         alias\n  <character>         <character>            <character>   <character>\n1    30544134 Glyma.01G000100.1.p Glyma.01G000100.Wm82.. Glyma01g00210\n2          NA                  NA                     NA            NA\n3          NA                  NA                     NA            NA\n4          NA                  NA                     NA            NA\n5          NA                  NA                     NA            NA\n6          NA                  NA                     NA            NA\n                     tid        old_id            Name         gene_id\n             <character>   <character>     <character>     <character>\n1 Glyma.01G000100.1.Wm.. Glyma01g00210 Glyma.01G000100 Glyma.01G000100\n2                     NA            NA Glyma.01G000100 Glyma.01G000100\n3                     NA            NA Glyma.01G000100 Glyma.01G000100\n4                     NA            NA Glyma.01G000100 Glyma.01G000100\n5                     NA            NA Glyma.01G000100 Glyma.01G000100\n6                     NA            NA Glyma.01G000100 Glyma.01G000100\n             Parent     old_tid       UniProtKB\n    <CharacterList> <character> <CharacterList>\n1                            NA                \n2   Glyma.01G000100          NA                \n3 Glyma.01G000100.1          NA                \n4 Glyma.01G000100.1          NA                \n5 Glyma.01G000100.1          NA                \n6 Glyma.01G000100.1          NA                \n```\n:::\n\n```{.r .cell-code}\n# Extract a specific column\nhead(gma_ranges$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] gene            mRNA            exon            three_prime_UTR\n[5] CDS             exon           \nLevels: gene mRNA exon three_prime_UTR CDS five_prime_UTR\n```\n:::\n:::\n\n\nFinally, you can subset `GRanges` object using the same syntax to subset\nvectors. For example, to extract only ranges for genes, you'd do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract only gene ranges\ngene_ranges <- gma_ranges[gma_ranges$type == \"gene\"]\ngene_ranges\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 56044 ranges and 16 metadata columns:\n             seqnames      ranges strand |         source     type     score\n                <Rle>   <IRanges>  <Rle> |       <factor> <factor> <numeric>\n      [1]       Chr01 27355-28320      - | JGI Wm82.a2.v1     gene        NA\n      [2]       Chr01 58975-67527      - | JGI Wm82.a2.v1     gene        NA\n      [3]       Chr01 67770-69968      + | JGI Wm82.a2.v1     gene        NA\n      [4]       Chr01 90289-91197      + | JGI Wm82.a2.v1     gene        NA\n      [5]       Chr01 90152-95947      - | JGI Wm82.a2.v1     gene        NA\n      ...         ...         ...    ... .            ...      ...       ...\n  [56040] scaffold_97 38235-38465      - | JGI Wm82.a2.v1     gene        NA\n  [56041] scaffold_97 58787-59891      + | JGI Wm82.a2.v1     gene        NA\n  [56042] scaffold_99 13436-13814      + | JGI Wm82.a2.v1     gene        NA\n  [56043] scaffold_99 22294-25413      - | JGI Wm82.a2.v1     gene        NA\n  [56044] scaffold_99 25903-29105      - | JGI Wm82.a2.v1     gene        NA\n              phase              ID       pacid                 pid\n          <integer>     <character> <character>         <character>\n      [1]      <NA> Glyma.01G000100    30544134 Glyma.01G000100.1.p\n      [2]      <NA> Glyma.01G000200    30543475 Glyma.01G000200.1.p\n      [3]      <NA> Glyma.01G000300    30545121 Glyma.01G000300.1.p\n      [4]      <NA> Glyma.01G000500    30543768 Glyma.01G000500.1.p\n      [5]      <NA> Glyma.01G000400    30542514 Glyma.01G000400.1.p\n      ...       ...             ...         ...                 ...\n  [56040]      <NA>   Glyma.U045100    30487127   Glyma.U045100.1.p\n  [56041]      <NA>   Glyma.U045200    30487126   Glyma.U045200.1.p\n  [56042]      <NA>   Glyma.U045300    30523589   Glyma.U045300.1.p\n  [56043]      <NA>   Glyma.U045400    30523588   Glyma.U045400.1.p\n  [56044]      <NA>   Glyma.U045500    30523590   Glyma.U045500.1.p\n                              id           alias                    tid\n                     <character>     <character>            <character>\n      [1] Glyma.01G000100.Wm82..   Glyma01g00210 Glyma.01G000100.1.Wm..\n      [2] Glyma.01G000200.Wm82..            <NA> Glyma.01G000200.1.Wm..\n      [3] Glyma.01G000300.Wm82..            <NA> Glyma.01G000300.1.Wm..\n      [4] Glyma.01G000500.Wm82..            <NA> Glyma.01G000500.1.Wm..\n      [5] Glyma.01G000400.Wm82..   Glyma01g00300 Glyma.01G000400.1.Wm..\n      ...                    ...             ...                    ...\n  [56040] Glyma.U045100.Wm82.a..            <NA> Glyma.U045100.1.Wm82..\n  [56041] Glyma.U045200.Wm82.a.. Glyma0101s00210 Glyma.U045200.1.Wm82..\n  [56042] Glyma.U045300.Wm82.a..            <NA> Glyma.U045300.1.Wm82..\n  [56043] Glyma.U045400.Wm82.a..            <NA> Glyma.U045400.1.Wm82..\n  [56044] Glyma.U045500.Wm82.a..            <NA> Glyma.U045500.1.Wm82..\n                   old_id            Name         gene_id          Parent\n              <character>     <character>     <character> <CharacterList>\n      [1]   Glyma01g00210 Glyma.01G000100 Glyma.01G000100                \n      [2]            <NA> Glyma.01G000200 Glyma.01G000200                \n      [3]            <NA> Glyma.01G000300 Glyma.01G000300                \n      [4]            <NA> Glyma.01G000500 Glyma.01G000500                \n      [5]   Glyma01g00300 Glyma.01G000400 Glyma.01G000400                \n      ...             ...             ...             ...             ...\n  [56040]            <NA>   Glyma.U045100   Glyma.U045100                \n  [56041] Glyma0101s00210   Glyma.U045200   Glyma.U045200                \n  [56042]            <NA>   Glyma.U045300   Glyma.U045300                \n  [56043]            <NA>   Glyma.U045400   Glyma.U045400                \n  [56044]            <NA>   Glyma.U045500   Glyma.U045500                \n                    old_tid       UniProtKB\n                <character> <CharacterList>\n      [1]              <NA>                \n      [2]              <NA>                \n      [3]              <NA>                \n      [4]              <NA>                \n      [5]   Glyma01g00300.1                \n      ...               ...             ...\n  [56040]              <NA>                \n  [56041] Glyma0101s00210.2                \n  [56042]              <NA>                \n  [56043]              <NA>                \n  [56044]              <NA>                \n  -------\n  seqinfo: 147 sequences from an unspecified genome; no seqlengths\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the `GRanges` object created from the GFF3 file to answer the following\nquestions:\n\n1. How many ranges represent genes and CDS, respectively?\n2. How many chromosomes are there?\n3. Which chromosome has the greatest number of genes?\n4. What is the mean number of genes per chromosome?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\ntable(gma_ranges$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n           gene            mRNA            exon three_prime_UTR             CDS \n          56044           56044          297976           47192          282673 \n five_prime_UTR \n          51376 \n```\n:::\n\n```{.r .cell-code}\n# Q2\ntable(seqnames(gma_ranges))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n        Chr01         Chr02         Chr03         Chr04         Chr05 \n        33819         43741         37220         37473         35487 \n        Chr06         Chr07         Chr08         Chr09         Chr10 \n        46297         39226         53789         40095         42785 \n        Chr11         Chr12         Chr13         Chr14         Chr15 \n        37556         33944         54585         31155         38793 \n        Chr16         Chr17         Chr18         Chr19         Chr20 \n        29694         37989         39914         36761         35482 \nscaffold_1038  scaffold_105 scaffold_1057 scaffold_1065 scaffold_1078 \n            7            68            10             6             4 \n scaffold_110  scaffold_111 scaffold_1118  scaffold_112 scaffold_1160 \n           13            24            24             6             4 \nscaffold_1179  scaffold_118  scaffold_119 scaffold_1196 scaffold_1219 \n            8            28            12             4            12 \n scaffold_123 scaffold_1233 scaffold_1241 scaffold_1271  scaffold_128 \n           86            10            16             4            34 \nscaffold_1317 scaffold_1321 scaffold_1327  scaffold_137 scaffold_1379 \n           14             4            10            32             4 \n scaffold_138  scaffold_139 scaffold_1394 scaffold_1402  scaffold_151 \n           16            26             6            25             4 \n scaffold_152 scaffold_1560  scaffold_157  scaffold_164  scaffold_165 \n            8             6             8            46            11 \n scaffold_168 scaffold_1718 scaffold_1729 scaffold_1742 scaffold_1745 \n           16             9             9            15             4 \nscaffold_1777 scaffold_1793  scaffold_186  scaffold_191  scaffold_195 \n            6            18            10            64            38 \nscaffold_1967  scaffold_197 scaffold_1990  scaffold_205  scaffold_208 \n           10            38            10             8            10 \nscaffold_2080   scaffold_21  scaffold_211  scaffold_212 scaffold_2140 \n           12          1768            10            17             8 \n scaffold_216  scaffold_217   scaffold_22  scaffold_223  scaffold_229 \n           30            24           233            12            16 \n  scaffold_23   scaffold_24   scaffold_25  scaffold_254  scaffold_263 \n          189            16            49            10            10 \n scaffold_265   scaffold_27  scaffold_271   scaffold_28  scaffold_296 \n           18           158            22           431             4 \n  scaffold_30   scaffold_31  scaffold_311   scaffold_32  scaffold_330 \n           16           138             8           368            20 \n scaffold_344  scaffold_345  scaffold_349  scaffold_353   scaffold_36 \n           39            10            32             8            16 \n scaffold_361  scaffold_376  scaffold_383   scaffold_40  scaffold_409 \n           14            20             8            32             8 \n  scaffold_41  scaffold_412  scaffold_426   scaffold_44  scaffold_442 \n            8            12             7           203            17 \n scaffold_471  scaffold_484  scaffold_488  scaffold_521  scaffold_522 \n           26            10            14             4             4 \n scaffold_530  scaffold_581  scaffold_587  scaffold_608  scaffold_614 \n            6            18            23            22            14 \n scaffold_623  scaffold_633  scaffold_636   scaffold_65  scaffold_660 \n            4             8            14            21            16 \n scaffold_675  scaffold_681  scaffold_691  scaffold_711  scaffold_713 \n           12            10            17            22             6 \n  scaffold_72   scaffold_73   scaffold_74  scaffold_744   scaffold_75 \n            8            18            22             8            12 \n  scaffold_76   scaffold_78  scaffold_821  scaffold_843  scaffold_846 \n           19            38            16            10             7 \n scaffold_852   scaffold_88  scaffold_896   scaffold_91   scaffold_93 \n            6             8             8            24            73 \n  scaffold_97   scaffold_99 \n           32            34 \n```\n:::\n\n```{.r .cell-code}\n# Q3\nsort(table(seqnames(gma_ranges)), decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n        Chr13         Chr08         Chr06         Chr02         Chr10 \n        54585         53789         46297         43741         42785 \n        Chr09         Chr18         Chr07         Chr15         Chr17 \n        40095         39914         39226         38793         37989 \n        Chr11         Chr04         Chr03         Chr19         Chr05 \n        37556         37473         37220         36761         35487 \n        Chr20         Chr12         Chr01         Chr14         Chr16 \n        35482         33944         33819         31155         29694 \n  scaffold_21   scaffold_28   scaffold_32   scaffold_22   scaffold_44 \n         1768           431           368           233           203 \n  scaffold_23   scaffold_27   scaffold_31  scaffold_123   scaffold_93 \n          189           158           138            86            73 \n scaffold_105  scaffold_191   scaffold_25  scaffold_164  scaffold_344 \n           68            64            49            46            39 \n scaffold_195  scaffold_197   scaffold_78  scaffold_128   scaffold_99 \n           38            38            38            34            34 \n scaffold_137  scaffold_349   scaffold_40   scaffold_97  scaffold_216 \n           32            32            32            32            30 \n scaffold_118  scaffold_139  scaffold_471 scaffold_1402  scaffold_111 \n           28            26            26            25            24 \nscaffold_1118  scaffold_217   scaffold_91  scaffold_587  scaffold_271 \n           24            24            24            23            22 \n scaffold_608  scaffold_711   scaffold_74   scaffold_65  scaffold_330 \n           22            22            22            21            20 \n scaffold_376   scaffold_76 scaffold_1793  scaffold_265  scaffold_581 \n           20            19            18            18            18 \n  scaffold_73  scaffold_212  scaffold_442  scaffold_691 scaffold_1241 \n           18            17            17            17            16 \n scaffold_138  scaffold_168  scaffold_229   scaffold_24   scaffold_30 \n           16            16            16            16            16 \n  scaffold_36  scaffold_660  scaffold_821 scaffold_1742 scaffold_1317 \n           16            16            16            15            14 \n scaffold_361  scaffold_488  scaffold_614  scaffold_636  scaffold_110 \n           14            14            14            14            13 \n scaffold_119 scaffold_1219 scaffold_2080  scaffold_223  scaffold_412 \n           12            12            12            12            12 \n scaffold_675   scaffold_75  scaffold_165 scaffold_1057 scaffold_1233 \n           12            12            11            10            10 \nscaffold_1327  scaffold_186 scaffold_1967 scaffold_1990  scaffold_208 \n           10            10            10            10            10 \n scaffold_211  scaffold_254  scaffold_263  scaffold_345  scaffold_484 \n           10            10            10            10            10 \n scaffold_681  scaffold_843 scaffold_1718 scaffold_1729 scaffold_1179 \n           10            10             9             9             8 \n scaffold_152  scaffold_157  scaffold_205 scaffold_2140  scaffold_311 \n            8             8             8             8             8 \n scaffold_353  scaffold_383  scaffold_409   scaffold_41  scaffold_633 \n            8             8             8             8             8 \n  scaffold_72  scaffold_744   scaffold_88  scaffold_896 scaffold_1038 \n            8             8             8             8             7 \n scaffold_426  scaffold_846 scaffold_1065  scaffold_112 scaffold_1394 \n            7             7             6             6             6 \nscaffold_1560 scaffold_1777  scaffold_530  scaffold_713  scaffold_852 \n            6             6             6             6             6 \nscaffold_1078 scaffold_1160 scaffold_1196 scaffold_1271 scaffold_1321 \n            4             4             4             4             4 \nscaffold_1379  scaffold_151 scaffold_1745  scaffold_296  scaffold_521 \n            4             4             4             4             4 \n scaffold_522  scaffold_623 \n            4             4 \n```\n:::\n\n```{.r .cell-code}\n# Q4\nmean(table(seqnames(gma_ranges)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5383.027\n```\n:::\n:::\n\n\n:::\n:::\n\nFinally, let's load our trait-related SNPs. Since we have SNPs\nassociated with resistance to multiple pathogens, the SNP positions are\nstored in a `GRangesList` object, which is simply a list of independent \n`GRanges` objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load object with genomic coordinates of trait-related SNPs\nload(here(\"data\", \"snps_soyfungi.rda\"))\n\n# Inspecting the object\nsnps_soyfungi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRangesList object of length 5:\n$Cgregata\nGRanges object with 9 ranges and 4 metadata columns:\n      seqnames    ranges strand |    Organism       Trait         SNP\n         <Rle> <IRanges>  <Rle> | <character> <character> <character>\n  [1]    Chr02   4260493      * |    Cgregata         BSR ss715582351\n  [2]    Chr04  10664085      * |    Cgregata         BSR ss715587043\n  [3]    Chr16  32796708      * |    Cgregata         BSR ss715624549\n  [4]    Chr16  32838190      * |    Cgregata         BSR ss715624557\n  [5]    Chr16  32840492      * |    Cgregata         BSR ss715624558\n  [6]    Chr16  33018083      * |    Cgregata         BSR ss715624573\n  [7]    Chr16  33018083      * |    Cgregata         BSR ss715624573\n  [8]    Chr16  33119116      * |    Cgregata         BSR ss715624583\n  [9]    Chr17  37284864      * |    Cgregata         BSR ss715627222\n                         DOI\n                 <character>\n  [1] 10.3835/plantgenome2..\n  [2] 10.1094/PHYTO-01-16-..\n  [3] 10.3835/plantgenome2..\n  [4] 10.3835/plantgenome2..\n  [5] 10.3835/plantgenome2..\n  [6] 10.3835/plantgenome2..\n  [7] 10.1094/PHYTO-01-16-..\n  [8] 10.3835/plantgenome2..\n  [9] 10.3835/plantgenome2..\n  -------\n  seqinfo: 20 sequences from an unspecified genome; no seqlengths\n\n...\n<4 more elements>\n```\n:::\n\n```{.r .cell-code}\nnames(snps_soyfungi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Cgregata\"      \"Fgraminearum\"  \"Fvirguliforme\" \"Mphaseolina\"  \n[5] \"Ppachyrhizi\"  \n```\n:::\n:::\n\n\nEach element of this `GRangesList` contains the genomic coordinates of SNPs\nin the soybean genome that are associated with resistance to a particular\npathogenic fungus, namely *Cadophora gregata*, *Fusarium graminearum*,\n*Fusarium virguliforme*, *Macrophomina phaseolina*, and\n*Phakopsora pachyrhizi*.\n\n::: {.callout-tip}\n\n### Practice\n\n1. Explore the `GRangesList` object with trait-related SNPs\nand answer the questions below:\n\n- How many resistance-related SNPs are there against each pathogen?\n- How many soybean chromosomes have SNPs associated with resistance \nto *Cadophora gregata*?\n\n\n::: {.callout-tip appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nlengths(snps_soyfungi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Cgregata  Fgraminearum Fvirguliforme   Mphaseolina   Ppachyrhizi \n            9            12            68            16             2 \n```\n:::\n\n```{.r .cell-code}\n# Q2\nlength(unique(seqnames(snps_soyfungi$Cgregata)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n## Exploratory data analyses\n\nBefore proceeding to the candidate gene mining, it is important to explore\nwhere in the genome our trait-related SNPs are. You can do that with two\nfunctions from *[cageminer](https://bioconductor.org/packages/3.17/cageminer)*:\n\n- `plot_snp_distribution()`: create a barplot with the number of SNPs in each\nchromosome.\n- `plot_snp_circos`: create a Circos plot with the position of each SNP\nacross chromosomes.\n\nThe functions described above work both with `GRanges` and `GRangesList`\nobjects. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Barplot of SNP counts per chromosome\n## A single set of SNPs\nplot_snp_distribution(snps_soyfungi$Cgregata)\n```\n\n::: {.cell-output-display}\n![](03_network-based_data_integration_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## Multiple sets of SNPs\nplot_snp_distribution(snps_soyfungi)\n```\n\n::: {.cell-output-display}\n![](03_network-based_data_integration_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\nFor `plot_snp_circos()`, however, you will also need to input a `GRanges` object\nwith chromosome lengths, so that the function knows where each chromosome starts\nand ends. This information is already present in a pre-built object named\n`gma_chrlen`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load object containing chromosome lengths\nload(here(\"data\", \"gma_chrlen.rda\"))\n\ngma_chrlen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 20 ranges and 0 metadata columns:\n       seqnames     ranges strand\n          <Rle>  <IRanges>  <Rle>\n   [1]    Chr01 1-56831624      *\n   [2]    Chr02 1-48577505      *\n   [3]    Chr03 1-45779781      *\n   [4]    Chr04 1-52389146      *\n   [5]    Chr05 1-42234498      *\n   ...      ...        ...    ...\n  [16]    Chr16 1-37887014      *\n  [17]    Chr17 1-41641366      *\n  [18]    Chr18 1-58018742      *\n  [19]    Chr19 1-50746916      *\n  [20]    Chr20 1-47904181      *\n  -------\n  seqinfo: 20 sequences from an unspecified genome; no seqlengths\n```\n:::\n\n```{.r .cell-code}\n# Keep only ranges for genes in chromosomes (i.e., discard scaffolds)\nchromosome_names <- seqlevels(gene_ranges)[1:20]\ngene_ranges <- keepSeqlevels(gene_ranges, chromosome_names, pruning.mode = \"tidy\")\n\n# Circos plot with SNP positions across chromosomes\n## A single set of SNPs\nplot_snp_circos(\n    genome_ranges = gma_chrlen, \n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Cgregata\n)\n```\n\n::: {.cell-output-display}\n![](03_network-based_data_integration_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## Multiple sets of SNPs\nplot_snp_circos(gma_chrlen, gene_ranges, snps_soyfungi)\n```\n\n::: {.cell-output-display}\n![](03_network-based_data_integration_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n:::\n\n\n## Mining high-confidence candidate genes\n\nTo prioritize candidate genes, *[cageminer](https://bioconductor.org/packages/3.17/cageminer)* uses\na 3-step workflow as illustrated below:\n\n![Candidate gene prioritization workflow with cageminer](cageminer_workflow.jpeg){fig-align=\"center\"}\n\nImportantly, while it is recommended to follow all 3 steps, they\ncan be executed independently, so one can use only one or a few steps.\nFor instance, if you don't have GWAS-derived SNPs, but you have a list\nof reference genes that you know are involved in a trait of interest, you\ncould execute only steps 2 and 3 to find potential candidate genes. \n\nBecause of such independence between steps, the candidate gene mining workflow \ncan be executed in two ways: \nwith separate functions (`mine_step1()`, `mine_step2()`, and `mine_step3()`), \nor with a single function (`mine_candidates()`) that automatically executes\nthe separate functions one after another. Both ways are described below. \nFirst, let's prepare required data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load GCN and data frame of guides\nload(here(\"data\", \"gcn_soyfungi.rda\"))\nload(here(\"data\", \"guides_soyfungi.rda\"))\n\n## Conditions in which we expected expression to change\nconditions <- paste0(\"Fgraminearum_\", c(\"stress_PI567301B\", \"stress_wyandot\"))\n```\n:::\n\n\n::: {.column-page}\n\n::: {.columns}\n::: {.column width=\"45%\"}\n\n**Step-by-step candidate gene mining**\n\nExample: mining genes associated with resistance to *Fusarium graminearum*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: finding genes close to SNPs\ncandidates1 <- mine_step1(\n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Fgraminearum\n)\n\n# Step 2: finding coexpression modules enriched in guide genes\ncandidates2 <- mine_step2(\n    exp = se_soyfungi,\n    gcn = gcn_soyfungi,\n    guides = guides_soyfungi$Gene,\n    candidates = candidates1$gene_id\n)\n\n# Step 3: finding genes with altered expression in a condition of interest\ncandidates3 <- mine_step3(\n    exp = se_soyfungi,\n    candidates = candidates2$candidates,\n    metadata_cols = \"Pathogen_Treatment\",\n    sample_group = conditions\n)\n```\n:::\n\n\n:::\n\n::: {.column width='3%'}\n:::\n\n::: {.column width=\"45%\"}\n\n**One-step candidate gene mining**\n\nExample: mining genes associated with resistance to *Fusarium graminearum*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Single-step candidate mining with `mine_candidates()`\ncandidates <- mine_candidates(\n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Fgraminearum, \n    exp = se_soyfungi,\n    gcn = gcn_soyfungi, \n    guides = guides_soyfungi$Gene,\n    metadata_cols = \"Pathogen_Treatment\",\n    sample_group = conditions\n)\n```\n:::\n\n\n:::\n:::\n:::\n\nBecause `mine_candidates()` is basically a wrapper that runs `mine_step1()`,\n`mine_step2()`, and `mine_step3()` one after another, the results obtained\nwith the one-step and the step-by-step mining are the same.\n\n::: {.callout-tip}\n\n### Practice\n\n1. Verify that results obtained with the one-step and with the step-by-step\nmining are the same.\n\n2. Repeat the candidate mining with `mine_candidates()`, but now look for\nhigh-confidence candidates against *Fusarium virguliforme*. Use the\nfollowing vector as `sample_group`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfvir_conditions <- paste0(\n    \"Fvirguliforme_\",\n    c(\n        \"stress_0dpi\", \"stress_10-24days\", \"stress_10dpi\", \"stress_14dpi\",\n        \"stress_2dpi\", \"stress_3-5days\", \"stress_4dpi\", \"stress_7dpi\"\n    )\n)\n```\n:::\n\n\nHow many high-confidence candidate genes are there?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nc1 <- unique(candidates3$gene)\nc2 <- unique(candidates$gene)\nidentical(c1, c2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Q2\nfvir_conditions <- paste0(\n    \"Fvirguliforme_\",\n    c(\n        \"stress_0dpi\", \"stress_10-24days\", \"stress_10dpi\", \"stress_14dpi\",\n        \"stress_2dpi\", \"stress_3-5days\", \"stress_4dpi\", \"stress_7dpi\"\n    )\n)\n\ncandidates_fvir <- mine_candidates(\n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Fgraminearum, \n    exp = se_soyfungi,\n    gcn = gcn_soyfungi, \n    guides = guides_soyfungi$Gene,\n    metadata_cols = \"Pathogen_Treatment\",\n    sample_group = fvir_conditions\n)\n```\n:::\n\n\n\n:::\n:::\n\n\n## Scoring prioritized candidate genes\n\nOnce you've prioritized candidate genes with `mine_candidates()`, you\nmight be interested in scoring genes so they can be ranked.\nThis can be performed with the function `score_genes()`,\nwhich uses the following formulae:\n\n$$\nS_i = r_{pb} \\kappa\n$$\nwhere $\\kappa = 2$ if the gene either a TF or a hub, $\\kappa = 3$ is the gene\nis both a TF and a hub, and $\\kappa = 1$ is the gene is neither a TF nor a hub.\n\nLet's demonstrate how this works:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load vector of TFs\nload(here(\"data\", \"gma_tfs.rda\"))\n\n# Get hubs\nhubs <- BioNERO::get_hubs_gcn(exp = se_soyfungi, net = gcn_soyfungi)$Gene\n\n# Score candidates\nscored_genes <- score_genes(\n    mined_candidates = candidates,\n    hubs = hubs,\n    tfs = gma_tfs\n)\n\nhead(scored_genes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                gene                         trait        cor       pvalue\n6160 Glyma.10G093100 Fgraminearum_stress_PI567301B  0.3305157 0.0001475706\n8040 Glyma.17G112900 Fgraminearum_stress_PI567301B -0.2912690 0.0008927231\n2447 Glyma.05G103300 Fgraminearum_stress_PI567301B -0.2801566 0.0014221203\n5409 Glyma.07G250900   Fgraminearum_stress_wyandot  0.2780755 0.0015484780\n191  Glyma.04G008900 Fgraminearum_stress_PI567301B -0.2588389 0.0032994086\n8746 Glyma.19G126800   Fgraminearum_stress_wyandot -0.2442952 0.0056416338\n                  group      score\n6160 Pathogen_Treatment  0.6610315\n8040 Pathogen_Treatment -0.5825379\n2447 Pathogen_Treatment -0.5603132\n5409 Pathogen_Treatment  0.5561510\n191  Pathogen_Treatment -0.5176778\n8746 Pathogen_Treatment -0.4885903\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the output of `score_genes()` and answer the questions below:\n\n- Which gene has the highest score?\n- Which gene has the lowest score?\n\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nscored_genes[which.max(abs(scored_genes$score)), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                gene                         trait       cor       pvalue\n6160 Glyma.10G093100 Fgraminearum_stress_PI567301B 0.3305157 0.0001475706\n                  group     score\n6160 Pathogen_Treatment 0.6610315\n```\n:::\n\n```{.r .cell-code}\n# Q2\nscored_genes[which.min(abs(scored_genes$score)), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                gene                         trait        cor     pvalue\n2259 Glyma.05G063600 Fgraminearum_stress_PI567301B -0.2028942 0.02215251\n                  group      score\n2259 Pathogen_Treatment -0.4057883\n```\n:::\n:::\n\n\n:::\n:::\n\n## Session information {.unnumbered}\n\nThis chapter was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-09-05\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n AnnotationFilter       1.24.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocFileCache          2.8.0     2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocIO                 1.10.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n biomaRt                2.56.0    2023-04-25 [1] Bioconductor\n BioNERO                1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n biovizBase             1.48.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n BSgenome               1.68.0    2023-04-25 [1] Bioconductor\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n cageminer            * 1.7.2     2023-08-31 [1] Bioconductor\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n commonmark             1.9.0     2023-03-17 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n curl                   5.0.0     2023-01-12 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n dbplyr                 2.3.2     2023-03-21 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n dichromat              2.0-0.1   2022-05-02 [1] CRAN (R 4.3.0)\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                  1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n ensembldb              2.24.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n filelock               1.0.2     2018-10-05 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicAlignments      1.36.0    2023-04-25 [1] Bioconductor\n GenomicFeatures        1.52.0    2023-04-25 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n GGally                 2.1.2     2021-06-21 [1] CRAN (R 4.3.0)\n ggbio                  1.48.0    2023-04-25 [1] Bioconductor\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2                3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n ggtext                 0.1.2     2022-09-16 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n graph                  1.78.0    2023-04-25 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gridtext               0.1.5     2022-09-16 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval               0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n markdown               1.6       2023-04-07 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n OrganismDbi            1.42.0    2023-04-25 [1] Bioconductor\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n prettyunits            1.1.1     2020-01-24 [1] CRAN (R 4.3.0)\n progress               1.2.2     2019-05-16 [1] CRAN (R 4.3.0)\n ProtGenerics           1.32.0    2023-04-25 [1] Bioconductor\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.0)\n RBGL                   1.76.0    2023-04-25 [1] Bioconductor\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n reshape                0.8.9     2022-04-12 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n Rsamtools              2.16.0    2023-04-25 [1] Bioconductor\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n rtracklayer            1.60.0    2023-04-25 [1] Bioconductor\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr                1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble                 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n VariantAnnotation      1.46.0    2023-04-25 [1] Bioconductor\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xml2                   1.3.4     2023-04-27 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n\n",
    "supporting": [
      "03_network-based_data_integration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}