{
  "hash": "cbee0c828a1e10aa791ffbd3bee3af19",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n# Dealing with multiple data sets: consensus modules and module preservation\n\nIn this lesson, you will learn how to compare coexpression networks to \nidentify preserved modules. At the end of the lesson, you will be able to:\n\n- understand the concept of and identify consensus modules across data sets\n- associate consensus modules to traits\n- calculate module preservation statistics\n\nLet's start by loading the packages we will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load required packages\nlibrary(tidyverse)\nlibrary(BioNERO)\nlibrary(SummarizedExperiment)\nlibrary(here)\n```\n:::\n\n\n## Getting to know the example data\n\nIn this chapter, we will use gene expression data from two BioProjects:\n\n\n1. **PRJNA800609**: soybean pods infected with the \nfungus *Colletotrichum truncatum*. Original data generated \nby @zhu2022transcriptomic.\n\n2. **PRJNA574764**: soybean roots infected with the \noomycete *Phytophthora sojae*. Original data generated by @de2020integrated.\n\n\nOur goal here is to explore similarities and differences in expression\nprofiles between these two data sets.\n\n\nData are available as *.rda* files in the `data/` directory\nof the \n[GitHub repo associated with this course](https://github.com/almeidasilvaf/NASB),\nand they were downloaded from \n[The Soybean Expression Atlas v2](https://soyatlas.venanciogroup.uenf.br/)\n[@almeida2023soybean] by searching by BioProject IDs. These *.rda* files contain \n`SummarizedExperiment` objects that store gene expression data and sample\nmetadata.\n\n\nLet's load the data and explore them briefly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression data\nload(here(\"data\", \"se_PRJNA800609.rda\"))\nload(here(\"data\", \"se_PRJNA574764.rda\"))\n\n# Rename object to a simpler name\nexp1 <- se_PRJNA800609\nexp2 <- se_PRJNA574764\n\nrm(se_PRJNA800609)\nrm(se_PRJNA574764)\n\n# Take a look at the object\nexp1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SummarizedExperiment \ndim: 31422 60 \nmetadata(0):\nassays(1): ''\nrownames(31422): Glyma.15G153300 Glyma.15G153400 ... Glyma.09G145600\n  Glyma.09G145700\nrowData names(0):\ncolnames(60): SAMN25263487 SAMN25263488 ... SAMN25263525 SAMN25263526\ncolData names(4): Part Cultivar Treatment Timepoint\n```\n:::\n\n```{.r .cell-code}\nexp2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SummarizedExperiment \ndim: 32674 49 \nmetadata(0):\nassays(1): ''\nrownames(32674): Glyma.06G124400 Glyma.06G124500 ... Glyma.19G260900\n  Glyma.19G261200\nrowData names(0):\ncolnames(49): SAMN12868627 SAMN12868668 ... SAMN12868625 SAMN12868626\ncolData names(4): Part Cultivar Treatment Timepoint\n```\n:::\n\n```{.r .cell-code}\ncolData(exp1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 60 rows and 4 columns\n                    Part     Cultivar   Treatment   Timepoint\n             <character>  <character> <character> <character>\nSAMN25263487         pod         ZC-2     control          8h\nSAMN25263488         pod         ZC-2     control          8h\nSAMN25263507         pod         ZC-2    infected         48h\nSAMN25263508         pod         ZC-2    infected         48h\nSAMN25263527         pod Zhechun NO.3    infected         12h\n...                  ...          ...         ...         ...\nSAMN25263522         pod Zhechun NO.3     control         12h\nSAMN25263523         pod Zhechun NO.3     control         12h\nSAMN25263524         pod Zhechun NO.3     control         12h\nSAMN25263525         pod Zhechun NO.3    infected         12h\nSAMN25263526         pod Zhechun NO.3    infected         12h\n```\n:::\n\n```{.r .cell-code}\ncolData(exp2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 49 rows and 4 columns\n                    Part    Cultivar   Treatment   Timepoint\n             <character> <character> <character> <character>\nSAMN12868627        root       Misty    infected       4 dpi\nSAMN12868668        root   PI 449459    infected      14 dpi\nSAMN12868669        root   PI 449459    infected      14 dpi\nSAMN12868649        root   PI 449459     control       0 dpi\nSAMN12868628        root       Misty    infected       7 dpi\n...                  ...         ...         ...         ...\nSAMN12868647        root   PI 449459     control       0 dpi\nSAMN12868648        root   PI 449459     control       0 dpi\nSAMN12868624        root       Misty     control       0 dpi\nSAMN12868625        root       Misty    infected       4 dpi\nSAMN12868626        root       Misty    infected       4 dpi\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Explore the sample metadata of `exp1` and `exp2` and answer the questions \nbelow:\n\n- How many different cultivars are there?\n- What are the levels of the `Treatment` variable, and how many samples\nare there for each level?\n- How many samples are there for each timepoint?\n\n::: {.callout-tip appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Question 1: # of cultivars\nlength(unique(exp1$Cultivar))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nlength(unique(exp2$Cultivar))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# Question 2: levels of the `Treatment` variable\ntable(exp1$Treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n control infected \n      30       30 \n```\n:::\n\n```{.r .cell-code}\ntable(exp2$Treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n control infected \n       6       43 \n```\n:::\n\n```{.r .cell-code}\n# Question 3: # of samples for each timepoint\ntable(exp1$Timepoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n12h 24h 48h  4h  8h \n 12  12  12  12  12 \n```\n:::\n\n```{.r .cell-code}\ntable(exp2$Timepoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 0 dpi 14 dpi 21 dpi  4 dpi  7 dpi \n     6     12      8     12     11 \n```\n:::\n:::\n\n\n:::\n\n:::\n\n\n## Data preprocessing\n\nNow, we will preprocess the two data sets using the same\nparameters with `exp_preprocess()`. In details, we will:\n\n1. Keep only genes with median TPM >=5.\n2. Keep only the top 10k genes with the highest variances.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Store each expression data in a list, each data set in a list element\nexp_list <- list(                      # <1>\n    colletrotrichum_infection = exp1,  # <1>\n    phytophthora_infection = exp2      # <1>\n)                                      # <1>\n\n# Loop through the list and preprocess data\nexp_list <- lapply(                                                       # <2>\n    exp_list,                                                             # <2>\n    exp_preprocess,                                                       # <3>\n    min_exp = 5, variance_filter = TRUE, n = 1e4, Zk_filtering = FALSE    # <4>\n)\n\n# Keep only genes that are shared between the two sets\nshared <- intersect(\n    rownames(exp_list$colletrotrichum_infection),\n    rownames(exp_list$phytophthora_infection)\n)\n\nexp_list <- lapply(exp_list, function(x) x[shared, ])\n```\n:::\n\n1. Store each expression data set in a list element.\n2. Loop through each element of the list `exp_list`, and\n3. execute the function `exp_preprocess`,\n4. using these parameters.\n\n\nNow, we have a list of processed expression data. This list, with each element\nrepresenting a different data set, is what we will use for all network\ncomparison functions in the next sections.\n\n::: {.callout-tip}\n\n### Practice\n\n1. How many genes and samples are there in each processed data?\n\n2. If we selected the top 10k genes with the highest variances, why do we\nnot have 10k genes in each final set?\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nsapply(exp_list, nrow)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncolletrotrichum_infection    phytophthora_infection \n                     5530                      5530 \n```\n:::\n\n```{.r .cell-code}\nsapply(exp_list, ncol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncolletrotrichum_infection    phytophthora_infection \n                       60                        49 \n```\n:::\n\n```{.r .cell-code}\n#' Q2: the genes with the highest variances are not the same in both sets.\n#' Thus, when filtering the data to keep only shared genes, some genes are\n#' removed.\n```\n:::\n\n\n:::\n:::\n\n## Identifying and analyzing consensus modules\n\nConsensus modules are coexpression modules present in different, independent\ndata sets, and they can used to find robust modules across data sets that\nstudy the same (or similar) conditions.\n\nTo identify them, __BioNERO__ infers a GCN for each data set and looks for\ngroups of genes that are densely connected in all data sets. Thus, the workflow\nhere will be very similar to what we did in the previous lesson. We will:\n\n1. Identify the optimal $\\beta$ power to which correlations will be raised\n(see previous chapter for more details on why this is done), but for each\nindividual data set - `consensus_SFT_fit()`\n2. Infer GCNs and identify consensus modules - `consensus_modules()`.\n\nLet's obtain the $\\beta$ powers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify the optimal beta power for each data set\nsfts <- consensus_SFT_fit(\n    exp_list = exp_list,\n    setLabels = names(exp_list),\n    cor_method = \"pearson\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      5    0.924 -0.968          0.935   170.0    110.00    692\n2      6    0.925 -1.050          0.936   127.0     75.40    589\n3      7    0.923 -1.120          0.936    97.4     52.70    509\n4      8    0.927 -1.160          0.944    76.5     37.10    445\n5      9    0.928 -1.200          0.946    61.2     27.00    392\n6     10    0.927 -1.230          0.947    49.7     19.80    349\n7     11    0.929 -1.260          0.950    40.9     14.80    312\n8     12    0.931 -1.290          0.954    34.0     11.10    281\n9     13    0.940 -1.300          0.963    28.6      8.52    254\n10    14    0.944 -1.320          0.968    24.2      6.55    231\n11    15    0.948 -1.330          0.970    20.7      5.18    210\n12    16    0.950 -1.340          0.973    17.8      4.03    192\n13    17    0.954 -1.350          0.977    15.4      3.18    177\n14    18    0.959 -1.350          0.982    13.4      2.51    163\n15    19    0.960 -1.370          0.984    11.7      2.03    151\n16    20    0.959 -1.380          0.985    10.3      1.64    140\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      5    0.866 -0.895          0.933  157.00    110.00    572\n2      6    0.875 -1.000          0.942  116.00     71.10    493\n3      7    0.874 -1.080          0.941   88.20     47.40    432\n4      8    0.874 -1.140          0.936   68.90     32.40    382\n5      9    0.844 -1.210          0.908   55.00     22.60    342\n6     10    0.834 -1.260          0.893   44.70     16.10    308\n7     11    0.828 -1.310          0.884   36.80     11.60    279\n8     12    0.821 -1.340          0.875   30.70      8.48    255\n9     13    0.785 -1.390          0.845   25.80      6.32    233\n10    14    0.777 -1.420          0.843   22.00      4.77    215\n11    15    0.791 -1.420          0.853   18.90      3.63    198\n12    16    0.803 -1.420          0.863   16.30      2.79    184\n13    17    0.813 -1.430          0.870   14.20      2.17    171\n14    18    0.825 -1.430          0.882   12.40      1.69    159\n15    19    0.800 -1.470          0.866   10.90      1.34    148\n16    20    0.807 -1.460          0.874    9.66      1.06    139\n```\n:::\n\n```{.r .cell-code}\nsfts$power\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncolletrotrichum_infection    phytophthora_infection \n                        5                         5 \n```\n:::\n\n```{.r .cell-code}\nsfts$plot\n```\n\n::: {.cell-output-display}\n![](02_network_comparison_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNext, let's find consensus modules.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find consensus modules\nconsensus <- consensus_modules(\n    exp_list, \n    power = sfts$power,\n    cor_method = \"pearson\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n ..done.\n multiSetMEs: Calculating module MEs.\n   Working on set 1 ...\n   Working on set 2 ...\n```\n:::\n\n```{.r .cell-code}\n# Taking a look at the consensus modules\nplot_dendro_and_colors(consensus)\n```\n\n::: {.cell-output-display}\n![](02_network_comparison_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Inspecting the output\nnames(consensus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"consMEs\"             \"exprSize\"            \"sampleInfo\"         \n[4] \"genes_cmodules\"      \"dendro_plot_objects\"\n```\n:::\n:::\n\n\nAs you may have noticed, the output of `consensus_modules()` is very similar\nto the output of `exp2gcn()`. The output object is a list containing the\nfollowing elements:\n\n1. `consMEs`: list with consensus module eigengenes.\n2. `exprSize`: list with number of data sets, and number of genes and samples\nfor each set.\n3. `sampleInfo`: list of data frames with sample metadata.\n4. `genes_cmodules`: data frame with genes and their corresponding consensus\nmodules.\n5. `dendro_plot_objects`: objects for plotting with `plot_dendro_and_colors()`.\n\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the output of `consensus_modules()` and answer the following questions:\n\n1. How many consensus modules were identified between the two data sets?\n2. What are the largest and the smallest consensus modules?\n3. What is the mean and median number of genes per consensus modules?\n\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nlength(unique(consensus$genes_cmodules$Cons_modules))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30\n```\n:::\n\n```{.r .cell-code}\n# Q2\nsort(table(consensus$genes_cmodules$Cons_modules))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n         grey          blue         brown        yellow         green \n            8            34            38            54            57 \n          red         black          pink        purple   greenyellow \n           61            66            68            75            77 \n          tan        grey60     lightcyan    lightgreen   lightyellow \n           78            96            96            97            97 \n      darkred darkturquoise      darkgrey        orange    darkorange \n          104           118           119           124           139 \n        white       magenta   saddlebrown paleturquoise     royalblue \n          140           150           169           213           269 \n       violet  midnightblue     darkgreen   yellowgreen          cyan \n          280           303           473           942           985 \n```\n:::\n\n```{.r .cell-code}\n# Q3\nmean(table(consensus$genes_cmodules$Cons_modules))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 184.3333\n```\n:::\n\n```{.r .cell-code}\nmedian(table(consensus$genes_cmodules$Cons_modules))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100.5\n```\n:::\n:::\n\n\n:::\n\n:::\n\nNext, you'd want to find correlations between consensus modules and traits of\ninterest. Here, we will look for associations between consensus modules and\nthe `Treatment` variable. Biologically speaking, we're looking for shared\ntranscriptional responses during infection with *Colletotrichum truncatum* and\n*Phytophthora sojae* (i.e., core immunity-related coexpression modules).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Correlate consensus modules to traits\nconsensus_trait <- consensus_trait_cor(\n    consensus,\n    metadata_cols = \"Treatment\"\n)\n\n# Taking a look at the output\nhead(consensus_trait)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    trait              ME         cor     pvalue     group\n1 control         MEblack          NA         NA Treatment\n2 control       MEdarkred  0.26015095 0.07092879 Treatment\n3 control          MEblue -0.14934335 0.30747782 Treatment\n4 control MEdarkturquoise  0.18536193 0.20341269 Treatment\n5 control         MEbrown          NA         NA Treatment\n6 control         MEgreen  0.05251631 0.69147472 Treatment\n```\n:::\n\n```{.r .cell-code}\n# Plot consensus module-trait correlations\nplot_module_trait_cor(consensus_trait)\n```\n\n::: {.cell-output-display}\n![](02_network_comparison_files/figure-html/unnamed-chunk-9-1.png){width=480}\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the output of `consensus_trait_cor()` and answer the questions below:\n\n1. Which consensus module has the highest positive correlation to the *infected*\nstatus of the `Treatment` variable?\n\n2. Which consensus module has the highest negative correlation to the *infected*\nstatus of the `Treatment` variable?\n\n3. (Advanced) Based on your biological knowledge, what gene functions would \nyou expect to find in the modules you found in questions 1 and 2?\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\ncor_infected <- consensus_trait[consensus_trait$trait == \"infected\", ]\ncor_infected[which.max(cor_infected$cor), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trait    ME       cor      pvalue     group\n59 infected MEred 0.4029435 0.003765978 Treatment\n```\n:::\n\n```{.r .cell-code}\n# Q2\ncor_infected[which.min(cor_infected$cor), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trait             ME        cor      pvalue     group\n49 infected MEmidnightblue -0.3966709 0.004420417 Treatment\n```\n:::\n:::\n\n\n:::\n:::\n\n\n::: {.callout-warning icon=\"false\"}\n\n### Challenge\n\nUse the function `module_enrichment()` to perform a functional enrichment\nanalysis for each consensus module. Then, try to interpret the results in\nlight of the consensus module-trait associations you found previously.\n\nTip: to load the functional annotation data, use the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(here(\"data\", \"gma_annotation.rda\"))\n```\n:::\n\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load functional annotation data\nload(here(\"data\", \"gma_annotation.rda\"))\n\n# Define background\nbackground <- rownames(exp_list$colletrotrichum_infection)\n    \n# Perform the enrichment analysis\nsim_net <- consensus\nnames(sim_net)[4] <- \"genes_and_modules\"\nnames(sim_net$genes_and_modules) <- c(\"Genes\", \"Modules\")\n\nenrich_mapman <- module_enrichment(sim_net, background, gma_annotation$MapMan)\nenrich_interpro <- module_enrichment(sim_net, background, gma_annotation$InterPro)\n```\n:::\n\n\n:::\n:::\n\n\n## Calculating module preservation statistics\n\nWhen we infer consensus modules across data sets, we only consider shared\nmodules, but we have no information on which modules are **not shared** between\ndifferent data sets. \n\nIf you want to have a more detailed picture of which modules are preserved \nand which are not, you'd need to infer a separate network for each data set,\nand then calculate module preservation statistics between the networks.\n\nHere, we will demonstrate how to do that using the same data set from\nthe previous section. Since, we already have the processed data, we will\nproceed to GCN inference using the functions `SFT_fit()` and `exp2gcn()`,\nas we saw in Chapter 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get optimal beta power for each data set\npowers <- lapply(exp_list, SFT_fit, cor_method = \"pearson\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      3    0.234 -0.774         0.0153  1130.0     997.0   1810\n2      4    0.372 -0.725         0.2440   805.0     699.0   1510\n3      5    0.530 -0.728         0.4860   602.0     509.0   1290\n4      6    0.654 -0.757         0.6480   466.0     382.0   1130\n5      7    0.767 -0.816         0.7850   372.0     295.0   1000\n6      8    0.840 -0.872         0.8600   303.0     233.0    898\n7      9    0.884 -0.923         0.9010   251.0     186.0    813\n8     10    0.901 -0.968         0.9190   211.0     151.0    742\n9     11    0.912 -1.010         0.9280   179.0     123.0    681\n10    12    0.920 -1.050         0.9380   154.0     101.0    628\n11    13    0.921 -1.080         0.9390   134.0      84.5    582\n12    14    0.914 -1.110         0.9310   117.0      70.4    541\n13    15    0.919 -1.140         0.9390   102.0      59.5    504\n14    16    0.921 -1.160         0.9410    90.5      50.5    471\n15    17    0.923 -1.180         0.9420    80.4      42.9    441\n16    18    0.925 -1.200         0.9460    71.7      36.3    415\n17    19    0.927 -1.220         0.9480    64.3      30.9    390\n18    20    0.931 -1.240         0.9520    57.8      26.7    368\n   Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.\n1      3  0.66100  4.4900          0.947  1140.0    1140.0   1510\n2      4  0.44400  2.0600          0.883   803.0     797.0   1230\n3      5  0.16500  0.6540          0.685   594.0     580.0   1050\n4      6  0.00224 -0.0438          0.585   456.0     432.0    921\n5      7  0.28100 -0.4140          0.709   359.0     330.0    818\n6      8  0.64700 -0.6550          0.878   290.0     255.0    735\n7      9  0.78900 -0.7960          0.926   238.0     199.0    669\n8     10  0.82900 -0.8870          0.937   198.0     158.0    613\n9     11  0.84100 -0.9530          0.933   168.0     126.0    566\n10    12  0.85100 -1.0100          0.937   143.0     103.0    524\n11    13  0.86000 -1.0500          0.943   123.0      83.2    488\n12    14  0.86000 -1.0900          0.941   107.0      68.1    456\n13    15  0.86100 -1.1200          0.940    93.7      56.2    428\n14    16  0.85800 -1.1600          0.934    82.5      46.5    402\n15    17  0.86800 -1.1700          0.939    73.0      38.7    379\n16    18  0.85500 -1.2100          0.925    65.0      32.4    359\n17    19  0.83400 -1.2400          0.905    58.2      27.2    340\n18    20  0.83600 -1.2600          0.905    52.3      23.1    322\n```\n:::\n\n```{.r .cell-code}\n# Infer GCN for each data set\ngcns <- lapply(seq_along(powers), function(n) {\n    \n    gcn <- exp2gcn(\n        exp_list[[n]], \n        SFTpower = powers[[n]]$power, \n        cor_method = \"pearson\"\n    )\n    \n    return(gcn)\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\nHow many modules are there in each network?\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(gcns, function(x) length(unique(x$genes_and_modules$Modules)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12 17\n```\n:::\n:::\n\n\n:::\n:::\n\nNext, we can calculate module preservation statistics using the \npermutation-based approach implemented in *[NetRep](https://CRAN.R-project.org/package=NetRep)*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate module preservation statistics\npres_netrep <- module_preservation(\n    exp_list, \n    ref_net = gcns[[1]], \n    test_net = gcns[[2]], \n    algorithm = \"netrep\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2023-08-24 09:56:26 CEST] Validating user input...\n[2023-08-24 09:56:26 CEST]   Checking matrices for problems...\n[2023-08-24 09:56:28 CEST] Input ok!\n[2023-08-24 09:56:28 CEST] Calculating preservation of network subsets from\n                           dataset \"colletrotrichum_infection\" in dataset\n                           \"phytophthora_infection\".\n[2023-08-24 09:56:28 CEST]   Pre-computing network properties in dataset\n                             \"colletrotrichum_infection\"...\n[2023-08-24 09:56:29 CEST]   Calculating observed test statistics...\n[2023-08-24 09:56:29 CEST]   Generating null distributions from 1000\n                             permutations using 1 thread...\n\n\n    0% completed.\n    1% completed.\n    2% completed.\n    2% completed.\n    3% completed.\n    4% completed.\n    5% completed.\n    5% completed.\n    6% completed.\n    7% completed.\n    8% completed.\n    9% completed.\n    9% completed.\n   10% completed.\n   11% completed.\n   12% completed.\n   13% completed.\n   13% completed.\n   14% completed.\n   15% completed.\n   16% completed.\n   16% completed.\n   17% completed.\n   18% completed.\n   19% completed.\n   20% completed.\n   20% completed.\n   21% completed.\n   22% completed.\n   23% completed.\n   24% completed.\n   24% completed.\n   25% completed.\n   26% completed.\n   27% completed.\n   28% completed.\n   28% completed.\n   29% completed.\n   30% completed.\n   31% completed.\n   31% completed.\n   32% completed.\n   33% completed.\n   34% completed.\n   35% completed.\n   35% completed.\n   36% completed.\n   37% completed.\n   38% completed.\n   39% completed.\n   39% completed.\n   40% completed.\n   41% completed.\n   42% completed.\n   42% completed.\n   43% completed.\n   44% completed.\n   45% completed.\n   46% completed.\n   46% completed.\n   47% completed.\n   48% completed.\n   49% completed.\n   50% completed.\n   50% completed.\n   51% completed.\n   52% completed.\n   53% completed.\n   54% completed.\n   54% completed.\n   55% completed.\n   56% completed.\n   57% completed.\n   57% completed.\n   58% completed.\n   59% completed.\n   60% completed.\n   61% completed.\n   61% completed.\n   62% completed.\n   63% completed.\n   64% completed.\n   64% completed.\n   65% completed.\n   66% completed.\n   67% completed.\n   68% completed.\n   68% completed.\n   69% completed.\n   70% completed.\n   71% completed.\n   72% completed.\n   72% completed.\n   73% completed.\n   74% completed.\n   75% completed.\n   75% completed.\n   76% completed.\n   77% completed.\n   78% completed.\n   79% completed.\n   79% completed.\n   80% completed.\n   81% completed.\n   82% completed.\n   83% completed.\n   83% completed.\n   84% completed.\n   85% completed.\n   86% completed.\n   87% completed.\n   87% completed.\n   88% completed.\n   89% completed.\n   90% completed.\n   90% completed.\n   91% completed.\n   92% completed.\n   93% completed.\n   94% completed.\n   94% completed.\n   95% completed.\n   96% completed.\n   97% completed.\n   98% completed.\n   98% completed.\n   99% completed.\n  100% completed.\n  100% completed.\n\n[2023-08-24 09:58:37 CEST]   Calculating P-values...\n[2023-08-24 09:58:38 CEST]   Collating results...\n[2023-08-24 09:58:39 CEST] Done!\n```\n:::\n\n```{.r .cell-code}\n# Taking a look at the P-values for preservation statistics for each module\nhead(pres_netrep$p.values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           avg.weight   coherence     cor.cor  cor.degree cor.contrib\nblack     0.000999001 0.000999001 0.000999001 0.000999001 0.000999001\nblue      0.142857143 0.262737263 0.000999001 0.000999001 0.096903097\ncyan      0.994005994 0.999000999 0.000999001 0.000999001 0.000999001\ndarkgreen 0.976023976 1.000000000 0.000999001 0.001998002 0.994005994\ngreen     0.002997003 1.000000000 0.000999001 0.000999001 0.000999001\ngrey      0.986013986 1.000000000 0.001998002 0.176823177 0.138861139\n              avg.cor avg.contrib\nblack     0.000999001 0.000999001\nblue      0.000999001 0.188811189\ncyan      0.000999001 0.000999001\ndarkgreen 0.000999001 0.100899101\ngreen     0.000999001 0.000999001\ngrey      0.005994006 0.544455544\n```\n:::\n:::\n\n\nNote that, to calculate module preservation statistics, you always need to\nchoose a **reference network** and a **test network**. Thus, the function\n`module_preservation()` will return which modules of the reference network that\nare preserved in the test network. \n\nCareful readers will also notice that this is another major difference between identifying consensus modules and calculating module preservation statistics:\none can identify consensus modules across any number of data sets, but\nmodule preservation statistics can only be calculated in a pairwise manner.\n\n\n::: {.callout-tip icon=\"false\"}\n\n### Practice\n\n1. By default, __BioNERO__ considers modules to be preserved if all preservation\nstatistics ($N=7$) are significant ($P<0.05$). Suppose you want to be less \nstringent and consider modules as preserved if 5 or more statistics are\nsignificant. Would the number of preserved modules change? Verify that.\n\n2. Use the function `module_enrichment()` to find enriched functions in all\nmodules of the reference network. Then, explore the enriched functions of \npreserved modules (if any).\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\n## Extract significant statistics for each module\nsig_stats <- apply(pres_netrep$p.values, 1, function(x) x[x < 0.05])\nsig_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$black\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$blue\n    cor.cor  cor.degree     avg.cor \n0.000999001 0.000999001 0.000999001 \n\n$cyan\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$darkgreen\n    cor.cor  cor.degree     avg.cor \n0.000999001 0.001998002 0.000999001 \n\n$green\n avg.weight     cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.002997003 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$grey\n    cor.cor     avg.cor \n0.001998002 0.005994006 \n\n$grey60\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$lightcyan\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$red\n    cor.cor  cor.degree     avg.cor \n0.001998002 0.045954046 0.010989011 \n\n$royalblue\n    cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.048951049 \n\n$salmon\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$skyblue\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.042957043 0.000999001 0.000999001 \n```\n:::\n\n```{.r .cell-code}\n## Keep only modules with 5+ significant stats\nsig_stats[lengths(sig_stats) >= 5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$black\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$cyan\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$green\n avg.weight     cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.002997003 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$grey60\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$lightcyan\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$salmon\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$skyblue\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.042957043 0.000999001 0.000999001 \n```\n:::\n\n```{.r .cell-code}\n# Q2\nbackground <- rownames(exp_list[[1]])\nenrich_preserved <- module_enrichment(\n    gcns[[1]],\n    background_genes = background,\n    annotation = gma_annotation$MapMan\n)\n```\n:::\n\n\n:::\n:::\n\n\n## Session information {.unnumbered}\n\nThis chapter was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-08-24\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n BioNERO              * 1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n Cairo                  1.6-0     2022-07-05 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magick                 2.7.4     2023-03-09 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n\n\n",
    "supporting": [
      "02_network_comparison_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}