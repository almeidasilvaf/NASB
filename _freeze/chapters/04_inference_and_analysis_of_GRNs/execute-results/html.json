{
  "hash": "c7386e2d9aa0d93972b93c93a8bd378d",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n  eval: true\n---\n\n\n# Inference and analysis of gene regulatory networks (GRNs)\n\nIn this lesson, you will learn how to infer gene regulatory networks (GRNs)\nfrom bulk RNA-seq data. At the end of the lesson, you will be able to:\n\n- infer GRNs using different popular algorithms\n- explore GRNs to extract subgraphs of interest\n- visualize GRNs\n\nLet's start by loading the packages we will use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load required packages\nlibrary(tidyverse)\nlibrary(BioNERO)\nlibrary(SummarizedExperiment)\nlibrary(here)\n```\n:::\n\n\n## Getting to know the example data\n\nHere, we will use an example data set available in `data/se_PRJNA800609.rda`\nin [the Github repo associated with this course](https://github.com/almeidasilvaf/NASB). \nThis experiment comprises soybean (*Glycine max*) pods infected with\nthe pathogenic fungus *Colletotrichum truncatum*, and data were downloaded from \n[The Soybean Expression Atlas v2](https://soyatlas.venanciogroup.uenf.br/)\n[@almeida2023soybean] using the BioProject accession *PRJNA800609*. \nThe original data were generated by @zhu2022transcriptomic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression data\nload(here(\"data\", \"se_PRJNA800609.rda\"))\n\n# Rename object to a simpler name\nexp <- se_PRJNA800609\nrm(se_PRJNA800609)\n\n# Take a look at the object\nexp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SummarizedExperiment \ndim: 31422 60 \nmetadata(0):\nassays(1): ''\nrownames(31422): Glyma.15G153300 Glyma.15G153400 ... Glyma.09G145600\n  Glyma.09G145700\nrowData names(0):\ncolnames(60): SAMN25263487 SAMN25263488 ... SAMN25263525 SAMN25263526\ncolData names(4): Part Cultivar Treatment Timepoint\n```\n:::\n:::\n\n\nWe will also use soybean transcription factors obtained from \nPlantTFDB 4.0 [@jin2016planttfdb], which are stored in `data/gma_tfs.rda`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load transcription factors\nload(here(\"data\", \"gma_tfs.rda\"))\n\nhead(gma_tfs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Glyma.10G204400\" \"Glyma.02G099500\" \"Glyma.20G186200\" \"Glyma.01G087500\"\n[5] \"Glyma.20G247300\" \"Glyma.01G000600\"\n```\n:::\n\n```{.r .cell-code}\nlength(gma_tfs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3747\n```\n:::\n:::\n\n\n## GRN inference\n\nTo infer GRNs, we need two input objects:\n\n1. A gene expression matrix (or a `SummarizedExperiment` object)\n2. A vector of known regulators (e.g., TFs).\n\nFirst, let's preprocess our expression data with `exp_preprocess()`. \nHere, for the sake of demonstration, we will only use the top 2000 genes\nwith the highest variances.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preprocess the input data\nfinal_exp <- exp_preprocess(\n    exp,\n    min_exp = 5, \n    variance_filter = TRUE, \n    n = 2000\n)\n```\n:::\n\n\nNow we're good to go. With __BioNERO__, one can infer GRNs using 3 popular\nalgorithms: GENIE3 [@huynh2010inferring], ARACNE [@margolin2006aracne], \nand CLR [@faith2007large]. Users can also infer GRNs using a combination\nof methods (a.k.a. \"wisdom of the crowds\" principle), which has been shown\nto lead to more accurate results [@marbach2012wisdom]. Let's demonstrate each\nof these approaches.\n\n### Individual algorithms\n\nTo infer GRNs using individual algorithms, you'd use the function\n`grn_infer()` and specify the method in the *method* parameter. Below\nyou can find a short description of each algorithm and how to run them.\n\n\n**GENIE3:** a regression-tree based algorithm that decomposes the prediction \nof GRNs for *n* genes into *n* regression problems. For each regression \nproblem, the expression profile of a target gene is predicted from \nthe expression profiles of all other genes using random forests \n(default) or extra-trees.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer a GRN with GENIE3\ngrn_genie3 <- grn_infer(\n    final_exp, \n    method = \"genie3\", \n    regulators = gma_tfs,\n    nTrees = 10 # <1>\n)\n\nhead(grn_genie3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Node1           Node2    Weight\n109961 Glyma.20G209700 Glyma.03G245300 0.3373682\n160260 Glyma.12G216100 Glyma.07G149600 0.3122377\n105394 Glyma.02G217800 Glyma.03G189100 0.2984574\n211825 Glyma.16G012600 Glyma.14G201800 0.2816710\n186303 Glyma.06G034000 Glyma.13G149100 0.2773383\n51236  Glyma.11G049300 Glyma.19G121600 0.2736725\n```\n:::\n:::\n\n1. Here, for demonstration purposes, we're using only 10 trees, but one should \nuse at least 1000 trees (default).\n\n\n**ARACNE:** information-theoretic algorithm that aims to remove indirect \ninteractions inferred by coexpression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer a GRN with ARACNE\ngrn_aracne <- grn_infer(\n    final_exp, \n    method = \"aracne\", \n    regulators = gma_tfs\n)\n\nhead(grn_aracne)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Node1           Node2   Weight\n70935  Glyma.20G209700 Glyma.01G037200 1.728753\n89918  Glyma.04G226700 Glyma.02G149600 1.643472\n238984 Glyma.07G212400 Glyma.10G224500 1.623464\n211176 Glyma.07G212400 Glyma.14G195200 1.607392\n91633  Glyma.20G209700 Glyma.02G195300 1.552133\n290894 Glyma.04G226700 Glyma.09G143800 1.542347\n```\n:::\n:::\n\n\n**CLR:** extension of the relevance networks algorithm that uses mutual \ninformation to identify regulatory interactions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer a GRN with CLR\ngrn_clr <- grn_infer(\n    final_exp,\n    method = \"clr\",\n    regulators = gma_tfs\n)\n\nhead(grn_clr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Node1           Node2   Weight\n260329 Glyma.15G152000 Glyma.12G009200 14.83700\n154366 Glyma.19G260900 Glyma.07G049400 13.98161\n197182 Glyma.16G017400 Glyma.13G289600 13.27572\n97603  Glyma.15G029500 Glyma.02G309500 12.62377\n55258  Glyma.13G344700 Glyma.19G211600 12.54761\n226254 Glyma.16G017400 Glyma.09G227100 12.49256\n```\n:::\n:::\n\n\nNote that these functions return a fully connected graph, so you'll need to\nfilter the edge list to remove spurious edges. One way to do it is\nby removing edges below a particular value for the `Weight` variable. However,\nsince choosing a cut-off is not straightforward and often arbitrary,\nyou can use the function `grn_filter()` to perform a graph-based filtering.\nBriefly, this function splits the network in *N* subnetworks of increasing\nsize and calculates the scale-free topology fit for each subgraph. In the end,\nthe subgraph with the best scale-free topology fit will be chosen as the\noptimum. \n\nThis is how you can use it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the GENIE3-derived GRN based on optimal SFT fit\nfiltered_grn <- grn_filter(grn_genie3)\nhead(filtered_grn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Node1           Node2\n109961 Glyma.20G209700 Glyma.03G245300\n160260 Glyma.12G216100 Glyma.07G149600\n105394 Glyma.02G217800 Glyma.03G189100\n211825 Glyma.16G012600 Glyma.14G201800\n186303 Glyma.06G034000 Glyma.13G149100\n51236  Glyma.11G049300 Glyma.19G121600\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Filter the GRN obtained with GENIE3 to keep only edges with weight $\\ge$0.2.\nThen, answer the questions below:\n\n- What is the top TF in number of targets?\n- What genes are regulated by the top TF?\n\n2. What is the rank of the edge *Glyma.07G212400 -> Glyma.10G224500* in all\nthree networks? What is the mean rank?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\n## top TF\ngenie3_filt <- grn_genie3[grn_genie3$Weight >= 0.2, ]\nhead(sort(table(genie3_filt$Node1), decreasing = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nGlyma.06G034000 Glyma.16G012600 Glyma.20G006400 Glyma.08G250700 Glyma.02G217800 \n              8               7               7               6               5 \nGlyma.12G040600 \n              4 \n```\n:::\n\n```{.r .cell-code}\n## targets of the top TF\ngenie3_filt[genie3_filt$Node1 == \"Glyma.06G034000\", \"Node2\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Glyma.13G149100\" \"Glyma.05G033500\" \"Glyma.02G083702\" \"Glyma.19G195500\"\n[5] \"Glyma.19G225500\" \"Glyma.20G189300\" \"Glyma.09G011200\" \"Glyma.20G132651\"\n```\n:::\n\n```{.r .cell-code}\n# Q2\nedge <- c(\"Glyma.07G212400\", \"Glyma.10G224500\")\n\nrank_genie3 <- which(grn_genie3$Node1 == edge[1] & grn_genie3$Node2 == edge[2])\nrank_aracne <- which(grn_aracne$Node1 == edge[1] & grn_aracne$Node2 == edge[2])\nrank_clr <- which(grn_clr$Node1 == edge[1] & grn_clr$Node2 == edge[2])\n\nmean(rank_genie3, rank_aracne, rank_clr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 168\n```\n:::\n:::\n\n\n:::\n:::\n\n\n### Wisdom of the crowds\n\nThe \"wisdom of the crowds\" principle consists in combining inferences from\nmultiple methods to obtain robust and more accurate predictions. \nAs @marbach2012wisdom stated in their paper:\n\n> We observe that no single inference method performs optimally across all datasets. In contrast, integration of predictions from multiple inference methods shows robust and high performance across diverse datasets.\n\nIn __BioNERO__, this is performed by computing average edge ranks across\ndifferent networks, exactly as you did in the previous practice problem,\nand it can be executed with the function `exp2grn()`. After computing average\nranks for each edge, `exp2grn()` sorts the edges based on ranks (in increasing\norder) and uses the graph-based filtering approach (as in `grn_filter()`) to\nremove spurious edges.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer GRN\ngrn <- exp2grn(\n    exp = final_exp,\n    regulators = gma_tfs,\n    nTrees = 10 # again, using only 10 trees for demonstration purposes\n)\n\nhead(grn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Regulator          Target\n376  Glyma.04G226700 Glyma.02G149600\n2474 Glyma.20G209700 Glyma.01G037200\n260  Glyma.03G247100 Glyma.02G022000\n2020 Glyma.17G144100 Glyma.04G228400\n1403 Glyma.12G117000 Glyma.11G137300\n1056 Glyma.09G011800 Glyma.09G143800\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the output of the GRN inferred with `exp2grn()` and answer \nthe following questions.\n\n- What regulator has the greatest number of targets?\n- What genes are regulated by the top regulator?\n- What is the minimum, maximum, mean, and median number of regulators \nper target?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nhead(sort(table(grn$Regulator), decreasing = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nGlyma.15G019400 Glyma.05G103300 Glyma.20G006400 Glyma.20G051500 Glyma.07G212400 \n             13              12              12              12              11 \nGlyma.08G115300 \n             11 \n```\n:::\n\n```{.r .cell-code}\n# Q2\ngrn[grn$Regulator == \"Glyma.15G019400\", \"Target\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Glyma.19G089800\" \"Glyma.13G116200\" \"Glyma.01G211300\" \"Glyma.11G252200\"\n [5] \"Glyma.08G330600\" \"Glyma.10G070900\" \"Glyma.12G181500\" \"Glyma.07G239200\"\n [9] \"Glyma.18G172300\" \"Glyma.15G023700\" \"Glyma.07G261000\" \"Glyma.03G148300\"\n[13] \"Glyma.20G159900\"\n```\n:::\n\n```{.r .cell-code}\n# Q3\nreg_per_target <- grn |>\n    group_by(Target) |>\n    summarise(Nregs = length(unique(Regulator)))\n\nsummary(reg_per_target$Nregs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   1.296   1.000   4.000 \n```\n:::\n:::\n\n\n:::\n:::\n\n\n## GRN analyses\n\nAfter you have a GRN, there are many things you can do with it. The downstream\nanalyses you should do will really depend on the question you're trying to\naddress. Nevertheless, in this section you will see examples of common analyses\npeople do, but keep in mind that these are not the only ones; you can\n(and should) be creative and explore different aspects of the GRN based on your\nresearch project.\n\n### Finding GRN hubs\n\nFinding hubs in GRNs is a very common practice in publications, and the\ngoal here is to identify the so-called *master regulators* of particular\nbiological processes. \n\nThis can be performed with the function `get_hubs_grn()`, which returns\nthe top 10% regulators (adjustable) based on degree.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find GRN hubs\ngrn_hubs <- get_hubs_grn(grn)\n\nhead(grn_hubs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Gene Degree\n1 Glyma.15G019400     13\n2 Glyma.05G103300     12\n3 Glyma.20G006400     12\n4 Glyma.20G051500     12\n5 Glyma.20G209700     11\n6 Glyma.19G022200     11\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n## Practice\n\nWhat is the minimum, maximum, mean, and median degree for GRN hubs?\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(grn_hubs$Degree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  5.000   6.000   7.000   7.562   9.000  13.000 \n```\n:::\n:::\n\n\n:::\n:::\n\n### Exploring and visualizing GRNs\n\nAnother common analysis is to extract subgraphs for a particular group of genes\n(usually known to be involved in a process of interest) and plot them.\n\nFirst, let's plot the entire network. This is feasible here because we \nspecifically filtered the expression data to have a small network (for\ndemonstration purposes), but it is often not feasible in real-world networks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the entire network\np_all <- plot_grn(grn)\n\np_all\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nBy default, only the top 5 hubs are labeled, but you can change that based\non your preferences. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Label the top 10 hubs\nplot_grn(grn, top_n_hubs = 10)\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Hide all labels\nplot_grn(grn, show_labels = \"none\")\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n:::\n\n\nNow, we will visualize the subgraph for the top hub and its targets. You can do\nthat by filtering the edge list to keep only edges containing the gene(s) you're\ninterested (here, the top hub).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Keep only edges containing the top hub\ntop_hub <- grn_hubs$Gene[1]\nedges_top_hub <- grn[grn$Regulator == top_hub, ]\n\nhead(edges_top_hub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Regulator          Target\n1789 Glyma.15G019400 Glyma.19G089800\n1785 Glyma.15G019400 Glyma.13G116200\n1770 Glyma.15G019400 Glyma.01G211300\n1783 Glyma.15G019400 Glyma.11G252200\n1779 Glyma.15G019400 Glyma.08G330600\n1781 Glyma.15G019400 Glyma.10G070900\n```\n:::\n\n```{.r .cell-code}\n# Visualize the subgraph\nplot_grn(edges_top_hub)\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nWith smaller subgraphs, it's nice to play with parameters in `plot_grn()` to\ncustomize your visualization. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Show all nodes\nplot_grn(edges_top_hub, show_labels = \"all\")\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nFinally, since the output of `plot_grn()` is a ggplot object (same \nfor `plot_gcn()` and `plot_ppi()`), you can store it in an object and modify it\nlater. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_grn <- plot_grn(edges_top_hub)\n\n# Change colors of regulators and targets\np_grn +\n    scale_fill_manual(values = c(\"dodgerblue3\", \"firebrick3\"))\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Remove legend\np_grn +\n    theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip}\n\n### Practice\n\nCreate a subgraph with the top 10 hubs and their targets. Then, create different\nnetwork visualizations based on the following instructions:\n\n**Network 1:** Default parameters in `plot_grn()`\n\n**Network 2:** Label all hubs.\n\n**Network 3:** Label all hubs and change node colors (the fill aesthetics) so that\nregulators have the colors \"black\" and targets have the color \"grey70\".\n\n**Network 4:** Label all hubs and add the following plot title: \"Network representation\nof the top 10 hubs and their targets\"\n\n**Network 5:** Label all hubs, change the network layout function \nto `with_gem`, and move the legend to the bottom of the plot.\n\n\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- grn[grn$Regulator %in% grn_hubs$Gene[1:10], ]\n\n# 1\nplot_grn(edges)\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2\nplot_grn(edges, show_labels = \"allhubs\")\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 3\nplot_grn(edges, show_labels = \"allhubs\") +\n    scale_fill_manual(values = c(\"grey70\", \"black\"))\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# 4\nplot_grn(edges, show_labels = \"allhubs\") +\n    labs(title = \"Network representation of the top 10 hubs and their targets\")\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-19-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# 5\nplot_grn(edges, show_labels = \"allhubs\", layout = igraph::with_gem) +\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](04_inference_and_analysis_of_GRNs_files/figure-html/unnamed-chunk-19-5.png){width=672}\n:::\n:::\n\n\n:::\n:::\n\n\n\n\n\n\n## Session information {.unnumbered}\n\nThis chapter was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-09-09\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BioNERO              * 1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## References {.unnumbered}\n\n\n",
    "supporting": [
      "04_inference_and_analysis_of_GRNs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}