{
  "hash": "257f34aa9f130f61ef30acf817a47b51",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n---\n\n\n\n# Inference and analysis gene coexpression networks (GCNs)\n\nIn this lesson, you will learn how to infer and analyze gene coexpression \nnetworks (GCNs) from bulk RNA-seq data. At the end of this lesson, \nyou will be able to:\n\n- preprocess your quantitative data for GCN inference\n- infer a GCN that is best suitable for your project goals\n- identify genes with increased/decreased expression profiles in conditions of\ninterest\n- perform a functional profiling of interesting coexpression modules\n- explore and visualize subgraphs\n\n\nLet's start by loading the packages we will use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) # for reproducibility\n\n# Load required packages\nlibrary(tidyverse)\nlibrary(BioNERO)\nlibrary(SummarizedExperiment)\nlibrary(here)\n```\n:::\n\n\n\n## Getting to know the example data\n\nHere, we will use an example data set available in `data/se_PRJNA800609.rda`\nin [the Github repo associated with this course](https://github.com/almeidasilvaf/NASB). \nThis experiment comprises soybean (*Glycine max*) pods infected with\nthe pathogenic fungus *Colletotrichum truncatum*, and data were downloaded from \n[The Soybean Expression Atlas v2](https://soyatlas.venanciogroup.uenf.br/)\n[@almeida2023soybean] using the BioProject accession *PRJNA800609*. \nThe original data were generated by @zhu2022transcriptomic.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression data\nload(here(\"data\", \"se_PRJNA800609.rda\"))\n\n# Rename object to a simpler name\nexp <- se_PRJNA800609\nrm(se_PRJNA800609)\n\n# Take a look at the object\nexp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SummarizedExperiment \ndim: 31422 60 \nmetadata(0):\nassays(1): ''\nrownames(31422): Glyma.15G153300 Glyma.15G153400 ... Glyma.09G145600\n  Glyma.09G145700\nrowData names(0):\ncolnames(60): SAMN25263487 SAMN25263488 ... SAMN25263525 SAMN25263526\ncolData names(4): Part Cultivar Treatment Timepoint\n```\n:::\n:::\n\n\n\nAs you can see, the expression data are stored in a `SummarizedExperiment`\nobject, which is a standard data class in Bioconductor to represent\nquantitative data. The advantage of `SummarizedExperiment` objects over\nsimple matrices or data frames is that they can store in a single object:\n\n- The matrix (or matrices) with quantitative data, with features (e.g., genes,\ntranscripts, etc.) in rows and samples in columns - accessed with `assays()`.\n- Sample metadata (e.g., treatments, tissues, etc.) - accessed with `colData()`.\n- Gene metadata (e.g., functional annotation) - accessed with `rowData()`.\n- Experiment metadata, with details on study design - accessed with `metadata()`.\n\n\n![Anatomy of a *SummarizedExperiment* object](summarizedExperiment.svg)\n\nNow, let's take a look at the data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access the expression matrix\nhead(assay(exp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                SAMN25263487 SAMN25263488 SAMN25263507 SAMN25263508\nGlyma.15G153300     1.318818     1.456713     3.273825     2.692176\nGlyma.15G153400     1.228656     0.603925     0.740891     0.660024\nGlyma.15G153500     2.576290     2.414041     3.132376     2.447442\nGlyma.15G153600     3.158229     5.006052     5.774216     5.011995\nGlyma.15G154000    48.588521    46.962343    44.002279    45.718349\nGlyma.15G154100     5.691654     4.710240     6.759440     7.820475\n                SAMN25263527 SAMN25263528 SAMN25263489 SAMN25263529\nGlyma.15G153300     1.011012     1.959141     1.546159     1.966017\nGlyma.15G153400     1.158155     0.973421     1.216209     0.909978\nGlyma.15G153500     2.792934     2.496442     2.652230     2.844740\nGlyma.15G153600     5.932416     5.416826     5.009556     6.607424\nGlyma.15G154000    48.140179    45.986216    46.807960    47.291290\nGlyma.15G154100     5.563382     3.252028     3.853563     3.414671\n                SAMN25263509 SAMN25263490 SAMN25263510 SAMN25263530\nGlyma.15G153300     2.437312     1.717373     1.249473     1.653988\nGlyma.15G153400     0.758474     1.045148     1.082507     0.981065\nGlyma.15G153500     2.283780     3.648908     2.551933     2.656303\nGlyma.15G153600     5.293343     4.659172     4.788652     5.076116\nGlyma.15G154000    44.150545    46.539558    46.545660    44.865952\nGlyma.15G154100     7.098824     3.326728     5.027566     3.296681\n                SAMN25263511 SAMN25263491 SAMN25263531 SAMN25263492\nGlyma.15G153300     1.072911     1.382002     2.112684     1.656414\nGlyma.15G153400     1.077079     1.057292     1.765570     0.637662\nGlyma.15G153500     2.942451     2.713147     2.758773     3.556068\nGlyma.15G153600     5.096634     5.346749     7.161588     6.142572\nGlyma.15G154000    47.183440    45.581715    45.680125    49.907787\nGlyma.15G154100     5.240490     3.693226     6.612092     4.933826\n                SAMN25263512 SAMN25263493 SAMN25263532 SAMN25263494\nGlyma.15G153300     2.119458     1.422595     3.354588     0.985514\nGlyma.15G153400     0.813684     0.919768     1.143517     0.942899\nGlyma.15G153500     2.441782     3.057790     3.282164     3.308678\nGlyma.15G153600     4.855512     4.471064     7.049769     4.422022\nGlyma.15G154000    44.139259    51.262008    47.348781    49.390113\nGlyma.15G154100     5.966061     3.441541     7.288590     6.008751\n                SAMN25263513 SAMN25263495 SAMN25263533 SAMN25263496\nGlyma.15G153300     1.677701     1.073936     2.867476     1.084827\nGlyma.15G153400     1.452952     0.587908     1.555183     1.031356\nGlyma.15G153500     3.490847     3.661505     3.186424     3.667392\nGlyma.15G153600     4.999350     4.770911     8.006094     5.240810\nGlyma.15G154000    47.355689    45.822253    47.268358    49.510195\nGlyma.15G154100     3.664021     3.779945     8.693059     3.451897\n                SAMN25263497 SAMN25263514 SAMN25263534 SAMN25263480\nGlyma.15G153300     0.864997     1.576210     2.722977     1.893100\nGlyma.15G153400     0.789177     0.869626     1.406542     0.730242\nGlyma.15G153500     2.978911     3.089149     3.161537     3.151448\nGlyma.15G153600     4.856554     3.727502     5.142979     4.493014\nGlyma.15G154000    47.646541    47.268310    48.597863    47.326101\nGlyma.15G154100     3.269445     3.255262     3.221606     4.709318\n                SAMN25263515 SAMN25263535 SAMN25263516 SAMN25263498\nGlyma.15G153300     2.249624     1.891046     1.738025     1.781456\nGlyma.15G153400     0.824399     1.166962     0.965368     1.362375\nGlyma.15G153500     2.810047     2.309977     2.575456     2.255615\nGlyma.15G153600     4.637022     5.374759     4.972138     5.000512\nGlyma.15G154000    48.396839    50.467574    44.571641    44.338362\nGlyma.15G154100     2.804466     4.907848     9.371335     6.003852\n                SAMN25263536 SAMN25263481 SAMN25263499 SAMN25263500\nGlyma.15G153300     2.372151     1.676888     2.305295     1.722230\nGlyma.15G153400     0.718808     1.106588     1.590690     1.131578\nGlyma.15G153500     2.549741     3.067112     3.246375     2.959195\nGlyma.15G153600     5.138535     4.928480     5.817468     5.952875\nGlyma.15G154000    47.252720    47.964646    48.367664    43.730578\nGlyma.15G154100     3.680243     4.550954     5.706970     5.766535\n                SAMN25263482 SAMN25263517 SAMN25263537 SAMN25263501\nGlyma.15G153300     2.297834     1.327987     4.169942     1.515246\nGlyma.15G153400     1.133244     0.806522     1.441435     1.561416\nGlyma.15G153500     3.439320     2.639980     3.677552     2.638224\nGlyma.15G153600     4.086021     4.737207     7.752230     4.501115\nGlyma.15G154000    46.520719    44.371125    46.025873    43.937082\nGlyma.15G154100     3.966263     8.390515    11.923369     7.632822\n                SAMN25263518 SAMN25263483 SAMN25263502 SAMN25263484\nGlyma.15G153300     1.575119     1.671752     2.133655     1.654191\nGlyma.15G153400     0.993117     0.897881     1.274240     1.149185\nGlyma.15G153500     2.918993     2.162582     2.381541     3.025843\nGlyma.15G153600     5.048422     5.350417     6.929118     3.665560\nGlyma.15G154000    47.241867    47.987449    42.221480    48.841677\nGlyma.15G154100     8.396406     2.460024     8.368813     2.795243\n                SAMN25263538 SAMN25263503 SAMN25263519 SAMN25263539\nGlyma.15G153300     3.817733     1.847031     1.753658     3.502759\nGlyma.15G153400     1.740426     1.599077     1.279207     1.620121\nGlyma.15G153500     3.857652     3.322580     3.205660     3.414521\nGlyma.15G153600     7.136209     5.442902     4.257251     8.678930\nGlyma.15G154000    47.408513    44.237572    46.574200    49.496960\nGlyma.15G154100     9.716641     6.919685     5.026269    11.523564\n                SAMN25263485 SAMN25263504 SAMN25263505 SAMN25263486\nGlyma.15G153300     1.151478     2.768050     2.314021     1.450419\nGlyma.15G153400     0.779900     1.222210     1.206033     0.743528\nGlyma.15G153500     2.737924     2.834736     2.583771     3.355698\nGlyma.15G153600     4.359449     3.783583     4.989934     4.299697\nGlyma.15G154000    46.157778    50.927584    53.706670    46.663664\nGlyma.15G154100     2.096993     3.749880     3.716219     3.896027\n                SAMN25263520 SAMN25263521 SAMN25263506 SAMN25263522\nGlyma.15G153300     1.188940     1.135556     2.484093     1.951762\nGlyma.15G153400     0.709408     0.995971     0.599003     1.467000\nGlyma.15G153500     2.695393     3.312026     2.531277     2.223493\nGlyma.15G153600     5.380737     4.701845     5.064018     5.681533\nGlyma.15G154000    45.579255    44.800435    50.729964    47.573451\nGlyma.15G154100     4.774429     5.998384     5.261560     5.299969\n                SAMN25263523 SAMN25263524 SAMN25263525 SAMN25263526\nGlyma.15G153300     1.021902     1.624240     1.833319     1.615635\nGlyma.15G153400     1.308705     1.111181     1.261500     0.959593\nGlyma.15G153500     3.202121     3.195753     3.306832     3.429444\nGlyma.15G153600     5.285887     5.309246     6.134385     5.307514\nGlyma.15G154000    49.749942    48.849039    45.078426    47.553132\nGlyma.15G154100     6.103464     5.758107     5.965290     4.949206\n```\n:::\n\n```{.r .cell-code}\n# Access sample metadata (i.e., colData)\ncolData(exp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 60 rows and 4 columns\n                    Part     Cultivar   Treatment   Timepoint\n             <character>  <character> <character> <character>\nSAMN25263487         pod         ZC-2     control          8h\nSAMN25263488         pod         ZC-2     control          8h\nSAMN25263507         pod         ZC-2    infected         48h\nSAMN25263508         pod         ZC-2    infected         48h\nSAMN25263527         pod Zhechun NO.3    infected         12h\n...                  ...          ...         ...         ...\nSAMN25263522         pod Zhechun NO.3     control         12h\nSAMN25263523         pod Zhechun NO.3     control         12h\nSAMN25263524         pod Zhechun NO.3     control         12h\nSAMN25263525         pod Zhechun NO.3    infected         12h\nSAMN25263526         pod Zhechun NO.3    infected         12h\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the `exp` object to answer the questions below:\n\n1. How many levels are there for the `Treatment` variable?\n2. Subset the expression data to keep only treated samples and calculate \nthe mean expression for each gene. What is the ID of the gene with the \ngreatest mean expression in treated samples? Tip: use the `rowMeans()`\nfunction to calculate means for all genes.\n\n\n::: {.callout appearance=\"minimal\" collapse=\"true\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\ntable(exp$Treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n control infected \n      30       30 \n```\n:::\n\n```{.r .cell-code}\n# Q2\ntreated <- exp[, exp$Treatment == \"infected\"]\ngene_means <- rowMeans(assay(treated))\nsort(gene_means, decreasing = TRUE)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGlyma.11G154900 \n       22778.28 \n```\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Data preprocessing\n\nBefore inferring a GCN, we have to filter and transform our expression data to\nmaximize biological signal. The preprocessing functions implemented in \n__BioNERO__ can help users:\n\n1. Handle missing values - `replace_na()`;\n2. Remove non-expressed/lowly expressed genes - `remove_nonexp()`;\n3. Remove genes with low variances in expression levels - `filter_by_variance()`;\n4. Filter outlying samples - `ZKfiltering()`;\n5. Apply a principal component-based correction for confounders - `PC_correction()`.\n\nThese preprocessing steps are optional, but strongly recommended. To execute \nthem, you can either run one function after another (recommended if you want\nto use a few, but not all preprocessing steps), or use the wrapper function\n`exp_preprocess()`, as demonstrated below.\n\n::: {.column-page}\n::: {.columns}\n::: {.column width=\"45%\"}\n\n**Step-by-step processing**\n\nThis is how you can preprocess your expression data by piping one function\nafter another using R's native pipe operator (`|>`):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_exp1 <- exp |>                                    # <1>\n    BioNERO::replace_na() |>                                     # <2>\n    remove_nonexp(method = \"median\", min_exp = 5) |>    # <3>\n    filter_by_variance(percentile = 0.2) |>             # <4>\n    PC_correction()                                     # <5>\n```\n:::\n\n\n1. Take `exp`, and then\n2. replace missing values (`NA`) with 0, and then\n3. remove genes with median expression <5, and then\n4. keep only the top 20% of the genes with highest variances, and then\n5. correct for confounders and apply quantile normalization.\n\n:::\n\n::: {.column width='3%'}\n\n:::\n\n::: {.column width=\"45%\"}\n\n**One-step processing**\n\nTo preprocess your expression data in a single function, use the\nfunction `exp_preprocess()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_exp2 <- exp_preprocess(\n    exp, \n    min_exp = 5,\n    variance_filter = TRUE,\n    percentile = 0.2,\n    Zk_filtering = FALSE\n)\n```\n:::\n\n\n\n:::\n:::\n:::\n\nBoth examples above lead to the same results, so they are simply two different\nways of executing the same task. \n\n::: {.callout-tip}\n\n### Practice\n\n1. Compare the objects `final_exp1` and `final_exp2` to verify that they\nare indeed the same.\n\n\n2. After correcting for confounders with `PC_correction()`, the expression\ndata are quantile-normalized so that the expression levels for all genes\nare normally distributed. Visualize the distribution of expression levels\nfor a few genes to verify that.\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\n## Are dimensions (number of rows and columns) identical?\nidentical(dim(final_exp1), dim(final_exp2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n## Are the processed expression matrices identical?\nidentical(\n    assay(final_exp1)[1:5, 1:5],\n    assay(final_exp2)[1:5, 1:5]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Q2\nhist(assay(final_exp1)[1, ])\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n## Exploratory data analyses\n\nOnce you have your processed expression data, you can check if they\nlook as expected by visually exploring:\n\n- heatmaps (gene expression or sample correlations) - `plot_heatmap()`.\n- principal component analysis (PCA) - `plot_PCA()`\n\nFirst, let's take a look at pairwise sample correlations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot pairwise sample correlations\np_heatmap <- plot_heatmap(\n    final_exp1, \n    type = \"samplecor\", \n    coldata_cols = \"Treatment\",\n    show_rownames = FALSE,\n    show_colnames = FALSE\n)\n\np_heatmap\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNow, let's plot a principal component analysis of samples.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot PCA\np_pca <- plot_PCA(\n    final_exp1,\n    metadata_cols = \"Treatment\",\n)\n\np_pca\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Recreate the heatmap of sample correlations, but now add individual legends\nfor the variables `Cultivar` and `Timepoint`.\n\n2. Create a PCA plot showing the 1st and 3rd principal components.\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nplot_heatmap(\n    final_exp1, \n    type = \"samplecor\", \n    coldata_cols = c(\"Treatment\", \"Cultivar\", \"Timepoint\"),\n    show_rownames = FALSE,\n    show_colnames = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Q2\nplot_PCA(\n    final_exp1,\n    metadata_cols = \"Treatment\",\n    PCs = c(1, 3)\n)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-10-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n\n:::\n\n\n## Gene coexpression network inference\n\nBefore inferring the GCN, we must first select a value for the power $\\beta$\nto which correlation coefficients will be raised. Raising correlations to a\npower $\\beta$ aims at amplifying their distances and, hence, making\nmodule detection more powerful. Greater values of $\\beta$ makes the network\nresemble more a scale-free network, but at the cost of reducing the mean\nconnectivity. To solve this trade-off, we will use the function `SFT_fit()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find optimal beta power to which correlation coefficients will be raised\nsft <- SFT_fit(\n    final_exp1, \n    net_type = \"signed hybrid\", # <1>\n    cor_method = \"pearson\"      # <2>\n)\n\nsft$power\nsft$plot\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      3    0.135 -0.196          0.941   303.0    292.00    691\n2      4    0.591 -0.532          0.950   211.0    196.00    565\n3      5    0.752 -0.731          0.970   155.0    137.00    477\n4      6    0.823 -0.876          0.975   118.0     97.80    411\n5      7    0.853 -0.990          0.975    92.4     71.70    360\n6      8    0.869 -1.070          0.983    73.7     53.50    319\n7      9    0.881 -1.140          0.982    59.9     40.50    286\n8     10    0.887 -1.200          0.981    49.3     31.10    257\n9     11    0.894 -1.250          0.983    41.1     24.00    233\n10    12    0.904 -1.290          0.985    34.6     18.90    213\n11    13    0.908 -1.320          0.986    29.3     15.00    195\n12    14    0.909 -1.360          0.985    25.1     12.00    179\n13    15    0.915 -1.390          0.987    21.6      9.60    165\n14    16    0.915 -1.410          0.986    18.8      7.76    153\n15    17    0.915 -1.430          0.983    16.4      6.33    142\n16    18    0.913 -1.460          0.980    14.4      5.28    132\n17    19    0.922 -1.480          0.985    12.6      4.35    123\n18    20    0.930 -1.490          0.988    11.2      3.63    116\n[1] 6\n```\n:::\n:::\n\n\n1. Infer a *signed hybrid* network (negative correlations are represented as 0).\n2. Use Pearson's correlation coefficient.\n\n\nNext, we can use the estimated $\\beta$ power to infer a GCN with `exp2gcn()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer a GCN\ngcn <- exp2gcn(\n    final_exp1, \n    net_type = \"signed hybrid\",\n    SFTpower = sft$power,\n    cor_method = \"pearson\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n```\n:::\n\n```{.r .cell-code}\nnames(gcn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"adjacency_matrix\"    \"MEs\"                 \"genes_and_modules\"  \n[4] \"kIN\"                 \"correlation_matrix\"  \"params\"             \n[7] \"dendro_plot_objects\"\n```\n:::\n:::\n\n\n\nThe output of the `exp2gcn()` function is a list with the following elements:\n\n1. `adjacency_matrix`: a square matrix $m_{ij}$ representing representing the \nstrength of the connection between gene *i* and gene *j*.\n2. `correlation_matrix`: very similar to `adjacency_matrix`, but values inside the\nmatrix represent correlation coefficients.\n3. `genes_and_modules()`: a 2-column data frame of genes and their corresponding\nmodules.\n4. `MEs`: a data frame with module eigengenes (i.e., a summary of each module's\nexpression profiles).\n5. `kIN`: a data frame with each gene's degrees (i.e., sum of connection \nweights), both with genes inside the same module and in different modules.\n6. `params`: list of parameters used for network inference.\n7. `dendro_plot_objects`: list of objects used to plot a dendrogram of genes\nand modules with `plot_dendro_and_colors()`.\n\n::: {.callout-tip}\n\n### Practice\n\nExplore the object `gcn` to answer the following questions:\n\n1. How many modules are there?\n2. What is the intramodular degree of the gene *Glyma.15G171800*?\n3. What is the correlation coefficient of the gene pair \n*Glyma.15G158200*-*Glyma.15G158400*?\n4. The **grey** module is not actually a real module; it contains genes that \ncould not be assigned to any other module, so it's basically a trash bin. \nHow many genes are in this module? \n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1: number of modules\nunique(gcn$genes_and_modules$Modules)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"mediumpurple3\" \"floralwhite\"   \"violet\"        \"orange\"       \n [5] \"darkgreen\"     \"orangered4\"    \"grey60\"        \"darkturquoise\"\n [9] \"darkgrey\"      \"sienna3\"       \"saddlebrown\"   \"cyan\"         \n[13] \"purple\"        \"lightgreen\"    \"grey\"          \"skyblue3\"     \n[17] \"darkred\"       \"royalblue\"     \"pink\"          \"lightcyan\"    \n[21] \"brown\"        \n```\n:::\n\n```{.r .cell-code}\n# Q2: intramodular degree of Glyma.15G171800\ngcn$kIN[\"Glyma.15G171800\", \"kWithin\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 179.0669\n```\n:::\n\n```{.r .cell-code}\n# Q3: correlation coefficient between Glyma.15G158200 and Glyma.15G158400\ngcn$correlation_matrix[\"Glyma.15G158200\", \"Glyma.15G158400\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7866335\n```\n:::\n\n```{.r .cell-code}\n# Q4: number of genes in the grey module\ngcn$genes_and_modules |> dplyr::filter(Modules == \"grey\") |> nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 101\n```\n:::\n:::\n\n\n\n:::\n\n:::\n\n## Visual summary of the inferred coexpression modules\n\nFirst, you'd want to visualize the number of genes per module. This can be\nachieved with the function `plot_ngenes_per_module()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ngenes_per_module(gcn)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNext, you can visualize a heatmap of pairwise correlations between\nmodule eigengenes with `plot_eigengene_network()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_eigengene_network(gcn)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-15-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Identifying module-trait associations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculating module-trait correlations\nme_trait <- module_trait_cor(\n    exp = final_exp1,\n    MEs = gcn$MEs,\n    metadata_cols = c(\"Treatment\", \"Cultivar\", \"Timepoint\")\n)\n\n# Taking a look at the results\nhead(me_trait)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           ME    trait        cor       pvalue     group\n1     MEbrown  control -0.1077869 4.123628e-01 Treatment\n2     MEbrown infected  0.1077869 4.123628e-01 Treatment\n3      MEcyan  control  0.5802954 1.175467e-06 Treatment\n4      MEcyan infected -0.5802954 1.175467e-06 Treatment\n5 MEdarkgreen  control  0.5340069 1.112252e-05 Treatment\n6 MEdarkgreen infected -0.5340069 1.112252e-05 Treatment\n```\n:::\n:::\n\n\n\nThe results of `module_trait_cor()` can be visualized with \n`plot_module_trait_cor()` as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_module_trait_cor(me_trait)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-17-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThe plot shows that the module **grey60** is positively correlated with\nthe infected state, which means that genes in this module have increased \nexpression levels in infected samples. We can take a closer look at \nthis module's expression profile using the \nfunction `plot_expression_profile()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_expression_profile(\n    exp = final_exp1, \n    net = gcn,\n    modulename = \"grey60\",\n    metadata_cols = \"Treatment\"\n)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n::: {.callout-warning icon=\"false\"}\n\n### Challenge\n\nCreate a multi-panel figure showing the expression profiles of the four\nmodules with the highest absolute correlations (sign must be ignored) with\nthe *infected* state of the variable `Treatment`. For that, use the following\nsteps:\n\n1. Filter the data frame `me_trait` to include only correlations between\nmodules and `infected`;\n2. Arrange the rows in descending order based on the absolute value of `cor`;\n3. Extract the name of the top 4 modules.\n4. Iterate (with `lapply()` or a for loop) through each module name and\ncreate a plot with `plot_expression_profile()`;\n5. Combine the plots into a multi-panel figure using the `wrap_plots()` \nfunction from the *[patchwork](https://CRAN.R-project.org/package=patchwork)* package.\n\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get top modules (based in correlation with `infected`)\nmodules <- me_trait |>\n    filter(trait == \"infected\") |>\n    arrange(-abs(cor)) |>\n    slice_head(n = 4) |> \n    mutate(ME = str_replace_all(ME, \"ME\", \"\")) |>\n    pull(ME)\n\n# Create a list of plots\nprofile_plots <- lapply(modules, function(x) {\n    p <- plot_expression_profile(\n        exp = final_exp1, \n        net = gcn,\n        modulename = x,\n        metadata_cols = \"Treatment\"\n    )\n    return(p)\n})\n\n# Combine plots with patchwork\np <- patchwork::wrap_plots(\n    profile_plots, nrow = 2, ncol = 2\n) +\n    patchwork::plot_layout(guides = \"collect\") &\n    theme(legend.position = \"bottom\")\n\np\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n\n:::\n\n## Functional analyses of coexpression modules\n\nOnce you have identified interesting modules, you'd typically want to explore\nthe function of the genes therein. This can be done with the function\n`module_enrichment()`, which will perform an overrepresentation analysis\nfor functional terms (e.g., pathways, Gene Ontology terms, etc). \n\nFor that, you need to pass a data frame with genes and their associated\nfunctional annotation as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load annotation data - this is a list of data frames\nload(here(\"data\", \"gma_annotation.rda\"))\n\n# Taking a look at the data\nnames(gma_annotation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MapMan\"   \"InterPro\"\n```\n:::\n\n```{.r .cell-code}\nhead(gma_annotation$MapMan)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Gene                    MapMan\n1 Glyma.01G000100 not assigned.not annotate\n2 Glyma.01G000137 not assigned.not annotate\n3 Glyma.01G000174    not assigned.annotated\n4 Glyma.01G000211 not assigned.not annotate\n5 Glyma.01G000248    not assigned.annotated\n6 Glyma.01G000285 not assigned.not annotate\n```\n:::\n\n```{.r .cell-code}\nhead(gma_annotation$InterPro)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Gene\n1 Glyma.01G000174\n2 Glyma.01G000248\n3 Glyma.01G000248\n4 Glyma.01G000248\n5 Glyma.01G000400\n6 Glyma.01G000400\n                                                                     Interpro\n1           Photosynthesis system II assembly factor Ycf48/Hcf136-like domain\n2                Thiamine pyrophosphate enzyme, N-terminal TPP-binding domain\n3                                            Thiamin diphosphate-binding fold\n4 2-succinyl-5-enolpyruvyl-6-hydroxy-3-cyclohexene-1-carboxylic-acid synthase\n5                                                            FHY3/FAR1 family\n6                                                      Zinc finger, SWIM-type\n```\n:::\n:::\n\n\n\nThen, you can perform the enrichment analyses with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsea_mapman <- module_enrichment(\n    net = gcn, \n    background_genes = rownames(final_exp1), # <1>\n    annotation = gma_annotation$MapMan       # <2>\n)\n```\n:::\n\n\n1. Using only genes in the network as background set (very important!)\n2. Perform enrichment for MapMan pathways\n\n\nThe output of `module_enrichment()` is a data frame with significant terms\nfor each module (if any).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(sea_mapman)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                                                                                                                                                                                                                     term\n98                                                                                            Enzyme classification.EC_1 oxidoreductases.EC_1.13 oxidoreductase acting on single donor with incorporation of molecular oxygen (oxygenase)\n249                                                                                                                                               Protein homeostasis.proteolysis.protease inhibitor activities.Kunitz protease inhibitor\n60                                                                                                                              Cell wall organisation.pectin.rhamnogalacturonan I.modification and degradation.beta-galactosidase (BGAL)\n234                                                                                                     Protein homeostasis.autophagy.phagophore expansion.ATG8-phosphatidylethanolamine conjugation system.ubiquitin-fold protein (ATG8)\n262 Protein homeostasis.ubiquitin-proteasome system.ubiquitin-fold protein conjugation.Cullin-based ubiquitylation complexes.SKP1-CUL1-FBX (SCF) E3 ubiquitin ligase complexes.F-BOX substrate adaptor activities.substrate adaptor (FBX)\n42                                                Cell wall organisation.cutin and suberin.cuticular lipid formation.alkane-forming pathway.CER1-CER3 alkane-forming complex.electron supply module.electron shuttle hemoprotein (Cyt-b5)\n    genes all         pval         padj category      module\n98      6   7 6.593109e-12 3.454789e-09   MapMan        cyan\n249     3   8 5.826158e-05 1.526453e-02   MapMan        cyan\n60      6   6 1.256261e-05 3.466687e-03   MapMan   darkgreen\n234     7   8 1.323163e-05 3.466687e-03   MapMan   darkgreen\n262     8  13 1.811093e-04 3.163376e-02   MapMan   darkgreen\n42      6   6 2.341247e-04 4.089377e-02   MapMan floralwhite\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n\n### Practice\n\n1. Inspect the enrichment results in `sea_mapman` and answer the following\nquestions:\n\n- How many modules had enriched terms? \n- What proportion of the total number of modules does that represent?\n\n2. Rerun the enrichment analysis, but now using the annotation data frame\nin `gma_annotation$InterPro`. Then, answer the questions below:\n\n- How many modules had enriched terms?\n- What proportion of the total number of modules does that represent?\n- Were the number of modules with enriched terms different when using\nMapMan annotation and InterPro annotation? If so, why do you think that\nhappened?\n\n3. (Optional, advanced) Choose one of the interesting modules you found in \nthe previous section (on module-trait correlations) and look at \nthe enrichment results for it. Based on the expression profiles and \nenrichment results, can you come out with a reasonable biological explanation \nfor the observed expression patterns?\n\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nlength(unique(sea_mapman$module))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\nlength(unique(sea_mapman$module)) / length(unique(gcn$genes_and_modules$Modules))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.3333333\n```\n:::\n\n```{.r .cell-code}\n# Q2\nsea_interpro <- module_enrichment(\n    net = gcn, \n    background_genes = rownames(final_exp1),\n    annotation = gma_annotation$InterPro\n)\n\nlength(unique(sea_interpro$module))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13\n```\n:::\n\n```{.r .cell-code}\nlength(unique(sea_interpro$module)) / length(unique(gcn$genes_and_modules$Modules))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6190476\n```\n:::\n:::\n\n\n\n:::\n:::\n\n## Identifying hub genes and visualizing networks\n\nHubs are the genes with the highest degree (i.e., sum of connection weights)\nin each module, and they are often considered to be the most important genes\nin a network. To identify hubs in a GCN, you can use the \nfunction `get_hubs_gcn()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhubs <- get_hubs_gcn(exp = final_exp1, net = gcn)\n\nhead(hubs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             Gene Module   kWithin\n1 Glyma.05G051300  brown  2.789611\n2 Glyma.14G142300  brown  2.545291\n3 Glyma.19G187400  brown  2.482610\n4 Glyma.07G006900   cyan 11.718883\n5 Glyma.15G026400   cyan 11.675715\n6 Glyma.13G347700   cyan 11.271738\n```\n:::\n:::\n\n\n\nBesides exploring the major genes in each module, you can use the output\nof `get_hubs_gcn()` for network visualization. For that, you will first\nneed to extract a subgraph containing the genes you want to \nvisualize (usually an entire module), which can be achieved with the \nfunction `get_edge_list()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges <- get_edge_list(\n    net = gcn,\n    module = \"royalblue\",    # <1>     \n    filter = TRUE         # <2>\n)\n\nhead(edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Var1            Var2      Freq\n175 Glyma.15G253700 Glyma.17G101700 0.8230963\n233 Glyma.15G253700 Glyma.17G105600 0.8326334\n295 Glyma.17G105600 Glyma.17G235300 0.8218305\n407 Glyma.15G253700 Glyma.18G255300 0.8645490\n411 Glyma.17G105600 Glyma.18G255300 0.8867203\n412 Glyma.17G235300 Glyma.18G255300 0.8584245\n```\n:::\n:::\n\n\n1. Create a subgraph containing all genes in the *royalblue* module.\n2. Filter the graph to keep only connections greater than or equal to a given\ncorrelation coefficient (automatically estimated based on optimal scale-free\ntopology fit).\n\n\nNext, you can use the function `plot_gcn()` to visualize these genes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_gcn(\n    edgelist_gcn = edges,\n    net = gcn,\n    color_by = \"module\", # <1>\n    hubs = hubs\n)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n1. Nodes will be colored by their module (hence, in this case, they will\nhave a single color).\n\n::: {.callout-tip}\n\n### Practice\n\n1. Recreate the edge list for the *royalblue* module, but now \nuse `method = 'min_cor'` and `rcutoff = 0.4`. Then, plot the network. \nDoes that change the network? If so, how?\n\n2. Visualize the network from the previous question in the interactive mode.\n\n\n::: {.callout collapse=\"true\" appearance=\"minimal\"}\n\n### Show me the solutions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Q1\nfedges <- get_edge_list(\n    net = gcn,\n    module = \"royalblue\",\n    filter = TRUE,\n    method = \"min_cor\",\n    rcutoff = 0.4\n)\n\nplot_gcn(\n    edgelist_gcn = fedges,\n    net = gcn,\n    color_by = \"module\",\n    hubs = hubs\n)\n```\n\n::: {.cell-output-display}\n![](01_inference_and_analysis_of_GCNs_files/figure-pdf/unnamed-chunk-27-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Q2\n# Note: this part was commented so that this book can be exported to PDF\n\n# plot_gcn(\n#     edgelist_gcn = fedges,\n#     net = gcn,\n#     color_by = \"module\",\n#     hubs = hubs,\n#     interactive = TRUE\n# )\n```\n:::\n\n\n\n:::\n:::\n\n\n## Session information {.unnumbered}\n\nThis chapter was created under the following conditions:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n- Session info ---------------------------------------------------------------\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-09-09\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n- Packages -------------------------------------------------------------------\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n BioNERO              * 1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n Cairo                  1.6-0     2022-07-05 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magick                 2.7.4     2023-03-09 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n------------------------------------------------------------------------------\n```\n:::\n:::\n\n\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "01_inference_and_analysis_of_GCNs_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}