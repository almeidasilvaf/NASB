{
  "hash": "c234abaf4730a46aa367d98b81a04748",
  "result": {
    "markdown": "---\nexecute: \n  warning: false\n  eval: false\n---\n\n\n# Appendix: Data acquisition {.unnumbered}\n\nHere, I will describe how I obtained each example data set used in this course.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n# Required packages\nlibrary(BioNERO)\nlibrary(SummarizedExperiment)\nlibrary(tidyverse)\nlibrary(here)\n```\n:::\n\n\n## se_PRJNA800609.rda\n\nThis experiment comprises soybean pods infected with *Colletotrichum truncatum*,\nand data were downloaded from \n[The Soybean Expression Atlas v2](https://soyatlas.venanciogroup.uenf.br/)\nusing the \"Download by project\" tab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression matrix\nexp_matrix <- read.csv(\n    \"~/Downloads/PRJNA800609_TPM.tsv\", header = TRUE, sep = \"\\t\",\n    row.names = 1\n)\n\n# Load sample metadata\nsample_metadata <- read.csv(\n    \"~/Downloads/PRJNA800609_metadata.tsv\", header = TRUE, sep = \"\\t\"\n) |>\n    inner_join(\n        read.csv(\n            \"~/Downloads/SraRunTable.txt\", header = TRUE\n        )    \n    ) |>\n    select(BioSample, Part, Cultivar, Name = `Sample.Name`) |>\n    mutate(\n        Treatment = case_when(\n            str_detect(Name, \"CK\") ~ \"control\",\n            str_detect(Name, \"IN\") ~ \"infected\"\n        ),\n        Timepoint = str_extract(Name, \"[0-9]*h\")\n    ) |>\n    select(-Name) |>\n    column_to_rownames(\"BioSample\")\n\n\n# Create a SummarizedExperiment object\nse_PRJNA800609 <- SummarizedExperiment(\n    assays = list(TPM = exp_matrix), \n    colData = sample_metadata[colnames(exp_matrix), ]\n) |>\n    BioNERO::remove_nonexp(method = \"median\", min_exp = 1)\n\n# Save object to .rda file\nsave(\n    se_PRJNA800609, compress = \"xz\",\n    file = here::here(\"data\", \"se_PRJNA800609.rda\")\n    \n)\n```\n:::\n\n\n## se_PRJNA574764.rda\n\nThis experiment comprises soybean roots infected with *Phytophthora sojae*,\nand data were downloaded from \n[The Soybean Expression Atlas v2](https://soyatlas.venanciogroup.uenf.br/)\nusing the \"Download by project\" tab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression matrix\nexp_matrix <- read.csv(\n    \"~/Downloads/PRJNA574764_TPM.tsv\", header = TRUE, sep = \"\\t\",\n    row.names = 1\n)\n\n# Load sample metadata\nsample_metadata <- read.csv(\n    \"~/Downloads/PRJNA574764_metadata.tsv\", header = TRUE, sep = \"\\t\"\n) |>\n    inner_join(\n        read.csv(\n            \"~/Downloads/SraRunTable_PRJNA574764.txt\", header = TRUE\n        )    \n    ) |>\n    select(BioSample, Part, Cultivar, Age) |>\n    mutate(\n        Treatment = case_when(\n            str_detect(Age, \"0 dpi\") ~ \"control\", TRUE ~ \"infected\"\n        ),\n        Timepoint = str_replace_all(Age, \" rep.*\", \"\")\n    ) |>\n    select(-Age) |>\n    column_to_rownames(\"BioSample\")\n\n\n# Create a SummarizedExperiment object\nse_PRJNA574764 <- SummarizedExperiment(\n    assays = list(TPM = exp_matrix), \n    colData = sample_metadata[colnames(exp_matrix), ]\n) |>\n    BioNERO::remove_nonexp(method = \"median\", min_exp = 1)\n\n# Save object to .rda file\nsave(\n    se_PRJNA574764, compress = \"xz\",\n    file = here::here(\"data\", \"se_PRJNA574764.rda\")\n)\n```\n:::\n\n\n\n## gma_annotation.rda\n\nThis object is a list of data frames with the following elements:\n\n1. `MapMan`: A 2-column data frame with gene IDs and their associated MapMan\nbins.\n2. `InterPro`: A 2-column data frame with gene IDs and their associated \nInterPro protein domains.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get MapMan annotation\ngma_mapman <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/MapMan/mapman.gma.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |>\n    dplyr::select(Gene = gene_id, MapMan = desc) |>\n    dplyr::distinct() |>\n    as.data.frame()\n\n# Get InterPro annotation\ngma_interpro <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/interpro.gma.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |>\n    dplyr::select(Gene = `#gene_id`, Interpro = description) |>\n    dplyr::distinct() |>\n    as.data.frame()\n\n# Combine annotations in a list and save it\ngma_annotation <- list(MapMan = gma_mapman, InterPro = gma_interpro)\n\nsave(\n    gma_annotation, compress = \"xz\",\n    file = here(\"data\", \"gma_annotation.rda\")\n)\n```\n:::\n\n\n## gcn_soyfungi.rda,  and se_soyfungi.rda\n\nThese files were obtained from @almeida2021integration, and they contain:\n\n- `se_soyfungi`: A `SummarizedExperiment` object containing gene\nexpression data on soybean tissues infected with multiple pathogenic\nfungi. Data were obtained the Soybean Expression Atlas [@almeida2023soybean]\nand processed with BioNERO [@almeida2022bionero].\n\n- `gcn_soyfungi`: A gene coexpression network inferred \nwith `BioNERO::exp2gcn()` using `se_soyfungi` as input.\n\n\nThese files were created with the code below. First, I identified which\nBioProjects to download from the Soybean Expression Atlas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get a data frame of sample metadata for fungi-infected samples\nburl <- \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/data/\"\n\nfungi_samples <- bind_rows(\n    read_tsv(file.path(burl, \"atlas_metadata_stress_samples.tsv\")),\n    read_tsv(file.path(burl, \"newsamples_metadata_stress_samples.tsv\"))\n) |>\n    filter(Stress_info == \"fungus\")\n\n# List BioProjects to download\nunique(fungi_samples$BioProject)\n```\n:::\n\n\nNext, I downloaded the TPM-normalized expression matrices for each BioProject\nby searching in the *Download by project* tab. Then, I loaded the expression\nmatrices to the R session, created a `SummarizedExperiment` object,\nand processed it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load expression data\nexp_files <- list.files(\"~/Downloads\", pattern = \"PRJ\", full.names = TRUE)\nexp_list <- lapply(exp_files, function(x) {\n    return(read.csv(x, header = TRUE, sep = \"\\t\"))\n})\nexp <- Reduce(function(x, y) merge(x, y, by = \"Gene\"), exp_list) |>\n    tibble::column_to_rownames(\"Gene\")\n\n# Keep only samples present in both `exp` and `fungi_samples$BioSample`\nshared <- intersect(names(exp), unique(fungi_samples$BioSample))\nexp <- exp[, shared]\n\n# Create a data frame of sample metadata\ncoldata <- fungi_samples |>\n    filter(BioSample %in% shared) |>\n    column_to_rownames(\"BioSample\") |>\n    select(Pathogen, Treatment = Sample_description, Tissue)\n\ncoldata <- coldata[names(exp), ] # reorder rows based on colnames of `exp`\n\n# Create `SummarizedExperiment` object\nse_soyfungi <- SummarizedExperiment(\n    assays = list(exp_TPM = exp),\n    colData = coldata\n)\n\n# Process the `SummarizedExperiment` object\nse_soyfungi <- BioNERO::exp_preprocess(\n    se_soyfungi, \n    min_exp = 5, \n    Zk_filtering = FALSE\n)\n\n# Add another metadata variable that combines `Pathogen` and `Treatment`\nse_soyfungi$Pathogen_Treatment <- paste0(\n    se_soyfungi$Pathogen, \"_\", se_soyfungi$Treatment\n)\n\n# Save object\nsave(\n    se_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"se_soyfungi.rda\")\n)\n```\n:::\n\n\nFinally, I used the process expression data to infer a GCN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Infer GCN\nsft <- SFT_fit(\n    se_soyfungi, \n    net_type = \"unsigned\", \n    cor_method = \"pearson\"\n)\n\ngcn_soyfungi <- exp2gcn(\n    se_soyfungi, \n    net_type = \"unsigned\", \n    cor_method = \"pearson\",\n    SFTpower = sft$power\n)\n\n# Save network\ngcn_soyfungi$adjacency_matrix <- NULL # to reduce file size\ngcn_soyfungi$correlation_matrix <- NULL # to reduce file size\n\nsave(\n    gcn_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"gcn_soyfungi.rda\")\n)\n```\n:::\n\n\n## snps_soyfungi.rda\n\nThis object contains a `GRangesList` with genomic coordinates of \nsoybean SNPs associated with resistance to phytopathogenic fungi, \nand they were obtained from @almeida2021integration with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download file\nfurl <- \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/products/result_files/snp_granges.rda\"\noutfile <- tempfile(fileext = \".rda\")\n\ndownload.file(\n    furl, destfile = outfile\n)\n\n# Load file\nload(outfile)\nsnps_soyfungi <- snp_grangeslist\n\n# Save object\nsave(\n    snps_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"snps_soyfungi.rda\")\n)\n```\n:::\n\n\n## guides_soyfungi.rda\n\nThis object contains a data frame of resistance-related guide genes,\nand it was obtained from @almeida2021integration with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get data of guide genes\nguides_soyfungi <- read_tsv(\n    \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/products/tables/sup_table3.tsv\",\n    show_col_types = FALSE\n)\n\n# Save object\nsave(\n    guides_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"guides_soyfungi.rda\")\n)\n```\n:::\n\n\n\n## gma_primary_transcripts.gff.gz\n\nThis file contains genomic ranges for primary transcripts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download GFF file\ndownload.file(\n    \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/data/PLAZA_selected.transcripts.gff.gz\",\n    destfile = here(\"data\", \"gma_primary_transcripts.gff3.gz\")\n)\n```\n:::\n\n\n## gma_chrlen.rda\n\nThis file contains a `GRanges` object with chromosome lengths for the soybean\ngenome, and it was created with the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Download file temporarily\nurl <- \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/data/chr_size_soybean.rda\"\nout <- tempfile(fileext = \".rda\")\ndownload.file(url, destfile = out)\n\n\n# Load object and create GRanges\nload(out)\n\ngma_chrlen <- data.frame(\n    seqnames = rownames(chr_size),\n    start = 1, \n    end = chr_size[, 1]\n)\ngma_chrlen <- GenomicRanges::makeGRangesFromDataFrame(gma_chrlen)\n\n# Save object\nsave(\n    gma_chrlen, compress = \"xz\",\n    file = here(\"data\", \"gma_chrlen.rda\")\n)\n```\n:::\n\n\n## gma_tfs.rda\n\nThis object is a character vector of gene IDs for soybean TFs,\nand it was obtained with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get a vector of TF gene IDs\ngma_tfs <- readr::read_tsv(\n    \"http://planttfdb.gao-lab.org/download/TF_list/Gma_TF_list.txt.gz\"\n) |>\n    dplyr::pull(Gene_ID) |>\n    unique()\n\n# Save object\nsave(\n    gma_tfs, compress = \"xz\",\n    file = here(\"data\", \"gma_tfs.rda\")\n)\n```\n:::\n\n\n## References {.unnumbered}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}