[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Network Analysis in Systems Biology with R/Bioconductor",
    "section": "",
    "text": "Preface\nThis book contains the materials for the course Network Analysis in Systems Biology with R/Bioconductor, which I offer in partnership with Physalia courses. This is a 4-day course, and each chapter of this book contains the materials for one day. In details:\n\nInference and analysis of gene coexpression networks (GCNs)\nNetwork comparison\nNetwork-based data integration for gene discovery\nInference and analysis of gene regulatory networks (GRNs)"
  },
  {
    "objectID": "chapters/00_setup.html#software-and-required-packages",
    "href": "chapters/00_setup.html#software-and-required-packages",
    "title": "Setup",
    "section": "Software and required packages",
    "text": "Software and required packages\nTo run the code in this book, you will need to install:\n\nR (&gt;=4.2.0): go to the CRAN website, choose your OS (Windows, Linux, or macOS), and follow the installation instructions.\nRStudio Desktop: go to the RStudio website and download the installer for your OS.\n\nAfter installing R and RStudio, you will need to install some required R packages. To do that, open RStudio and execute the code below in your console:\n\n# Install BiocManager\ninstall.packages(\"BiocManager\")\n\n# Use BiocManager to install required packages\npackages &lt;- c(\n    \"SummarizedExperiment\",\n    \"BioNERO\", \n    \"cageminer\",\n    \"tidyverse\",\n    \"here\"\n)\n\nBiocManager::install(packages)"
  },
  {
    "objectID": "chapters/00_setup.html#course-materials",
    "href": "chapters/00_setup.html#course-materials",
    "title": "Setup",
    "section": "Course materials",
    "text": "Course materials\nThroughout the course, you will use some example data sets that I created specifically for this course. You will also need code handouts to use during the live coding sessions.\nTo get all the materials you will need to:\n\nNavigate to https://github.com/almeidasilvaf/NASB\nClone the repository by clicking Code &gt; Download ZIP\nExtract the .zip file\n(Optional) Move the folder with all course materials to a directory of your choice in your machine (you don’t want to leave it in Downloads/, right?)"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#getting-to-know-the-example-data",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#getting-to-know-the-example-data",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.1 Getting to know the example data",
    "text": "1.1 Getting to know the example data\nHere, we will use an example data set available in data/se_PRJNA800609.rda in the Github repo associated with this course. This experiment comprises soybean (Glycine max) pods infected with the pathogenic fungus Colletotrichum truncatum, and data were downloaded from The Soybean Expression Atlas v2 (Almeida-Silva, Pedrosa-Silva, and Venancio 2023) using the BioProject accession PRJNA800609. The original data were generated by Zhu et al. (2022).\n\n# Load expression data\nload(here(\"data\", \"se_PRJNA800609.rda\"))\n\n# Rename object to a simpler name\nexp &lt;- se_PRJNA800609\nrm(se_PRJNA800609)\n\n# Take a look at the object\nexp\n\nclass: SummarizedExperiment \ndim: 31422 60 \nmetadata(0):\nassays(1): ''\nrownames(31422): Glyma.15G153300 Glyma.15G153400 ... Glyma.09G145600\n  Glyma.09G145700\nrowData names(0):\ncolnames(60): SAMN25263487 SAMN25263488 ... SAMN25263525 SAMN25263526\ncolData names(4): Part Cultivar Treatment Timepoint\n\n\nAs you can see, the expression data are stored in a SummarizedExperiment object, which is a standard data class in Bioconductor to represent quantitative data. The advantage of SummarizedExperiment objects over simple matrices or data frames is that they can store in a single object:\n\nThe matrix (or matrices) with quantitative data, with features (e.g., genes, transcripts, etc.) in rows and samples in columns - accessed with assays().\nSample metadata (e.g., treatments, tissues, etc.) - accessed with colData().\nGene metadata (e.g., functional annotation) - accessed with rowData().\nExperiment metadata, with details on study design - accessed with metadata().\n\n\n\n\nAnatomy of a SummarizedExperiment object\n\n\nNow, let’s take a look at the data.\n\n# Access the expression matrix\nhead(assay(exp))\n\n                SAMN25263487 SAMN25263488 SAMN25263507 SAMN25263508\nGlyma.15G153300     1.318818     1.456713     3.273825     2.692176\nGlyma.15G153400     1.228656     0.603925     0.740891     0.660024\nGlyma.15G153500     2.576290     2.414041     3.132376     2.447442\nGlyma.15G153600     3.158229     5.006052     5.774216     5.011995\nGlyma.15G154000    48.588521    46.962343    44.002279    45.718349\nGlyma.15G154100     5.691654     4.710240     6.759440     7.820475\n                SAMN25263527 SAMN25263528 SAMN25263489 SAMN25263529\nGlyma.15G153300     1.011012     1.959141     1.546159     1.966017\nGlyma.15G153400     1.158155     0.973421     1.216209     0.909978\nGlyma.15G153500     2.792934     2.496442     2.652230     2.844740\nGlyma.15G153600     5.932416     5.416826     5.009556     6.607424\nGlyma.15G154000    48.140179    45.986216    46.807960    47.291290\nGlyma.15G154100     5.563382     3.252028     3.853563     3.414671\n                SAMN25263509 SAMN25263490 SAMN25263510 SAMN25263530\nGlyma.15G153300     2.437312     1.717373     1.249473     1.653988\nGlyma.15G153400     0.758474     1.045148     1.082507     0.981065\nGlyma.15G153500     2.283780     3.648908     2.551933     2.656303\nGlyma.15G153600     5.293343     4.659172     4.788652     5.076116\nGlyma.15G154000    44.150545    46.539558    46.545660    44.865952\nGlyma.15G154100     7.098824     3.326728     5.027566     3.296681\n                SAMN25263511 SAMN25263491 SAMN25263531 SAMN25263492\nGlyma.15G153300     1.072911     1.382002     2.112684     1.656414\nGlyma.15G153400     1.077079     1.057292     1.765570     0.637662\nGlyma.15G153500     2.942451     2.713147     2.758773     3.556068\nGlyma.15G153600     5.096634     5.346749     7.161588     6.142572\nGlyma.15G154000    47.183440    45.581715    45.680125    49.907787\nGlyma.15G154100     5.240490     3.693226     6.612092     4.933826\n                SAMN25263512 SAMN25263493 SAMN25263532 SAMN25263494\nGlyma.15G153300     2.119458     1.422595     3.354588     0.985514\nGlyma.15G153400     0.813684     0.919768     1.143517     0.942899\nGlyma.15G153500     2.441782     3.057790     3.282164     3.308678\nGlyma.15G153600     4.855512     4.471064     7.049769     4.422022\nGlyma.15G154000    44.139259    51.262008    47.348781    49.390113\nGlyma.15G154100     5.966061     3.441541     7.288590     6.008751\n                SAMN25263513 SAMN25263495 SAMN25263533 SAMN25263496\nGlyma.15G153300     1.677701     1.073936     2.867476     1.084827\nGlyma.15G153400     1.452952     0.587908     1.555183     1.031356\nGlyma.15G153500     3.490847     3.661505     3.186424     3.667392\nGlyma.15G153600     4.999350     4.770911     8.006094     5.240810\nGlyma.15G154000    47.355689    45.822253    47.268358    49.510195\nGlyma.15G154100     3.664021     3.779945     8.693059     3.451897\n                SAMN25263497 SAMN25263514 SAMN25263534 SAMN25263480\nGlyma.15G153300     0.864997     1.576210     2.722977     1.893100\nGlyma.15G153400     0.789177     0.869626     1.406542     0.730242\nGlyma.15G153500     2.978911     3.089149     3.161537     3.151448\nGlyma.15G153600     4.856554     3.727502     5.142979     4.493014\nGlyma.15G154000    47.646541    47.268310    48.597863    47.326101\nGlyma.15G154100     3.269445     3.255262     3.221606     4.709318\n                SAMN25263515 SAMN25263535 SAMN25263516 SAMN25263498\nGlyma.15G153300     2.249624     1.891046     1.738025     1.781456\nGlyma.15G153400     0.824399     1.166962     0.965368     1.362375\nGlyma.15G153500     2.810047     2.309977     2.575456     2.255615\nGlyma.15G153600     4.637022     5.374759     4.972138     5.000512\nGlyma.15G154000    48.396839    50.467574    44.571641    44.338362\nGlyma.15G154100     2.804466     4.907848     9.371335     6.003852\n                SAMN25263536 SAMN25263481 SAMN25263499 SAMN25263500\nGlyma.15G153300     2.372151     1.676888     2.305295     1.722230\nGlyma.15G153400     0.718808     1.106588     1.590690     1.131578\nGlyma.15G153500     2.549741     3.067112     3.246375     2.959195\nGlyma.15G153600     5.138535     4.928480     5.817468     5.952875\nGlyma.15G154000    47.252720    47.964646    48.367664    43.730578\nGlyma.15G154100     3.680243     4.550954     5.706970     5.766535\n                SAMN25263482 SAMN25263517 SAMN25263537 SAMN25263501\nGlyma.15G153300     2.297834     1.327987     4.169942     1.515246\nGlyma.15G153400     1.133244     0.806522     1.441435     1.561416\nGlyma.15G153500     3.439320     2.639980     3.677552     2.638224\nGlyma.15G153600     4.086021     4.737207     7.752230     4.501115\nGlyma.15G154000    46.520719    44.371125    46.025873    43.937082\nGlyma.15G154100     3.966263     8.390515    11.923369     7.632822\n                SAMN25263518 SAMN25263483 SAMN25263502 SAMN25263484\nGlyma.15G153300     1.575119     1.671752     2.133655     1.654191\nGlyma.15G153400     0.993117     0.897881     1.274240     1.149185\nGlyma.15G153500     2.918993     2.162582     2.381541     3.025843\nGlyma.15G153600     5.048422     5.350417     6.929118     3.665560\nGlyma.15G154000    47.241867    47.987449    42.221480    48.841677\nGlyma.15G154100     8.396406     2.460024     8.368813     2.795243\n                SAMN25263538 SAMN25263503 SAMN25263519 SAMN25263539\nGlyma.15G153300     3.817733     1.847031     1.753658     3.502759\nGlyma.15G153400     1.740426     1.599077     1.279207     1.620121\nGlyma.15G153500     3.857652     3.322580     3.205660     3.414521\nGlyma.15G153600     7.136209     5.442902     4.257251     8.678930\nGlyma.15G154000    47.408513    44.237572    46.574200    49.496960\nGlyma.15G154100     9.716641     6.919685     5.026269    11.523564\n                SAMN25263485 SAMN25263504 SAMN25263505 SAMN25263486\nGlyma.15G153300     1.151478     2.768050     2.314021     1.450419\nGlyma.15G153400     0.779900     1.222210     1.206033     0.743528\nGlyma.15G153500     2.737924     2.834736     2.583771     3.355698\nGlyma.15G153600     4.359449     3.783583     4.989934     4.299697\nGlyma.15G154000    46.157778    50.927584    53.706670    46.663664\nGlyma.15G154100     2.096993     3.749880     3.716219     3.896027\n                SAMN25263520 SAMN25263521 SAMN25263506 SAMN25263522\nGlyma.15G153300     1.188940     1.135556     2.484093     1.951762\nGlyma.15G153400     0.709408     0.995971     0.599003     1.467000\nGlyma.15G153500     2.695393     3.312026     2.531277     2.223493\nGlyma.15G153600     5.380737     4.701845     5.064018     5.681533\nGlyma.15G154000    45.579255    44.800435    50.729964    47.573451\nGlyma.15G154100     4.774429     5.998384     5.261560     5.299969\n                SAMN25263523 SAMN25263524 SAMN25263525 SAMN25263526\nGlyma.15G153300     1.021902     1.624240     1.833319     1.615635\nGlyma.15G153400     1.308705     1.111181     1.261500     0.959593\nGlyma.15G153500     3.202121     3.195753     3.306832     3.429444\nGlyma.15G153600     5.285887     5.309246     6.134385     5.307514\nGlyma.15G154000    49.749942    48.849039    45.078426    47.553132\nGlyma.15G154100     6.103464     5.758107     5.965290     4.949206\n\n# Access sample metadata (i.e., colData)\ncolData(exp)\n\nDataFrame with 60 rows and 4 columns\n                    Part     Cultivar   Treatment   Timepoint\n             &lt;character&gt;  &lt;character&gt; &lt;character&gt; &lt;character&gt;\nSAMN25263487         pod         ZC-2     control          8h\nSAMN25263488         pod         ZC-2     control          8h\nSAMN25263507         pod         ZC-2    infected         48h\nSAMN25263508         pod         ZC-2    infected         48h\nSAMN25263527         pod Zhechun NO.3    infected         12h\n...                  ...          ...         ...         ...\nSAMN25263522         pod Zhechun NO.3     control         12h\nSAMN25263523         pod Zhechun NO.3     control         12h\nSAMN25263524         pod Zhechun NO.3     control         12h\nSAMN25263525         pod Zhechun NO.3    infected         12h\nSAMN25263526         pod Zhechun NO.3    infected         12h\n\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the exp object to answer the questions below:\n\nHow many levels are there for the Treatment variable?\nSubset the expression data to keep only treated samples and calculate the mean expression for each gene. What is the ID of the gene with the greatest mean expression in treated samples? Tip: use the rowMeans() function to calculate means for all genes.\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\ntable(exp$Treatment)\n\n\n control infected \n      30       30 \n\n# Q2\ntreated &lt;- exp[, exp$Treatment == \"infected\"]\ngene_means &lt;- rowMeans(assay(treated))\nsort(gene_means, decreasing = TRUE)[1]\n\nGlyma.11G154900 \n       22778.28"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#data-preprocessing",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#data-preprocessing",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.2 Data preprocessing",
    "text": "1.2 Data preprocessing\nBefore inferring a GCN, we have to filter and transform our expression data to maximize biological signal. The preprocessing functions implemented in BioNERO can help users:\n\nHandle missing values - replace_na();\nRemove non-expressed/lowly expressed genes - remove_nonexp();\nRemove genes with low variances in expression levels - filter_by_variance();\nFilter outlying samples - ZKfiltering();\nApply a principal component-based correction for confounders - PC_correction().\n\nThese preprocessing steps are optional, but strongly recommended. To execute them, you can either run one function after another (recommended if you want to use a few, but not all preprocessing steps), or use the wrapper function exp_preprocess(), as demonstrated below.\n\n\n\nStep-by-step processing\nThis is how you can preprocess your expression data by piping one function after another using R’s native pipe operator (|&gt;):\n\n1final_exp1 &lt;- exp |&gt;\n2    BioNERO::replace_na() |&gt;\n3    remove_nonexp(method = \"median\", min_exp = 5) |&gt;\n4    filter_by_variance(percentile = 0.2) |&gt;\n5    PC_correction()\n\n\n1\n\nTake exp, and then\n\n2\n\nreplace missing values (NA) with 0, and then\n\n3\n\nremove genes with median expression &lt;5, and then\n\n4\n\nkeep only the top 20% of the genes with highest variances, and then\n\n5\n\ncorrect for confounders and apply quantile normalization.\n\n\n\n\n\n\n\nOne-step processing\nTo preprocess your expression data in a single function, use the function exp_preprocess().\n\nfinal_exp2 &lt;- exp_preprocess(\n    exp, \n    min_exp = 5,\n    variance_filter = TRUE,\n    percentile = 0.2,\n    Zk_filtering = FALSE\n)\n\n\n\n\nBoth examples above lead to the same results, so they are simply two different ways of executing the same task.\n\n\n\n\n\n\nPractice\n\n\n\n\nCompare the objects final_exp1 and final_exp2 to verify that they are indeed the same.\nAfter correcting for confounders with PC_correction(), the expression data are quantile-normalized so that the expression levels for all genes are normally distributed. Visualize the distribution of expression levels for a few genes to verify that.\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\n## Are dimensions (number of rows and columns) identical?\nidentical(dim(final_exp1), dim(final_exp2))\n\n[1] TRUE\n\n## Are the processed expression matrices identical?\nidentical(\n    assay(final_exp1)[1:5, 1:5],\n    assay(final_exp2)[1:5, 1:5]\n)\n\n[1] TRUE\n\n# Q2\nhist(assay(final_exp1)[1, ])"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#exploratory-data-analyses",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#exploratory-data-analyses",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.3 Exploratory data analyses",
    "text": "1.3 Exploratory data analyses\nOnce you have your processed expression data, you can check if they look as expected by visually exploring:\n\nheatmaps (gene expression or sample correlations) - plot_heatmap().\nprincipal component analysis (PCA) - plot_PCA()\n\nFirst, let’s take a look at pairwise sample correlations.\n\n# Plot pairwise sample correlations\np_heatmap &lt;- plot_heatmap(\n    final_exp1, \n    type = \"samplecor\", \n    coldata_cols = \"Treatment\",\n    show_rownames = FALSE,\n    show_colnames = FALSE\n)\n\np_heatmap\n\n\n\n\nNow, let’s plot a principal component analysis of samples. Note that we have TPM-normalized data, which is not the best kind of data we should use for PCA, but we’re still doing it just to demonstrate how the function plot_PCA() works.\n\n# Plot PCA\np_pca &lt;- plot_PCA(\n    final_exp1,\n    metadata_cols = \"Treatment\",\n)\n\np_pca\n\n\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nRecreate the heatmap of sample correlations, but now add individual legends for the variables Cultivar and Timepoint.\nCreate a PCA plot showing the 1st and 3rd principal components.\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nplot_heatmap(\n    final_exp1, \n    type = \"samplecor\", \n    coldata_cols = c(\"Treatment\", \"Cultivar\", \"Timepoint\"),\n    show_rownames = FALSE,\n    show_colnames = FALSE\n)\n\n\n\n# Q2\nplot_PCA(\n    final_exp1,\n    metadata_cols = \"Treatment\",\n    PCs = c(1, 3)\n)"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#gene-coexpression-network-inference",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#gene-coexpression-network-inference",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.4 Gene coexpression network inference",
    "text": "1.4 Gene coexpression network inference\nBefore inferring the GCN, we must first select a value for the power \\(\\beta\\) to which correlation coefficients will be raised. Raising correlations to a power \\(\\beta\\) aims at amplifying their distances and, hence, making module detection more powerful. Greater values of \\(\\beta\\) makes the network resemble more a scale-free network, but at the cost of reducing the mean connectivity. To solve this trade-off, we will use the function SFT_fit().\n\n# Find optimal beta power to which correlation coefficients will be raised\nsft &lt;- SFT_fit(\n    final_exp1, \n1    net_type = \"signed hybrid\",\n2    cor_method = \"pearson\"\n)\n\nsft$power\nsft$plot\n\n\n1\n\nInfer a signed hybrid network (negative correlations are represented as 0).\n\n2\n\nUse Pearson’s correlation coefficient.\n\n\n\n\n\n\n\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      3    0.135 -0.196          0.941   303.0    292.00    691\n2      4    0.591 -0.532          0.950   211.0    196.00    565\n3      5    0.752 -0.731          0.970   155.0    137.00    477\n4      6    0.823 -0.876          0.975   118.0     97.80    411\n5      7    0.853 -0.990          0.975    92.4     71.70    360\n6      8    0.869 -1.070          0.983    73.7     53.50    319\n7      9    0.881 -1.140          0.982    59.9     40.50    286\n8     10    0.887 -1.200          0.981    49.3     31.10    257\n9     11    0.894 -1.250          0.983    41.1     24.00    233\n10    12    0.904 -1.290          0.985    34.6     18.90    213\n11    13    0.908 -1.320          0.986    29.3     15.00    195\n12    14    0.909 -1.360          0.985    25.1     12.00    179\n13    15    0.915 -1.390          0.987    21.6      9.60    165\n14    16    0.915 -1.410          0.986    18.8      7.76    153\n15    17    0.915 -1.430          0.983    16.4      6.33    142\n16    18    0.913 -1.460          0.980    14.4      5.28    132\n17    19    0.922 -1.480          0.985    12.6      4.35    123\n18    20    0.930 -1.490          0.988    11.2      3.63    116\n[1] 6\n\n\nNext, we can use the estimated \\(\\beta\\) power to infer a GCN with exp2gcn().\n\n# Infer a GCN\ngcn &lt;- exp2gcn(\n    final_exp1, \n    net_type = \"signed hybrid\",\n    SFTpower = sft$power,\n    cor_method = \"pearson\"\n)\n\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n\nnames(gcn)\n\n[1] \"adjacency_matrix\"    \"MEs\"                 \"genes_and_modules\"  \n[4] \"kIN\"                 \"correlation_matrix\"  \"params\"             \n[7] \"dendro_plot_objects\"\n\n\nThe output of the exp2gcn() function is a list with the following elements:\n\nadjacency_matrix: a square matrix \\(m_{ij}\\) representing representing the strength of the connection between gene i and gene j.\ncorrelation_matrix: very similar to adjacency_matrix, but values inside the matrix represent correlation coefficients.\ngenes_and_modules(): a 2-column data frame of genes and their corresponding modules.\nMEs: a data frame with module eigengenes (i.e., a summary of each module’s expression profiles).\nkIN: a data frame with each gene’s degrees (i.e., sum of connection weights), both with genes inside the same module and in different modules.\nparams: list of parameters used for network inference.\ndendro_plot_objects: list of objects used to plot a dendrogram of genes and modules with plot_dendro_and_colors().\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the object gcn to answer the following questions:\n\nHow many modules are there?\nWhat is the intramodular degree of the gene Glyma.15G171800?\nWhat is the correlation coefficient of the gene pair Glyma.15G158200-Glyma.15G158400?\nThe grey module is not actually a real module; it contains genes that could not be assigned to any other module, so it’s basically a trash bin. How many genes are in this module?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1: number of modules\nunique(gcn$genes_and_modules$Modules)\n\n [1] \"mediumpurple3\" \"floralwhite\"   \"violet\"        \"orange\"       \n [5] \"darkgreen\"     \"orangered4\"    \"grey60\"        \"darkturquoise\"\n [9] \"darkgrey\"      \"sienna3\"       \"saddlebrown\"   \"cyan\"         \n[13] \"purple\"        \"lightgreen\"    \"grey\"          \"skyblue3\"     \n[17] \"darkred\"       \"royalblue\"     \"pink\"          \"lightcyan\"    \n[21] \"brown\"        \n\n# Q2: intramodular degree of Glyma.15G171800\ngcn$kIN[\"Glyma.15G171800\", \"kWithin\"]\n\n[1] 179.0669\n\n# Q3: correlation coefficient between Glyma.15G158200 and Glyma.15G158400\ngcn$correlation_matrix[\"Glyma.15G158200\", \"Glyma.15G158400\"]\n\n[1] 0.7866335\n\n# Q4: number of genes in the grey module\ngcn$genes_and_modules |&gt; dplyr::filter(Modules == \"grey\") |&gt; nrow()\n\n[1] 101"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#visual-summary-of-the-inferred-coexpression-modules",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#visual-summary-of-the-inferred-coexpression-modules",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.5 Visual summary of the inferred coexpression modules",
    "text": "1.5 Visual summary of the inferred coexpression modules\nFirst, you’d want to visualize the number of genes per module. This can be achieved with the function plot_ngenes_per_module().\n\nplot_ngenes_per_module(gcn)\n\n\n\n\nNext, you can visualize a heatmap of pairwise correlations between module eigengenes with plot_eigengene_network().\n\nplot_eigengene_network(gcn)"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#identifying-module-trait-associations",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#identifying-module-trait-associations",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.6 Identifying module-trait associations",
    "text": "1.6 Identifying module-trait associations\n\n# Calculating module-trait correlations\nme_trait &lt;- module_trait_cor(\n    exp = final_exp1,\n    MEs = gcn$MEs,\n    metadata_cols = c(\"Treatment\", \"Cultivar\", \"Timepoint\")\n)\n\n# Taking a look at the results\nhead(me_trait)\n\n           ME    trait        cor       pvalue     group\n1     MEbrown  control -0.1077869 4.123628e-01 Treatment\n2     MEbrown infected  0.1077869 4.123628e-01 Treatment\n3      MEcyan  control  0.5802954 1.175467e-06 Treatment\n4      MEcyan infected -0.5802954 1.175467e-06 Treatment\n5 MEdarkgreen  control  0.5340069 1.112252e-05 Treatment\n6 MEdarkgreen infected -0.5340069 1.112252e-05 Treatment\n\n\nThe results of module_trait_cor() can be visualized with plot_module_trait_cor() as follows:\n\nplot_module_trait_cor(me_trait)\n\n\n\n\nThe plot shows that the module grey60 is positively correlated with the infected state, which means that genes in this module have increased expression levels in infected samples. We can take a closer look at this module’s expression profile using the function plot_expression_profile().\n\nplot_expression_profile(\n    exp = final_exp1, \n    net = gcn,\n    modulename = \"grey60\",\n    metadata_cols = \"Treatment\"\n)\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nCreate a multi-panel figure showing the expression profiles of the four modules with the highest absolute correlations (sign must be ignored) with the infected state of the variable Treatment. For that, use the following steps:\n\nFilter the data frame me_trait to include only correlations between modules and infected;\nArrange the rows in descending order based on the absolute value of cor;\nExtract the name of the top 4 modules.\nIterate (with lapply() or a for loop) through each module name and create a plot with plot_expression_profile();\nCombine the plots into a multi-panel figure using the wrap_plots() function from the patchwork package.\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Get top modules (based in correlation with `infected`)\nmodules &lt;- me_trait |&gt;\n    filter(trait == \"infected\") |&gt;\n    arrange(-abs(cor)) |&gt;\n    slice_head(n = 4) |&gt; \n    mutate(ME = str_replace_all(ME, \"ME\", \"\")) |&gt;\n    pull(ME)\n\n# Create a list of plots\nprofile_plots &lt;- lapply(modules, function(x) {\n    p &lt;- plot_expression_profile(\n        exp = final_exp1, \n        net = gcn,\n        modulename = x,\n        metadata_cols = \"Treatment\"\n    )\n    return(p)\n})\n\n# Combine plots with patchwork\np &lt;- patchwork::wrap_plots(\n    profile_plots, nrow = 2, ncol = 2\n) +\n    patchwork::plot_layout(guides = \"collect\") &\n    theme(legend.position = \"bottom\")\n\np"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#functional-analyses-of-coexpression-modules",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#functional-analyses-of-coexpression-modules",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.7 Functional analyses of coexpression modules",
    "text": "1.7 Functional analyses of coexpression modules\nOnce you have identified interesting modules, you’d typically want to explore the function of the genes therein. This can be done with the function module_enrichment(), which will perform an overrepresentation analysis for functional terms (e.g., pathways, Gene Ontology terms, etc).\nFor that, you need to pass a data frame with genes and their associated functional annotation as follows:\n\n# Load annotation data - this is a list of data frames\nload(here(\"data\", \"gma_annotation.rda\"))\n\n# Taking a look at the data\nnames(gma_annotation)\n\n[1] \"MapMan\"   \"InterPro\"\n\nhead(gma_annotation$MapMan)\n\n             Gene                    MapMan\n1 Glyma.01G000100 not assigned.not annotate\n2 Glyma.01G000137 not assigned.not annotate\n3 Glyma.01G000174    not assigned.annotated\n4 Glyma.01G000211 not assigned.not annotate\n5 Glyma.01G000248    not assigned.annotated\n6 Glyma.01G000285 not assigned.not annotate\n\nhead(gma_annotation$InterPro)\n\n             Gene\n1 Glyma.01G000174\n2 Glyma.01G000248\n3 Glyma.01G000248\n4 Glyma.01G000248\n5 Glyma.01G000400\n6 Glyma.01G000400\n                                                                     Interpro\n1           Photosynthesis system II assembly factor Ycf48/Hcf136-like domain\n2                Thiamine pyrophosphate enzyme, N-terminal TPP-binding domain\n3                                            Thiamin diphosphate-binding fold\n4 2-succinyl-5-enolpyruvyl-6-hydroxy-3-cyclohexene-1-carboxylic-acid synthase\n5                                                            FHY3/FAR1 family\n6                                                      Zinc finger, SWIM-type\n\n\nThen, you can perform the enrichment analyses with:\n\nsea_mapman &lt;- module_enrichment(\n    net = gcn, \n1    background_genes = rownames(final_exp1),\n2    annotation = gma_annotation$MapMan\n)\n\n\n1\n\nUsing only genes in the network as background set (very important!)\n\n2\n\nPerform enrichment for MapMan pathways\n\n\n\n\nThe output of module_enrichment() is a data frame with significant terms for each module (if any).\n\nhead(sea_mapman)\n\n                                                                                                                                                                                                                                     term\n98                                                                                            Enzyme classification.EC_1 oxidoreductases.EC_1.13 oxidoreductase acting on single donor with incorporation of molecular oxygen (oxygenase)\n249                                                                                                                                               Protein homeostasis.proteolysis.protease inhibitor activities.Kunitz protease inhibitor\n60                                                                                                                              Cell wall organisation.pectin.rhamnogalacturonan I.modification and degradation.beta-galactosidase (BGAL)\n234                                                                                                     Protein homeostasis.autophagy.phagophore expansion.ATG8-phosphatidylethanolamine conjugation system.ubiquitin-fold protein (ATG8)\n262 Protein homeostasis.ubiquitin-proteasome system.ubiquitin-fold protein conjugation.Cullin-based ubiquitylation complexes.SKP1-CUL1-FBX (SCF) E3 ubiquitin ligase complexes.F-BOX substrate adaptor activities.substrate adaptor (FBX)\n42                                                Cell wall organisation.cutin and suberin.cuticular lipid formation.alkane-forming pathway.CER1-CER3 alkane-forming complex.electron supply module.electron shuttle hemoprotein (Cyt-b5)\n    genes all         pval         padj category      module\n98      6   7 6.593109e-12 3.454789e-09   MapMan        cyan\n249     3   8 5.826158e-05 1.526453e-02   MapMan        cyan\n60      6   6 1.256261e-05 3.466687e-03   MapMan   darkgreen\n234     7   8 1.323163e-05 3.466687e-03   MapMan   darkgreen\n262     8  13 1.811093e-04 3.163376e-02   MapMan   darkgreen\n42      6   6 2.341247e-04 4.089377e-02   MapMan floralwhite\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nInspect the enrichment results in sea_mapman and answer the following questions:\n\n\nHow many modules had enriched terms?\nWhat proportion of the total number of modules does that represent?\n\n\nRerun the enrichment analysis, but now using the annotation data frame in gma_annotation$InterPro. Then, answer the questions below:\n\n\nHow many modules had enriched terms?\nWhat proportion of the total number of modules does that represent?\nWere the number of modules with enriched terms different when using MapMan annotation and InterPro annotation? If so, why do you think that happened?\n\n\n(Optional, advanced) Choose one of the interesting modules you found in the previous section (on module-trait correlations) and look at the enrichment results for it. Based on the expression profiles and enrichment results, can you come out with a reasonable biological explanation for the observed expression patterns?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nlength(unique(sea_mapman$module))\n\n[1] 7\n\nlength(unique(sea_mapman$module)) / length(unique(gcn$genes_and_modules$Modules))\n\n[1] 0.3333333\n\n# Q2\nsea_interpro &lt;- module_enrichment(\n    net = gcn, \n    background_genes = rownames(final_exp1),\n    annotation = gma_annotation$InterPro\n)\n\nlength(unique(sea_interpro$module))\n\n[1] 13\n\nlength(unique(sea_interpro$module)) / length(unique(gcn$genes_and_modules$Modules))\n\n[1] 0.6190476"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#identifying-hub-genes-and-visualizing-networks",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#identifying-hub-genes-and-visualizing-networks",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "1.8 Identifying hub genes and visualizing networks",
    "text": "1.8 Identifying hub genes and visualizing networks\nHubs are the genes with the highest degree (i.e., sum of connection weights) in each module, and they are often considered to be the most important genes in a network. To identify hubs in a GCN, you can use the function get_hubs_gcn().\n\nhubs &lt;- get_hubs_gcn(exp = final_exp1, net = gcn)\n\nhead(hubs)\n\n             Gene Module   kWithin\n1 Glyma.05G051300  brown  2.789611\n2 Glyma.14G142300  brown  2.545291\n3 Glyma.19G187400  brown  2.482610\n4 Glyma.07G006900   cyan 11.718883\n5 Glyma.15G026400   cyan 11.675715\n6 Glyma.13G347700   cyan 11.271738\n\n\nBesides exploring the major genes in each module, you can use the output of get_hubs_gcn() for network visualization. For that, you will first need to extract a subgraph containing the genes you want to visualize (usually an entire module), which can be achieved with the function get_edge_list().\n\nedges &lt;- get_edge_list(\n    net = gcn,\n1    module = \"royalblue\",\n2    filter = TRUE\n)\n\nhead(edges)\n\n\n1\n\nCreate a subgraph containing all genes in the royalblue module.\n\n2\n\nFilter the graph to keep only connections greater than or equal to a given correlation coefficient (automatically estimated based on optimal scale-free topology fit).\n\n\n\n\n               Var1            Var2      Freq\n175 Glyma.15G253700 Glyma.17G101700 0.8230963\n233 Glyma.15G253700 Glyma.17G105600 0.8326334\n295 Glyma.17G105600 Glyma.17G235300 0.8218305\n407 Glyma.15G253700 Glyma.18G255300 0.8645490\n411 Glyma.17G105600 Glyma.18G255300 0.8867203\n412 Glyma.17G235300 Glyma.18G255300 0.8584245\n\n\nNext, you can use the function plot_gcn() to visualize these genes.\n\nplot_gcn(\n    edgelist_gcn = edges,\n    net = gcn,\n1    color_by = \"module\",\n    hubs = hubs\n)\n\n\n1\n\nNodes will be colored by their module (hence, in this case, they will have a single color).\n\n\n\n\n\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nRecreate the edge list for the royalblue module, but now use method = 'min_cor' and rcutoff = 0.4. Then, plot the network. Does that change the network? If so, how?\nVisualize the network from the previous question in the interactive mode.\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nfedges &lt;- get_edge_list(\n    net = gcn,\n    module = \"royalblue\",\n    filter = TRUE,\n    method = \"min_cor\",\n    rcutoff = 0.4\n)\n\nplot_gcn(\n    edgelist_gcn = fedges,\n    net = gcn,\n    color_by = \"module\",\n    hubs = hubs\n)\n\n\n\n# Q2\n# Note: this part was commented so that this book can be exported to PDF\n\n# plot_gcn(\n#     edgelist_gcn = fedges,\n#     net = gcn,\n#     color_by = \"module\",\n#     hubs = hubs,\n#     interactive = TRUE\n# )"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#session-information",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#session-information",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "Session information",
    "text": "Session information\nThis chapter was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-09-10\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n BioNERO              * 1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n Cairo                  1.6-0     2022-07-05 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magick                 2.7.4     2023-03-09 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "chapters/01_inference_and_analysis_of_GCNs.html#references",
    "href": "chapters/01_inference_and_analysis_of_GCNs.html#references",
    "title": "1  Inference and analysis gene coexpression networks (GCNs)",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, Francisnei Pedrosa-Silva, and Thiago M Venancio. 2023. “The Soybean Expression Atlas V2: A Comprehensive Database of over 5000 RNA-Seq Samples.” bioRxiv, 2023–04.\n\n\nZhu, Longming, Qinghua Yang, Xiaomin Yu, Xujun Fu, Hangxia Jin, and Fengjie Yuan. 2022. “Transcriptomic and Metabolomic Analyses Reveal a Potential Mechanism to Improve Soybean Resistance to Anthracnose.” Frontiers in Plant Science 13: 850829."
  },
  {
    "objectID": "chapters/02_network_comparison.html#getting-to-know-the-example-data",
    "href": "chapters/02_network_comparison.html#getting-to-know-the-example-data",
    "title": "2  Dealing with multiple data sets: consensus modules and module preservation",
    "section": "2.1 Getting to know the example data",
    "text": "2.1 Getting to know the example data\nIn this chapter, we will use gene expression data from two BioProjects:\n\nPRJNA800609: soybean pods infected with the fungus Colletotrichum truncatum. Original data generated by Zhu et al. (2022).\nPRJNA574764: soybean roots infected with the oomycete Phytophthora sojae. Original data generated by Ronne et al. (2020).\n\nOur goal here is to explore similarities and differences in expression profiles between these two data sets.\nData are available as .rda files in the data/ directory of the GitHub repo associated with this course, and they were downloaded from The Soybean Expression Atlas v2 (Almeida-Silva, Pedrosa-Silva, and Venancio 2023) by searching by BioProject IDs. These .rda files contain SummarizedExperiment objects that store gene expression data and sample metadata.\nLet’s load the data and explore them briefly.\n\n# Load expression data\nload(here(\"data\", \"se_PRJNA800609.rda\"))\nload(here(\"data\", \"se_PRJNA574764.rda\"))\n\n# Rename object to a simpler name\nexp1 &lt;- se_PRJNA800609\nexp2 &lt;- se_PRJNA574764\n\nrm(se_PRJNA800609)\nrm(se_PRJNA574764)\n\n# Take a look at the object\nexp1\n\nclass: SummarizedExperiment \ndim: 31422 60 \nmetadata(0):\nassays(1): ''\nrownames(31422): Glyma.15G153300 Glyma.15G153400 ... Glyma.09G145600\n  Glyma.09G145700\nrowData names(0):\ncolnames(60): SAMN25263487 SAMN25263488 ... SAMN25263525 SAMN25263526\ncolData names(4): Part Cultivar Treatment Timepoint\n\nexp2\n\nclass: SummarizedExperiment \ndim: 32674 49 \nmetadata(0):\nassays(1): ''\nrownames(32674): Glyma.06G124400 Glyma.06G124500 ... Glyma.19G260900\n  Glyma.19G261200\nrowData names(0):\ncolnames(49): SAMN12868627 SAMN12868668 ... SAMN12868625 SAMN12868626\ncolData names(4): Part Cultivar Treatment Timepoint\n\ncolData(exp1)\n\nDataFrame with 60 rows and 4 columns\n                    Part     Cultivar   Treatment   Timepoint\n             &lt;character&gt;  &lt;character&gt; &lt;character&gt; &lt;character&gt;\nSAMN25263487         pod         ZC-2     control          8h\nSAMN25263488         pod         ZC-2     control          8h\nSAMN25263507         pod         ZC-2    infected         48h\nSAMN25263508         pod         ZC-2    infected         48h\nSAMN25263527         pod Zhechun NO.3    infected         12h\n...                  ...          ...         ...         ...\nSAMN25263522         pod Zhechun NO.3     control         12h\nSAMN25263523         pod Zhechun NO.3     control         12h\nSAMN25263524         pod Zhechun NO.3     control         12h\nSAMN25263525         pod Zhechun NO.3    infected         12h\nSAMN25263526         pod Zhechun NO.3    infected         12h\n\ncolData(exp2)\n\nDataFrame with 49 rows and 4 columns\n                    Part    Cultivar   Treatment   Timepoint\n             &lt;character&gt; &lt;character&gt; &lt;character&gt; &lt;character&gt;\nSAMN12868627        root       Misty    infected       4 dpi\nSAMN12868668        root   PI 449459    infected      14 dpi\nSAMN12868669        root   PI 449459    infected      14 dpi\nSAMN12868649        root   PI 449459     control       0 dpi\nSAMN12868628        root       Misty    infected       7 dpi\n...                  ...         ...         ...         ...\nSAMN12868647        root   PI 449459     control       0 dpi\nSAMN12868648        root   PI 449459     control       0 dpi\nSAMN12868624        root       Misty     control       0 dpi\nSAMN12868625        root       Misty    infected       4 dpi\nSAMN12868626        root       Misty    infected       4 dpi\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nExplore the sample metadata of exp1 and exp2 and answer the questions below:\n\n\nHow many different cultivars are there?\nWhat are the levels of the Treatment variable, and how many samples are there for each level?\nHow many samples are there for each timepoint?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Question 1: # of cultivars\nlength(unique(exp1$Cultivar))\n\n[1] 2\n\nlength(unique(exp2$Cultivar))\n\n[1] 2\n\n# Question 2: levels of the `Treatment` variable\ntable(exp1$Treatment)\n\n\n control infected \n      30       30 \n\ntable(exp2$Treatment)\n\n\n control infected \n       6       43 \n\n# Question 3: # of samples for each timepoint\ntable(exp1$Timepoint)\n\n\n12h 24h 48h  4h  8h \n 12  12  12  12  12 \n\ntable(exp2$Timepoint)\n\n\n 0 dpi 14 dpi 21 dpi  4 dpi  7 dpi \n     6     12      8     12     11"
  },
  {
    "objectID": "chapters/02_network_comparison.html#data-preprocessing",
    "href": "chapters/02_network_comparison.html#data-preprocessing",
    "title": "2  Dealing with multiple data sets: consensus modules and module preservation",
    "section": "2.2 Data preprocessing",
    "text": "2.2 Data preprocessing\nNow, we will preprocess the two data sets using the same parameters with exp_preprocess(). In details, we will:\n\nKeep only genes with median TPM &gt;=5.\nKeep only the top 10k genes with the highest variances.\n\n\n# Store each expression data in a list, each data set in a list element\n1exp_list &lt;- list(\n    colletrotrichum_infection = exp1,\n    phytophthora_infection = exp2\n)\n\n# Loop through the list and preprocess data\n2exp_list &lt;- lapply(\n    exp_list,\n3    exp_preprocess,\n4    min_exp = 5, variance_filter = TRUE, n = 1e4, Zk_filtering = FALSE\n)\n\n# Keep only genes that are shared between the two sets\nshared &lt;- intersect(\n    rownames(exp_list$colletrotrichum_infection),\n    rownames(exp_list$phytophthora_infection)\n)\n\nexp_list &lt;- lapply(exp_list, function(x) x[shared, ])\n\n\n1\n\nStore each expression data set in a list element.\n\n2\n\nLoop through each element of the list exp_list, and\n\n3\n\nexecute the function exp_preprocess,\n\n4\n\nusing these parameters.\n\n\n\n\nNow, we have a list of processed expression data. This list, with each element representing a different data set, is what we will use for all network comparison functions in the next sections.\n\n\n\n\n\n\nPractice\n\n\n\n\nHow many genes and samples are there in each processed data?\nIf we selected the top 10k genes with the highest variances, why do we not have 10k genes in each final set?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nsapply(exp_list, nrow)\n\ncolletrotrichum_infection    phytophthora_infection \n                     5530                      5530 \n\nsapply(exp_list, ncol)\n\ncolletrotrichum_infection    phytophthora_infection \n                       60                        49 \n\n#' Q2: the genes with the highest variances are not the same in both sets.\n#' Thus, when filtering the data to keep only shared genes, some genes are\n#' removed."
  },
  {
    "objectID": "chapters/02_network_comparison.html#identifying-and-analyzing-consensus-modules",
    "href": "chapters/02_network_comparison.html#identifying-and-analyzing-consensus-modules",
    "title": "2  Dealing with multiple data sets: consensus modules and module preservation",
    "section": "2.3 Identifying and analyzing consensus modules",
    "text": "2.3 Identifying and analyzing consensus modules\nConsensus modules are coexpression modules present in different, independent data sets, and they can used to find robust modules across data sets that study the same (or similar) conditions.\nTo identify them, BioNERO infers a GCN for each data set and looks for groups of genes that are densely connected in all data sets. Thus, the workflow here will be very similar to what we did in the previous lesson. We will:\n\nIdentify the optimal \\(\\beta\\) power to which correlations will be raised (see previous chapter for more details on why this is done), but for each individual data set - consensus_SFT_fit()\nInfer GCNs and identify consensus modules - consensus_modules().\n\nLet’s obtain the \\(\\beta\\) powers.\n\n# Identify the optimal beta power for each data set\nsfts &lt;- consensus_SFT_fit(\n    exp_list = exp_list,\n    setLabels = names(exp_list),\n    cor_method = \"pearson\"\n)\n\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      5    0.924 -0.968          0.935   170.0    110.00    692\n2      6    0.925 -1.050          0.936   127.0     75.40    589\n3      7    0.923 -1.120          0.936    97.4     52.70    509\n4      8    0.927 -1.160          0.944    76.5     37.10    445\n5      9    0.928 -1.200          0.946    61.2     27.00    392\n6     10    0.927 -1.230          0.947    49.7     19.80    349\n7     11    0.929 -1.260          0.950    40.9     14.80    312\n8     12    0.931 -1.290          0.954    34.0     11.10    281\n9     13    0.940 -1.300          0.963    28.6      8.52    254\n10    14    0.944 -1.320          0.968    24.2      6.55    231\n11    15    0.948 -1.330          0.970    20.7      5.18    210\n12    16    0.950 -1.340          0.973    17.8      4.03    192\n13    17    0.954 -1.350          0.977    15.4      3.18    177\n14    18    0.959 -1.350          0.982    13.4      2.51    163\n15    19    0.960 -1.370          0.984    11.7      2.03    151\n16    20    0.959 -1.380          0.985    10.3      1.64    140\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      5    0.866 -0.895          0.933  157.00    110.00    572\n2      6    0.875 -1.000          0.942  116.00     71.10    493\n3      7    0.874 -1.080          0.941   88.20     47.40    432\n4      8    0.874 -1.140          0.936   68.90     32.40    382\n5      9    0.844 -1.210          0.908   55.00     22.60    342\n6     10    0.834 -1.260          0.893   44.70     16.10    308\n7     11    0.828 -1.310          0.884   36.80     11.60    279\n8     12    0.821 -1.340          0.875   30.70      8.48    255\n9     13    0.785 -1.390          0.845   25.80      6.32    233\n10    14    0.777 -1.420          0.843   22.00      4.77    215\n11    15    0.791 -1.420          0.853   18.90      3.63    198\n12    16    0.803 -1.420          0.863   16.30      2.79    184\n13    17    0.813 -1.430          0.870   14.20      2.17    171\n14    18    0.825 -1.430          0.882   12.40      1.69    159\n15    19    0.800 -1.470          0.866   10.90      1.34    148\n16    20    0.807 -1.460          0.874    9.66      1.06    139\n\nsfts$power\n\ncolletrotrichum_infection    phytophthora_infection \n                        5                         5 \n\nsfts$plot\n\n\n\n\nNext, let’s find consensus modules.\n\n# Find consensus modules\nconsensus &lt;- consensus_modules(\n    exp_list, \n    power = sfts$power,\n    cor_method = \"pearson\"\n)\n\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n ..done.\n multiSetMEs: Calculating module MEs.\n   Working on set 1 ...\n   Working on set 2 ...\n\n# Taking a look at the consensus modules\nplot_dendro_and_colors(consensus)\n\n\n\n# Inspecting the output\nnames(consensus)\n\n[1] \"consMEs\"             \"exprSize\"            \"sampleInfo\"         \n[4] \"genes_cmodules\"      \"dendro_plot_objects\"\n\n\nAs you may have noticed, the output of consensus_modules() is very similar to the output of exp2gcn(). The output object is a list containing the following elements:\n\nconsMEs: list with consensus module eigengenes.\nexprSize: list with number of data sets, and number of genes and samples for each set.\nsampleInfo: list of data frames with sample metadata.\ngenes_cmodules: data frame with genes and their corresponding consensus modules.\ndendro_plot_objects: objects for plotting with plot_dendro_and_colors().\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the output of consensus_modules() and answer the following questions:\n\nHow many consensus modules were identified between the two data sets?\nWhat are the largest and the smallest consensus modules?\nWhat is the mean and median number of genes per consensus modules?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nlength(unique(consensus$genes_cmodules$Cons_modules))\n\n[1] 30\n\n# Q2\nsort(table(consensus$genes_cmodules$Cons_modules))\n\n\n         grey          blue         brown        yellow         green \n            8            34            38            54            57 \n          red         black          pink        purple   greenyellow \n           61            66            68            75            77 \n          tan        grey60     lightcyan    lightgreen   lightyellow \n           78            96            96            97            97 \n      darkred darkturquoise      darkgrey        orange    darkorange \n          104           118           119           124           139 \n        white       magenta   saddlebrown paleturquoise     royalblue \n          140           150           169           213           269 \n       violet  midnightblue     darkgreen   yellowgreen          cyan \n          280           303           473           942           985 \n\n# Q3\nmean(table(consensus$genes_cmodules$Cons_modules))\n\n[1] 184.3333\n\nmedian(table(consensus$genes_cmodules$Cons_modules))\n\n[1] 100.5\n\n\n\n\n\n\n\nNext, you’d want to find correlations between consensus modules and traits of interest. Here, we will look for associations between consensus modules and the Treatment variable. Biologically speaking, we’re looking for shared transcriptional responses during infection with Colletotrichum truncatum and Phytophthora sojae (i.e., core immunity-related coexpression modules).\n\n# Correlate consensus modules to traits\nconsensus_trait &lt;- consensus_trait_cor(\n    consensus,\n    metadata_cols = \"Treatment\"\n)\n\n# Taking a look at the output\nhead(consensus_trait)\n\n    trait              ME         cor     pvalue     group\n1 control         MEblack          NA         NA Treatment\n2 control       MEdarkred  0.26015095 0.07092879 Treatment\n3 control          MEblue -0.14934335 0.30747782 Treatment\n4 control MEdarkturquoise  0.18536193 0.20341269 Treatment\n5 control         MEbrown          NA         NA Treatment\n6 control         MEgreen  0.05251631 0.69147472 Treatment\n\n# Plot consensus module-trait correlations\nplot_module_trait_cor(consensus_trait)\n\n\n\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the output of consensus_trait_cor() and answer the questions below:\n\nWhich consensus module has the highest positive correlation to the infected status of the Treatment variable?\nWhich consensus module has the highest negative correlation to the infected status of the Treatment variable?\n(Advanced) Based on your biological knowledge, what gene functions would you expect to find in the modules you found in questions 1 and 2?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\ncor_infected &lt;- consensus_trait[consensus_trait$trait == \"infected\", ]\ncor_infected[which.max(cor_infected$cor), ]\n\n      trait    ME       cor      pvalue     group\n59 infected MEred 0.4029435 0.003765978 Treatment\n\n# Q2\ncor_infected[which.min(cor_infected$cor), ]\n\n      trait             ME        cor      pvalue     group\n49 infected MEmidnightblue -0.3966709 0.004420417 Treatment\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nUse the function module_enrichment() to perform a functional enrichment analysis for each consensus module. Then, try to interpret the results in light of the consensus module-trait associations you found previously.\nTip: to load the functional annotation data, use the following:\n\nload(here(\"data\", \"gma_annotation.rda\"))\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Load functional annotation data\nload(here(\"data\", \"gma_annotation.rda\"))\n\n# Define background\nbackground &lt;- rownames(exp_list$colletrotrichum_infection)\n    \n# Perform the enrichment analysis\nsim_net &lt;- consensus\nnames(sim_net)[4] &lt;- \"genes_and_modules\"\nnames(sim_net$genes_and_modules) &lt;- c(\"Genes\", \"Modules\")\n\nenrich_mapman &lt;- module_enrichment(sim_net, background, gma_annotation$MapMan)\nenrich_interpro &lt;- module_enrichment(sim_net, background, gma_annotation$InterPro)"
  },
  {
    "objectID": "chapters/02_network_comparison.html#calculating-module-preservation-statistics",
    "href": "chapters/02_network_comparison.html#calculating-module-preservation-statistics",
    "title": "2  Dealing with multiple data sets: consensus modules and module preservation",
    "section": "2.4 Calculating module preservation statistics",
    "text": "2.4 Calculating module preservation statistics\nWhen we infer consensus modules across data sets, we only consider shared modules, but we have no information on which modules are not shared between different data sets.\nIf you want to have a more detailed picture of which modules are preserved and which are not, you’d need to infer a separate network for each data set, and then calculate module preservation statistics between the networks.\nHere, we will demonstrate how to do that using the same data set from the previous section. Since, we already have the processed data, we will proceed to GCN inference using the functions SFT_fit() and exp2gcn(), as we saw in Chapter 1.\n\n# Get optimal beta power for each data set\npowers &lt;- lapply(exp_list, SFT_fit, cor_method = \"pearson\")\n\n   Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k.\n1      3    0.234 -0.774         0.0153  1130.0     997.0   1810\n2      4    0.372 -0.725         0.2440   805.0     699.0   1510\n3      5    0.530 -0.728         0.4860   602.0     509.0   1290\n4      6    0.654 -0.757         0.6480   466.0     382.0   1130\n5      7    0.767 -0.816         0.7850   372.0     295.0   1000\n6      8    0.840 -0.872         0.8600   303.0     233.0    898\n7      9    0.884 -0.923         0.9010   251.0     186.0    813\n8     10    0.901 -0.968         0.9190   211.0     151.0    742\n9     11    0.912 -1.010         0.9280   179.0     123.0    681\n10    12    0.920 -1.050         0.9380   154.0     101.0    628\n11    13    0.921 -1.080         0.9390   134.0      84.5    582\n12    14    0.914 -1.110         0.9310   117.0      70.4    541\n13    15    0.919 -1.140         0.9390   102.0      59.5    504\n14    16    0.921 -1.160         0.9410    90.5      50.5    471\n15    17    0.923 -1.180         0.9420    80.4      42.9    441\n16    18    0.925 -1.200         0.9460    71.7      36.3    415\n17    19    0.927 -1.220         0.9480    64.3      30.9    390\n18    20    0.931 -1.240         0.9520    57.8      26.7    368\n   Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k.\n1      3  0.66100  4.4900          0.947  1140.0    1140.0   1510\n2      4  0.44400  2.0600          0.883   803.0     797.0   1230\n3      5  0.16500  0.6540          0.685   594.0     580.0   1050\n4      6  0.00224 -0.0438          0.585   456.0     432.0    921\n5      7  0.28100 -0.4140          0.709   359.0     330.0    818\n6      8  0.64700 -0.6550          0.878   290.0     255.0    735\n7      9  0.78900 -0.7960          0.926   238.0     199.0    669\n8     10  0.82900 -0.8870          0.937   198.0     158.0    613\n9     11  0.84100 -0.9530          0.933   168.0     126.0    566\n10    12  0.85100 -1.0100          0.937   143.0     103.0    524\n11    13  0.86000 -1.0500          0.943   123.0      83.2    488\n12    14  0.86000 -1.0900          0.941   107.0      68.1    456\n13    15  0.86100 -1.1200          0.940    93.7      56.2    428\n14    16  0.85800 -1.1600          0.934    82.5      46.5    402\n15    17  0.86800 -1.1700          0.939    73.0      38.7    379\n16    18  0.85500 -1.2100          0.925    65.0      32.4    359\n17    19  0.83400 -1.2400          0.905    58.2      27.2    340\n18    20  0.83600 -1.2600          0.905    52.3      23.1    322\n\n# Infer GCN for each data set\ngcns &lt;- lapply(seq_along(powers), function(n) {\n    \n    gcn &lt;- exp2gcn(\n        exp_list[[n]], \n        SFTpower = powers[[n]]$power, \n        cor_method = \"pearson\"\n    )\n    \n    return(gcn)\n})\n\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n..connectivity..\n..matrix multiplication (system BLAS)..\n..normalization..\n..done.\n\n\n\n\n\n\n\n\nPractice\n\n\n\nHow many modules are there in each network?\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\nsapply(gcns, function(x) length(unique(x$genes_and_modules$Modules)))\n\n[1] 12 17\n\n\n\n\n\n\n\nNext, we can calculate module preservation statistics using the permutation-based approach implemented in NetRep.\n\n# Calculate module preservation statistics\npres_netrep &lt;- module_preservation(\n    exp_list, \n    ref_net = gcns[[1]], \n    test_net = gcns[[2]], \n    algorithm = \"netrep\"\n)\n\n[2023-08-24 09:56:26 CEST] Validating user input...\n[2023-08-24 09:56:26 CEST]   Checking matrices for problems...\n[2023-08-24 09:56:28 CEST] Input ok!\n[2023-08-24 09:56:28 CEST] Calculating preservation of network subsets from\n                           dataset \"colletrotrichum_infection\" in dataset\n                           \"phytophthora_infection\".\n[2023-08-24 09:56:28 CEST]   Pre-computing network properties in dataset\n                             \"colletrotrichum_infection\"...\n[2023-08-24 09:56:29 CEST]   Calculating observed test statistics...\n[2023-08-24 09:56:29 CEST]   Generating null distributions from 1000\n                             permutations using 1 thread...\n\n\n    0% completed.\n    1% completed.\n    2% completed.\n    2% completed.\n    3% completed.\n    4% completed.\n    5% completed.\n    5% completed.\n    6% completed.\n    7% completed.\n    8% completed.\n    9% completed.\n    9% completed.\n   10% completed.\n   11% completed.\n   12% completed.\n   13% completed.\n   13% completed.\n   14% completed.\n   15% completed.\n   16% completed.\n   16% completed.\n   17% completed.\n   18% completed.\n   19% completed.\n   20% completed.\n   20% completed.\n   21% completed.\n   22% completed.\n   23% completed.\n   24% completed.\n   24% completed.\n   25% completed.\n   26% completed.\n   27% completed.\n   28% completed.\n   28% completed.\n   29% completed.\n   30% completed.\n   31% completed.\n   31% completed.\n   32% completed.\n   33% completed.\n   34% completed.\n   35% completed.\n   35% completed.\n   36% completed.\n   37% completed.\n   38% completed.\n   39% completed.\n   39% completed.\n   40% completed.\n   41% completed.\n   42% completed.\n   42% completed.\n   43% completed.\n   44% completed.\n   45% completed.\n   46% completed.\n   46% completed.\n   47% completed.\n   48% completed.\n   49% completed.\n   50% completed.\n   50% completed.\n   51% completed.\n   52% completed.\n   53% completed.\n   54% completed.\n   54% completed.\n   55% completed.\n   56% completed.\n   57% completed.\n   57% completed.\n   58% completed.\n   59% completed.\n   60% completed.\n   61% completed.\n   61% completed.\n   62% completed.\n   63% completed.\n   64% completed.\n   64% completed.\n   65% completed.\n   66% completed.\n   67% completed.\n   68% completed.\n   68% completed.\n   69% completed.\n   70% completed.\n   71% completed.\n   72% completed.\n   72% completed.\n   73% completed.\n   74% completed.\n   75% completed.\n   75% completed.\n   76% completed.\n   77% completed.\n   78% completed.\n   79% completed.\n   79% completed.\n   80% completed.\n   81% completed.\n   82% completed.\n   83% completed.\n   83% completed.\n   84% completed.\n   85% completed.\n   86% completed.\n   87% completed.\n   87% completed.\n   88% completed.\n   89% completed.\n   90% completed.\n   90% completed.\n   91% completed.\n   92% completed.\n   93% completed.\n   94% completed.\n   94% completed.\n   95% completed.\n   96% completed.\n   97% completed.\n   98% completed.\n   98% completed.\n   99% completed.\n  100% completed.\n  100% completed.\n\n[2023-08-24 09:58:37 CEST]   Calculating P-values...\n[2023-08-24 09:58:38 CEST]   Collating results...\n[2023-08-24 09:58:39 CEST] Done!\n\n# Taking a look at the P-values for preservation statistics for each module\nhead(pres_netrep$p.values)\n\n           avg.weight   coherence     cor.cor  cor.degree cor.contrib\nblack     0.000999001 0.000999001 0.000999001 0.000999001 0.000999001\nblue      0.142857143 0.262737263 0.000999001 0.000999001 0.096903097\ncyan      0.994005994 0.999000999 0.000999001 0.000999001 0.000999001\ndarkgreen 0.976023976 1.000000000 0.000999001 0.001998002 0.994005994\ngreen     0.002997003 1.000000000 0.000999001 0.000999001 0.000999001\ngrey      0.986013986 1.000000000 0.001998002 0.176823177 0.138861139\n              avg.cor avg.contrib\nblack     0.000999001 0.000999001\nblue      0.000999001 0.188811189\ncyan      0.000999001 0.000999001\ndarkgreen 0.000999001 0.100899101\ngreen     0.000999001 0.000999001\ngrey      0.005994006 0.544455544\n\n\nNote that, to calculate module preservation statistics, you always need to choose a reference network and a test network. Thus, the function module_preservation() will return which modules of the reference network that are preserved in the test network.\nCareful readers will also notice that this is another major difference between identifying consensus modules and calculating module preservation statistics: one can identify consensus modules across any number of data sets, but module preservation statistics can only be calculated in a pairwise manner.\n\n\n\n\n\n\nPractice\n\n\n\n\nBy default, BioNERO considers modules to be preserved if all preservation statistics (\\(N=7\\)) are significant (\\(P&lt;0.05\\)). Suppose you want to be less stringent and consider modules as preserved if 5 or more statistics are significant. Would the number of preserved modules change? Verify that.\nUse the function module_enrichment() to find enriched functions in all modules of the reference network. Then, explore the enriched functions of preserved modules (if any).\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\n## Extract significant statistics for each module\nsig_stats &lt;- apply(pres_netrep$p.values, 1, function(x) x[x &lt; 0.05])\nsig_stats\n\n$black\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$blue\n    cor.cor  cor.degree     avg.cor \n0.000999001 0.000999001 0.000999001 \n\n$cyan\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$darkgreen\n    cor.cor  cor.degree     avg.cor \n0.000999001 0.001998002 0.000999001 \n\n$green\n avg.weight     cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.002997003 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$grey\n    cor.cor     avg.cor \n0.001998002 0.005994006 \n\n$grey60\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$lightcyan\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$red\n    cor.cor  cor.degree     avg.cor \n0.001998002 0.045954046 0.010989011 \n\n$royalblue\n    cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.048951049 \n\n$salmon\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$skyblue\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.042957043 0.000999001 0.000999001 \n\n## Keep only modules with 5+ significant stats\nsig_stats[lengths(sig_stats) &gt;= 5]\n\n$black\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$cyan\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$green\n avg.weight     cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.002997003 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$grey60\n avg.weight   coherence     cor.cor  cor.degree cor.contrib     avg.cor \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \navg.contrib \n0.000999001 \n\n$lightcyan\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$salmon\n    cor.cor  cor.degree cor.contrib     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.000999001 0.000999001 \n\n$skyblue\n avg.weight   coherence     cor.cor  cor.degree     avg.cor avg.contrib \n0.000999001 0.000999001 0.000999001 0.042957043 0.000999001 0.000999001 \n\n# Q2\nbackground &lt;- rownames(exp_list[[1]])\nenrich_preserved &lt;- module_enrichment(\n    gcns[[1]],\n    background_genes = background,\n    annotation = gma_annotation$MapMan\n)"
  },
  {
    "objectID": "chapters/02_network_comparison.html#session-information",
    "href": "chapters/02_network_comparison.html#session-information",
    "title": "2  Dealing with multiple data sets: consensus modules and module preservation",
    "section": "Session information",
    "text": "Session information\nThis chapter was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-08-24\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n BioNERO              * 1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n Cairo                  1.6-0     2022-07-05 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magick                 2.7.4     2023-03-09 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "chapters/02_network_comparison.html#references",
    "href": "chapters/02_network_comparison.html#references",
    "title": "2  Dealing with multiple data sets: consensus modules and module preservation",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, Francisnei Pedrosa-Silva, and Thiago M Venancio. 2023. “The Soybean Expression Atlas V2: A Comprehensive Database of over 5000 RNA-Seq Samples.” bioRxiv, 2023–04.\n\n\nRonne, Maxime de, Caroline Labbé, Amandine Lebreton, Humira Sonah, Rupesh Deshmukh, Martine Jean, François Belzile, Louise O’Donoughue, and Richard Bélanger. 2020. “Integrated QTL Mapping, Gene Expression and Nucleotide Variation Analyses to Investigate Complex Quantitative Traits: A Case Study with the Soybean–Phytophthora Sojae Interaction.” Plant Biotechnology Journal 18 (7): 1492.\n\n\nZhu, Longming, Qinghua Yang, Xiaomin Yu, Xujun Fu, Hangxia Jin, and Fengjie Yuan. 2022. “Transcriptomic and Metabolomic Analyses Reveal a Potential Mechanism to Improve Soybean Resistance to Anthracnose.” Frontiers in Plant Science 13: 850829."
  },
  {
    "objectID": "chapters/03_network-based_data_integration.html#getting-to-know-the-example-data",
    "href": "chapters/03_network-based_data_integration.html#getting-to-know-the-example-data",
    "title": "3  Network-based data integration for gene discovery",
    "section": "3.1 Getting to know the example data",
    "text": "3.1 Getting to know the example data\nIn this chapter, we will use data from Almeida-Silva and Venancio (2021), available in the data/ directory of the GitHub repo associated with this course. The data set comprises:\n\nGWAS-derived SNPs associated with soybean resistance to multiple phytopathogenic fungi.\nRNA-seq data of soybean response to multiple phytopathogenic fungi.\n\nOur goal here is to prioritize candidate genes associated with resistance to fungal diseases.\nThe expression data are available in a SummarizedExperiment object, which by now should be a familiar data class to you.\n\n# Load expression data\nload(here(\"data\", \"se_soyfungi.rda\"))\n\n# Take a look at the object\nse_soyfungi\n\nclass: SummarizedExperiment \ndim: 20272 127 \nmetadata(0):\nassays(1): ''\nrownames(20272): Glyma.01G000100 Glyma.01G000137 ... Glyma.U032705\n  Glyma.U039400\nrowData names(0):\ncolnames(127): SAMD00117549 SAMD00117550 ... SAMN13743072 SAMN13743073\ncolData names(4): Pathogen Treatment Tissue Pathogen_Treatment\n\ncolData(se_soyfungi)\n\nDataFrame with 127 rows and 4 columns\n                        Pathogen       Treatment      Tissue\n                     &lt;character&gt;     &lt;character&gt; &lt;character&gt;\nSAMD00117549         Ppachyrhizi control_res_24h      leaves\nSAMD00117550         Ppachyrhizi  stress_res_24h      leaves\nSAMD00117552         Ppachyrhizi  stress_res_24h      leaves\nSAMD00117551         Ppachyrhizi  stress_res_24h      leaves\nSAMD00117541         Ppachyrhizi control_sus_24h      leaves\n...                          ...             ...         ...\nSAMN13743069          Foxysporum          stress        root\nSAMN13743070          Foxysporum          stress        root\nSAMN13743071 Foxysporum_Fmosseae          stress        root\nSAMN13743072 Foxysporum_Fmosseae          stress        root\nSAMN13743073 Foxysporum_Fmosseae          stress        root\n                 Pathogen_Treatment\n                        &lt;character&gt;\nSAMD00117549 Ppachyrhizi_control_..\nSAMD00117550 Ppachyrhizi_stress_r..\nSAMD00117552 Ppachyrhizi_stress_r..\nSAMD00117551 Ppachyrhizi_stress_r..\nSAMD00117541 Ppachyrhizi_control_..\n...                             ...\nSAMN13743069      Foxysporum_stress\nSAMN13743070      Foxysporum_stress\nSAMN13743071 Foxysporum_Fmosseae_..\nSAMN13743072 Foxysporum_Fmosseae_..\nSAMN13743073 Foxysporum_Fmosseae_..\n\n\nWe will also need an object containing information on the genomic coordinates of all genes in the soybean genome. If you have some experience with genomic data analyses, you probably know that this kind of information is usually stored in GFF3/GTF files. In Bioconductor, the standard data class to store genomic coordinates is called GRanges. You can create GRanges objects manually or directly from GFF3/GTF files using the import() function from the rtracklayer package. Let’s demonstrate how this works by reading a GFF3 file with soybean gene ranges onto a GRanges object:\n\n# Load GFF3 file into the R session as a `GRanges` object\ngma_ranges &lt;- rtracklayer::import(\n    here(\"data\", \"gma_primary_transcripts.gff3.gz\")\n)\n\ngma_ranges\n\nGRanges object with 791305 ranges and 16 metadata columns:\n              seqnames      ranges strand |         source            type\n                 &lt;Rle&gt;   &lt;IRanges&gt;  &lt;Rle&gt; |       &lt;factor&gt;        &lt;factor&gt;\n       [1]       Chr01 27355-28320      - | JGI Wm82.a2.v1 gene           \n       [2]       Chr01 27355-28320      - | JGI Wm82.a2.v1 mRNA           \n       [3]       Chr01 27355-27824      - | JGI Wm82.a2.v1 exon           \n       [4]       Chr01 27355-27655      - | JGI Wm82.a2.v1 three_prime_UTR\n       [5]       Chr01 27656-27824      - | JGI Wm82.a2.v1 CDS            \n       ...         ...         ...    ... .            ...             ...\n  [791301] scaffold_99 27528-27561      - | JGI Wm82.a2.v1            CDS \n  [791302] scaffold_99 27574-28051      - | JGI Wm82.a2.v1            exon\n  [791303] scaffold_99 27574-28051      - | JGI Wm82.a2.v1            CDS \n  [791304] scaffold_99 29024-29105      - | JGI Wm82.a2.v1            exon\n  [791305] scaffold_99 29024-29105      - | JGI Wm82.a2.v1            CDS \n               score     phase                     ID       pacid\n           &lt;numeric&gt; &lt;integer&gt;            &lt;character&gt; &lt;character&gt;\n       [1]        NA      &lt;NA&gt;        Glyma.01G000100    30544134\n       [2]        NA      &lt;NA&gt;      Glyma.01G000100.1        &lt;NA&gt;\n       [3]        NA      &lt;NA&gt; Glyma.01G000100.1:ex..        &lt;NA&gt;\n       [4]        NA      &lt;NA&gt; Glyma.01G000100.1:th..        &lt;NA&gt;\n       [5]        NA         1  Glyma.01G000100.1:CDS        &lt;NA&gt;\n       ...       ...       ...                    ...         ...\n  [791301]        NA         1    Glyma.U045500.1:CDS        &lt;NA&gt;\n  [791302]        NA      &lt;NA&gt; Glyma.U045500.1:exon:5        &lt;NA&gt;\n  [791303]        NA         2    Glyma.U045500.1:CDS        &lt;NA&gt;\n  [791304]        NA      &lt;NA&gt; Glyma.U045500.1:exon:6        &lt;NA&gt;\n  [791305]        NA         0    Glyma.U045500.1:CDS        &lt;NA&gt;\n                           pid                     id         alias\n                   &lt;character&gt;            &lt;character&gt;   &lt;character&gt;\n       [1] Glyma.01G000100.1.p Glyma.01G000100.Wm82.. Glyma01g00210\n       [2]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n       [3]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n       [4]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n       [5]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n       ...                 ...                    ...           ...\n  [791301]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n  [791302]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n  [791303]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n  [791304]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n  [791305]                &lt;NA&gt;                   &lt;NA&gt;          &lt;NA&gt;\n                              tid        old_id            Name         gene_id\n                      &lt;character&gt;   &lt;character&gt;     &lt;character&gt;     &lt;character&gt;\n       [1] Glyma.01G000100.1.Wm.. Glyma01g00210 Glyma.01G000100 Glyma.01G000100\n       [2]                   &lt;NA&gt;          &lt;NA&gt; Glyma.01G000100 Glyma.01G000100\n       [3]                   &lt;NA&gt;          &lt;NA&gt; Glyma.01G000100 Glyma.01G000100\n       [4]                   &lt;NA&gt;          &lt;NA&gt; Glyma.01G000100 Glyma.01G000100\n       [5]                   &lt;NA&gt;          &lt;NA&gt; Glyma.01G000100 Glyma.01G000100\n       ...                    ...           ...             ...             ...\n  [791301]                   &lt;NA&gt;          &lt;NA&gt;   Glyma.U045500   Glyma.U045500\n  [791302]                   &lt;NA&gt;          &lt;NA&gt;   Glyma.U045500   Glyma.U045500\n  [791303]                   &lt;NA&gt;          &lt;NA&gt;   Glyma.U045500   Glyma.U045500\n  [791304]                   &lt;NA&gt;          &lt;NA&gt;   Glyma.U045500   Glyma.U045500\n  [791305]                   &lt;NA&gt;          &lt;NA&gt;   Glyma.U045500   Glyma.U045500\n                      Parent     old_tid       UniProtKB\n             &lt;CharacterList&gt; &lt;character&gt; &lt;CharacterList&gt;\n       [1]                          &lt;NA&gt;                \n       [2]   Glyma.01G000100        &lt;NA&gt;                \n       [3] Glyma.01G000100.1        &lt;NA&gt;                \n       [4] Glyma.01G000100.1        &lt;NA&gt;                \n       [5] Glyma.01G000100.1        &lt;NA&gt;                \n       ...               ...         ...             ...\n  [791301]   Glyma.U045500.1        &lt;NA&gt;                \n  [791302]   Glyma.U045500.1        &lt;NA&gt;                \n  [791303]   Glyma.U045500.1        &lt;NA&gt;                \n  [791304]   Glyma.U045500.1        &lt;NA&gt;                \n  [791305]   Glyma.U045500.1        &lt;NA&gt;                \n  -------\n  seqinfo: 147 sequences from an unspecified genome; no seqlengths\n\n\nThe first three columns of a GRanges object are mandatory, and they indicate the chromosome name, the ranges (i.e., start and end positions of a particular genomic element), and the strand where the element is. All other columns are called annotations, and they are optional. To demonstrate how to interpret GRanges object, let’s take a closer look at the first element.\n\n# Subset the first element of the `GRanges` object\ngma_ranges[1]\n\nGRanges object with 1 range and 16 metadata columns:\n      seqnames      ranges strand |         source     type     score     phase\n         &lt;Rle&gt;   &lt;IRanges&gt;  &lt;Rle&gt; |       &lt;factor&gt; &lt;factor&gt; &lt;numeric&gt; &lt;integer&gt;\n  [1]    Chr01 27355-28320      - | JGI Wm82.a2.v1     gene        NA      &lt;NA&gt;\n                   ID       pacid                 pid                     id\n          &lt;character&gt; &lt;character&gt;         &lt;character&gt;            &lt;character&gt;\n  [1] Glyma.01G000100    30544134 Glyma.01G000100.1.p Glyma.01G000100.Wm82..\n              alias                    tid        old_id            Name\n        &lt;character&gt;            &lt;character&gt;   &lt;character&gt;     &lt;character&gt;\n  [1] Glyma01g00210 Glyma.01G000100.1.Wm.. Glyma01g00210 Glyma.01G000100\n              gene_id          Parent     old_tid       UniProtKB\n          &lt;character&gt; &lt;CharacterList&gt; &lt;character&gt; &lt;CharacterList&gt;\n  [1] Glyma.01G000100                        &lt;NA&gt;                \n  -------\n  seqinfo: 147 sequences from an unspecified genome; no seqlengths\n\n\nBy looking at the first element, we can see that it represents a gene located in chromosome Chr01, from position 27355 to position 28320, and with ID gma_ranges$gene_id[1].\nImportantly, to extract data for the first 3 variables, you will use the special functions seqnames(), ranges() (or start() and end()), and strand(). However, extracting information on the range annotations can be done with the $ operator, as you would do for a data frame. You can also use the function mcols() to extract only range annotations.\n\n# Extract seqnames (chromosome names)\nhead(seqnames(gma_ranges))\n\nfactor-Rle of length 6 with 1 run\n  Lengths:     6\n  Values : Chr01\nLevels(147): Chr01 Chr02 Chr03 Chr04 ... scaffold_93 scaffold_97 scaffold_99\n\n# Extract start and end positions\n## Option 1: ranges()\nhead(ranges(gma_ranges))\n\nIRanges object with 6 ranges and 0 metadata columns:\n          start       end     width\n      &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;\n  [1]     27355     28320       966\n  [2]     27355     28320       966\n  [3]     27355     27824       470\n  [4]     27355     27655       301\n  [5]     27656     27824       169\n  [6]     27926     27991        66\n\n## Option 2: start() and end()\nhead(start(gma_ranges))\n\n[1] 27355 27355 27355 27355 27656 27926\n\nhead(end(gma_ranges))\n\n[1] 28320 28320 27824 27655 27824 27991\n\n# Extract all range annotations\nhead(mcols(gma_ranges))\n\nDataFrame with 6 rows and 16 columns\n          source            type     score     phase                     ID\n        &lt;factor&gt;        &lt;factor&gt; &lt;numeric&gt; &lt;integer&gt;            &lt;character&gt;\n1 JGI Wm82.a2.v1 gene                   NA        NA        Glyma.01G000100\n2 JGI Wm82.a2.v1 mRNA                   NA        NA      Glyma.01G000100.1\n3 JGI Wm82.a2.v1 exon                   NA        NA Glyma.01G000100.1:ex..\n4 JGI Wm82.a2.v1 three_prime_UTR        NA        NA Glyma.01G000100.1:th..\n5 JGI Wm82.a2.v1 CDS                    NA         1  Glyma.01G000100.1:CDS\n6 JGI Wm82.a2.v1 exon                   NA        NA Glyma.01G000100.1:ex..\n        pacid                 pid                     id         alias\n  &lt;character&gt;         &lt;character&gt;            &lt;character&gt;   &lt;character&gt;\n1    30544134 Glyma.01G000100.1.p Glyma.01G000100.Wm82.. Glyma01g00210\n2          NA                  NA                     NA            NA\n3          NA                  NA                     NA            NA\n4          NA                  NA                     NA            NA\n5          NA                  NA                     NA            NA\n6          NA                  NA                     NA            NA\n                     tid        old_id            Name         gene_id\n             &lt;character&gt;   &lt;character&gt;     &lt;character&gt;     &lt;character&gt;\n1 Glyma.01G000100.1.Wm.. Glyma01g00210 Glyma.01G000100 Glyma.01G000100\n2                     NA            NA Glyma.01G000100 Glyma.01G000100\n3                     NA            NA Glyma.01G000100 Glyma.01G000100\n4                     NA            NA Glyma.01G000100 Glyma.01G000100\n5                     NA            NA Glyma.01G000100 Glyma.01G000100\n6                     NA            NA Glyma.01G000100 Glyma.01G000100\n             Parent     old_tid       UniProtKB\n    &lt;CharacterList&gt; &lt;character&gt; &lt;CharacterList&gt;\n1                            NA                \n2   Glyma.01G000100          NA                \n3 Glyma.01G000100.1          NA                \n4 Glyma.01G000100.1          NA                \n5 Glyma.01G000100.1          NA                \n6 Glyma.01G000100.1          NA                \n\n# Extract a specific column\nhead(gma_ranges$type)\n\n[1] gene            mRNA            exon            three_prime_UTR\n[5] CDS             exon           \nLevels: gene mRNA exon three_prime_UTR CDS five_prime_UTR\n\n\nFinally, you can subset GRanges object using the same syntax to subset vectors. For example, to extract only ranges for genes, you’d do:\n\n# Extract only gene ranges\ngene_ranges &lt;- gma_ranges[gma_ranges$type == \"gene\"]\ngene_ranges\n\nGRanges object with 56044 ranges and 16 metadata columns:\n             seqnames      ranges strand |         source     type     score\n                &lt;Rle&gt;   &lt;IRanges&gt;  &lt;Rle&gt; |       &lt;factor&gt; &lt;factor&gt; &lt;numeric&gt;\n      [1]       Chr01 27355-28320      - | JGI Wm82.a2.v1     gene        NA\n      [2]       Chr01 58975-67527      - | JGI Wm82.a2.v1     gene        NA\n      [3]       Chr01 67770-69968      + | JGI Wm82.a2.v1     gene        NA\n      [4]       Chr01 90289-91197      + | JGI Wm82.a2.v1     gene        NA\n      [5]       Chr01 90152-95947      - | JGI Wm82.a2.v1     gene        NA\n      ...         ...         ...    ... .            ...      ...       ...\n  [56040] scaffold_97 38235-38465      - | JGI Wm82.a2.v1     gene        NA\n  [56041] scaffold_97 58787-59891      + | JGI Wm82.a2.v1     gene        NA\n  [56042] scaffold_99 13436-13814      + | JGI Wm82.a2.v1     gene        NA\n  [56043] scaffold_99 22294-25413      - | JGI Wm82.a2.v1     gene        NA\n  [56044] scaffold_99 25903-29105      - | JGI Wm82.a2.v1     gene        NA\n              phase              ID       pacid                 pid\n          &lt;integer&gt;     &lt;character&gt; &lt;character&gt;         &lt;character&gt;\n      [1]      &lt;NA&gt; Glyma.01G000100    30544134 Glyma.01G000100.1.p\n      [2]      &lt;NA&gt; Glyma.01G000200    30543475 Glyma.01G000200.1.p\n      [3]      &lt;NA&gt; Glyma.01G000300    30545121 Glyma.01G000300.1.p\n      [4]      &lt;NA&gt; Glyma.01G000500    30543768 Glyma.01G000500.1.p\n      [5]      &lt;NA&gt; Glyma.01G000400    30542514 Glyma.01G000400.1.p\n      ...       ...             ...         ...                 ...\n  [56040]      &lt;NA&gt;   Glyma.U045100    30487127   Glyma.U045100.1.p\n  [56041]      &lt;NA&gt;   Glyma.U045200    30487126   Glyma.U045200.1.p\n  [56042]      &lt;NA&gt;   Glyma.U045300    30523589   Glyma.U045300.1.p\n  [56043]      &lt;NA&gt;   Glyma.U045400    30523588   Glyma.U045400.1.p\n  [56044]      &lt;NA&gt;   Glyma.U045500    30523590   Glyma.U045500.1.p\n                              id           alias                    tid\n                     &lt;character&gt;     &lt;character&gt;            &lt;character&gt;\n      [1] Glyma.01G000100.Wm82..   Glyma01g00210 Glyma.01G000100.1.Wm..\n      [2] Glyma.01G000200.Wm82..            &lt;NA&gt; Glyma.01G000200.1.Wm..\n      [3] Glyma.01G000300.Wm82..            &lt;NA&gt; Glyma.01G000300.1.Wm..\n      [4] Glyma.01G000500.Wm82..            &lt;NA&gt; Glyma.01G000500.1.Wm..\n      [5] Glyma.01G000400.Wm82..   Glyma01g00300 Glyma.01G000400.1.Wm..\n      ...                    ...             ...                    ...\n  [56040] Glyma.U045100.Wm82.a..            &lt;NA&gt; Glyma.U045100.1.Wm82..\n  [56041] Glyma.U045200.Wm82.a.. Glyma0101s00210 Glyma.U045200.1.Wm82..\n  [56042] Glyma.U045300.Wm82.a..            &lt;NA&gt; Glyma.U045300.1.Wm82..\n  [56043] Glyma.U045400.Wm82.a..            &lt;NA&gt; Glyma.U045400.1.Wm82..\n  [56044] Glyma.U045500.Wm82.a..            &lt;NA&gt; Glyma.U045500.1.Wm82..\n                   old_id            Name         gene_id          Parent\n              &lt;character&gt;     &lt;character&gt;     &lt;character&gt; &lt;CharacterList&gt;\n      [1]   Glyma01g00210 Glyma.01G000100 Glyma.01G000100                \n      [2]            &lt;NA&gt; Glyma.01G000200 Glyma.01G000200                \n      [3]            &lt;NA&gt; Glyma.01G000300 Glyma.01G000300                \n      [4]            &lt;NA&gt; Glyma.01G000500 Glyma.01G000500                \n      [5]   Glyma01g00300 Glyma.01G000400 Glyma.01G000400                \n      ...             ...             ...             ...             ...\n  [56040]            &lt;NA&gt;   Glyma.U045100   Glyma.U045100                \n  [56041] Glyma0101s00210   Glyma.U045200   Glyma.U045200                \n  [56042]            &lt;NA&gt;   Glyma.U045300   Glyma.U045300                \n  [56043]            &lt;NA&gt;   Glyma.U045400   Glyma.U045400                \n  [56044]            &lt;NA&gt;   Glyma.U045500   Glyma.U045500                \n                    old_tid       UniProtKB\n                &lt;character&gt; &lt;CharacterList&gt;\n      [1]              &lt;NA&gt;                \n      [2]              &lt;NA&gt;                \n      [3]              &lt;NA&gt;                \n      [4]              &lt;NA&gt;                \n      [5]   Glyma01g00300.1                \n      ...               ...             ...\n  [56040]              &lt;NA&gt;                \n  [56041] Glyma0101s00210.2                \n  [56042]              &lt;NA&gt;                \n  [56043]              &lt;NA&gt;                \n  [56044]              &lt;NA&gt;                \n  -------\n  seqinfo: 147 sequences from an unspecified genome; no seqlengths\n\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the GRanges object created from the GFF3 file to answer the following questions:\n\nHow many ranges represent genes and CDS, respectively?\nHow many chromosomes are there?\nWhich chromosome has the greatest number of genes?\nWhat is the mean number of genes per chromosome?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\ntable(gma_ranges$type)\n\n\n           gene            mRNA            exon three_prime_UTR             CDS \n          56044           56044          297976           47192          282673 \n five_prime_UTR \n          51376 \n\n# Q2\ntable(seqnames(gma_ranges))\n\n\n        Chr01         Chr02         Chr03         Chr04         Chr05 \n        33819         43741         37220         37473         35487 \n        Chr06         Chr07         Chr08         Chr09         Chr10 \n        46297         39226         53789         40095         42785 \n        Chr11         Chr12         Chr13         Chr14         Chr15 \n        37556         33944         54585         31155         38793 \n        Chr16         Chr17         Chr18         Chr19         Chr20 \n        29694         37989         39914         36761         35482 \nscaffold_1038  scaffold_105 scaffold_1057 scaffold_1065 scaffold_1078 \n            7            68            10             6             4 \n scaffold_110  scaffold_111 scaffold_1118  scaffold_112 scaffold_1160 \n           13            24            24             6             4 \nscaffold_1179  scaffold_118  scaffold_119 scaffold_1196 scaffold_1219 \n            8            28            12             4            12 \n scaffold_123 scaffold_1233 scaffold_1241 scaffold_1271  scaffold_128 \n           86            10            16             4            34 \nscaffold_1317 scaffold_1321 scaffold_1327  scaffold_137 scaffold_1379 \n           14             4            10            32             4 \n scaffold_138  scaffold_139 scaffold_1394 scaffold_1402  scaffold_151 \n           16            26             6            25             4 \n scaffold_152 scaffold_1560  scaffold_157  scaffold_164  scaffold_165 \n            8             6             8            46            11 \n scaffold_168 scaffold_1718 scaffold_1729 scaffold_1742 scaffold_1745 \n           16             9             9            15             4 \nscaffold_1777 scaffold_1793  scaffold_186  scaffold_191  scaffold_195 \n            6            18            10            64            38 \nscaffold_1967  scaffold_197 scaffold_1990  scaffold_205  scaffold_208 \n           10            38            10             8            10 \nscaffold_2080   scaffold_21  scaffold_211  scaffold_212 scaffold_2140 \n           12          1768            10            17             8 \n scaffold_216  scaffold_217   scaffold_22  scaffold_223  scaffold_229 \n           30            24           233            12            16 \n  scaffold_23   scaffold_24   scaffold_25  scaffold_254  scaffold_263 \n          189            16            49            10            10 \n scaffold_265   scaffold_27  scaffold_271   scaffold_28  scaffold_296 \n           18           158            22           431             4 \n  scaffold_30   scaffold_31  scaffold_311   scaffold_32  scaffold_330 \n           16           138             8           368            20 \n scaffold_344  scaffold_345  scaffold_349  scaffold_353   scaffold_36 \n           39            10            32             8            16 \n scaffold_361  scaffold_376  scaffold_383   scaffold_40  scaffold_409 \n           14            20             8            32             8 \n  scaffold_41  scaffold_412  scaffold_426   scaffold_44  scaffold_442 \n            8            12             7           203            17 \n scaffold_471  scaffold_484  scaffold_488  scaffold_521  scaffold_522 \n           26            10            14             4             4 \n scaffold_530  scaffold_581  scaffold_587  scaffold_608  scaffold_614 \n            6            18            23            22            14 \n scaffold_623  scaffold_633  scaffold_636   scaffold_65  scaffold_660 \n            4             8            14            21            16 \n scaffold_675  scaffold_681  scaffold_691  scaffold_711  scaffold_713 \n           12            10            17            22             6 \n  scaffold_72   scaffold_73   scaffold_74  scaffold_744   scaffold_75 \n            8            18            22             8            12 \n  scaffold_76   scaffold_78  scaffold_821  scaffold_843  scaffold_846 \n           19            38            16            10             7 \n scaffold_852   scaffold_88  scaffold_896   scaffold_91   scaffold_93 \n            6             8             8            24            73 \n  scaffold_97   scaffold_99 \n           32            34 \n\n# Q3\nsort(table(seqnames(gma_ranges)), decreasing = TRUE)\n\n\n        Chr13         Chr08         Chr06         Chr02         Chr10 \n        54585         53789         46297         43741         42785 \n        Chr09         Chr18         Chr07         Chr15         Chr17 \n        40095         39914         39226         38793         37989 \n        Chr11         Chr04         Chr03         Chr19         Chr05 \n        37556         37473         37220         36761         35487 \n        Chr20         Chr12         Chr01         Chr14         Chr16 \n        35482         33944         33819         31155         29694 \n  scaffold_21   scaffold_28   scaffold_32   scaffold_22   scaffold_44 \n         1768           431           368           233           203 \n  scaffold_23   scaffold_27   scaffold_31  scaffold_123   scaffold_93 \n          189           158           138            86            73 \n scaffold_105  scaffold_191   scaffold_25  scaffold_164  scaffold_344 \n           68            64            49            46            39 \n scaffold_195  scaffold_197   scaffold_78  scaffold_128   scaffold_99 \n           38            38            38            34            34 \n scaffold_137  scaffold_349   scaffold_40   scaffold_97  scaffold_216 \n           32            32            32            32            30 \n scaffold_118  scaffold_139  scaffold_471 scaffold_1402  scaffold_111 \n           28            26            26            25            24 \nscaffold_1118  scaffold_217   scaffold_91  scaffold_587  scaffold_271 \n           24            24            24            23            22 \n scaffold_608  scaffold_711   scaffold_74   scaffold_65  scaffold_330 \n           22            22            22            21            20 \n scaffold_376   scaffold_76 scaffold_1793  scaffold_265  scaffold_581 \n           20            19            18            18            18 \n  scaffold_73  scaffold_212  scaffold_442  scaffold_691 scaffold_1241 \n           18            17            17            17            16 \n scaffold_138  scaffold_168  scaffold_229   scaffold_24   scaffold_30 \n           16            16            16            16            16 \n  scaffold_36  scaffold_660  scaffold_821 scaffold_1742 scaffold_1317 \n           16            16            16            15            14 \n scaffold_361  scaffold_488  scaffold_614  scaffold_636  scaffold_110 \n           14            14            14            14            13 \n scaffold_119 scaffold_1219 scaffold_2080  scaffold_223  scaffold_412 \n           12            12            12            12            12 \n scaffold_675   scaffold_75  scaffold_165 scaffold_1057 scaffold_1233 \n           12            12            11            10            10 \nscaffold_1327  scaffold_186 scaffold_1967 scaffold_1990  scaffold_208 \n           10            10            10            10            10 \n scaffold_211  scaffold_254  scaffold_263  scaffold_345  scaffold_484 \n           10            10            10            10            10 \n scaffold_681  scaffold_843 scaffold_1718 scaffold_1729 scaffold_1179 \n           10            10             9             9             8 \n scaffold_152  scaffold_157  scaffold_205 scaffold_2140  scaffold_311 \n            8             8             8             8             8 \n scaffold_353  scaffold_383  scaffold_409   scaffold_41  scaffold_633 \n            8             8             8             8             8 \n  scaffold_72  scaffold_744   scaffold_88  scaffold_896 scaffold_1038 \n            8             8             8             8             7 \n scaffold_426  scaffold_846 scaffold_1065  scaffold_112 scaffold_1394 \n            7             7             6             6             6 \nscaffold_1560 scaffold_1777  scaffold_530  scaffold_713  scaffold_852 \n            6             6             6             6             6 \nscaffold_1078 scaffold_1160 scaffold_1196 scaffold_1271 scaffold_1321 \n            4             4             4             4             4 \nscaffold_1379  scaffold_151 scaffold_1745  scaffold_296  scaffold_521 \n            4             4             4             4             4 \n scaffold_522  scaffold_623 \n            4             4 \n\n# Q4\nmean(table(seqnames(gma_ranges)))\n\n[1] 5383.027\n\n\n\n\n\n\n\nFinally, let’s load our trait-related SNPs. Since we have SNPs associated with resistance to multiple pathogens, the SNP positions are stored in a GRangesList object, which is simply a list of independent GRanges objects.\n\n# Load object with genomic coordinates of trait-related SNPs\nload(here(\"data\", \"snps_soyfungi.rda\"))\n\n# Inspecting the object\nsnps_soyfungi\n\nGRangesList object of length 5:\n$Cgregata\nGRanges object with 9 ranges and 4 metadata columns:\n      seqnames    ranges strand |    Organism       Trait         SNP\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt; &lt;character&gt; &lt;character&gt;\n  [1]    Chr02   4260493      * |    Cgregata         BSR ss715582351\n  [2]    Chr04  10664085      * |    Cgregata         BSR ss715587043\n  [3]    Chr16  32796708      * |    Cgregata         BSR ss715624549\n  [4]    Chr16  32838190      * |    Cgregata         BSR ss715624557\n  [5]    Chr16  32840492      * |    Cgregata         BSR ss715624558\n  [6]    Chr16  33018083      * |    Cgregata         BSR ss715624573\n  [7]    Chr16  33018083      * |    Cgregata         BSR ss715624573\n  [8]    Chr16  33119116      * |    Cgregata         BSR ss715624583\n  [9]    Chr17  37284864      * |    Cgregata         BSR ss715627222\n                         DOI\n                 &lt;character&gt;\n  [1] 10.3835/plantgenome2..\n  [2] 10.1094/PHYTO-01-16-..\n  [3] 10.3835/plantgenome2..\n  [4] 10.3835/plantgenome2..\n  [5] 10.3835/plantgenome2..\n  [6] 10.3835/plantgenome2..\n  [7] 10.1094/PHYTO-01-16-..\n  [8] 10.3835/plantgenome2..\n  [9] 10.3835/plantgenome2..\n  -------\n  seqinfo: 20 sequences from an unspecified genome; no seqlengths\n\n...\n&lt;4 more elements&gt;\n\nnames(snps_soyfungi)\n\n[1] \"Cgregata\"      \"Fgraminearum\"  \"Fvirguliforme\" \"Mphaseolina\"  \n[5] \"Ppachyrhizi\"  \n\n\nEach element of this GRangesList contains the genomic coordinates of SNPs in the soybean genome that are associated with resistance to a particular pathogenic fungus, namely Cadophora gregata, Fusarium graminearum, Fusarium virguliforme, Macrophomina phaseolina, and Phakopsora pachyrhizi.\n\n\n\n\n\n\nPractice\n\n\n\n\nExplore the GRangesList object with trait-related SNPs and answer the questions below:\n\n\nHow many resistance-related SNPs are there against each pathogen?\nHow many soybean chromosomes have SNPs associated with resistance to Cadophora gregata?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nlengths(snps_soyfungi)\n\n     Cgregata  Fgraminearum Fvirguliforme   Mphaseolina   Ppachyrhizi \n            9            12            68            16             2 \n\n# Q2\nlength(unique(seqnames(snps_soyfungi$Cgregata)))\n\n[1] 4"
  },
  {
    "objectID": "chapters/03_network-based_data_integration.html#exploratory-data-analyses",
    "href": "chapters/03_network-based_data_integration.html#exploratory-data-analyses",
    "title": "3  Network-based data integration for gene discovery",
    "section": "3.2 Exploratory data analyses",
    "text": "3.2 Exploratory data analyses\nBefore proceeding to the candidate gene mining, it is important to explore where in the genome our trait-related SNPs are. You can do that with two functions from cageminer:\n\nplot_snp_distribution(): create a barplot with the number of SNPs in each chromosome.\nplot_snp_circos: create a Circos plot with the position of each SNP across chromosomes.\n\nThe functions described above work both with GRanges and GRangesList objects. For example:\n\n# Barplot of SNP counts per chromosome\n## A single set of SNPs\nplot_snp_distribution(snps_soyfungi$Cgregata)\n\n\n\n## Multiple sets of SNPs\nplot_snp_distribution(snps_soyfungi)\n\n\n\n\nFor plot_snp_circos(), however, you will also need to input a GRanges object with chromosome lengths, so that the function knows where each chromosome starts and ends. This information is already present in a pre-built object named gma_chrlen.\n\n# Load object containing chromosome lengths\nload(here(\"data\", \"gma_chrlen.rda\"))\n\ngma_chrlen\n\nGRanges object with 20 ranges and 0 metadata columns:\n       seqnames     ranges strand\n          &lt;Rle&gt;  &lt;IRanges&gt;  &lt;Rle&gt;\n   [1]    Chr01 1-56831624      *\n   [2]    Chr02 1-48577505      *\n   [3]    Chr03 1-45779781      *\n   [4]    Chr04 1-52389146      *\n   [5]    Chr05 1-42234498      *\n   ...      ...        ...    ...\n  [16]    Chr16 1-37887014      *\n  [17]    Chr17 1-41641366      *\n  [18]    Chr18 1-58018742      *\n  [19]    Chr19 1-50746916      *\n  [20]    Chr20 1-47904181      *\n  -------\n  seqinfo: 20 sequences from an unspecified genome; no seqlengths\n\n# Keep only ranges for genes in chromosomes (i.e., discard scaffolds)\nchromosome_names &lt;- seqlevels(gene_ranges)[1:20]\ngene_ranges &lt;- keepSeqlevels(gene_ranges, chromosome_names, pruning.mode = \"tidy\")\n\n# Circos plot with SNP positions across chromosomes\n## A single set of SNPs\nplot_snp_circos(\n    genome_ranges = gma_chrlen, \n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Cgregata\n)\n\n\n\n## Multiple sets of SNPs\nplot_snp_circos(gma_chrlen, gene_ranges, snps_soyfungi)"
  },
  {
    "objectID": "chapters/03_network-based_data_integration.html#mining-high-confidence-candidate-genes",
    "href": "chapters/03_network-based_data_integration.html#mining-high-confidence-candidate-genes",
    "title": "3  Network-based data integration for gene discovery",
    "section": "3.3 Mining high-confidence candidate genes",
    "text": "3.3 Mining high-confidence candidate genes\nTo prioritize candidate genes, cageminer uses a 3-step workflow as illustrated below:\n\n\n\nCandidate gene prioritization workflow with cageminer\n\n\nImportantly, while it is recommended to follow all 3 steps, they can be executed independently, so one can use only one or a few steps. For instance, if you don’t have GWAS-derived SNPs, but you have a list of reference genes that you know are involved in a trait of interest, you could execute only steps 2 and 3 to find potential candidate genes.\nBecause of such independence between steps, the candidate gene mining workflow can be executed in two ways: with separate functions (mine_step1(), mine_step2(), and mine_step3()), or with a single function (mine_candidates()) that automatically executes the separate functions one after another. Both ways are described below. First, let’s prepare required data:\n\n# Load GCN and data frame of guides\nload(here(\"data\", \"gcn_soyfungi.rda\"))\nload(here(\"data\", \"guides_soyfungi.rda\"))\n\n## Conditions in which we expected expression to change\nconditions &lt;- paste0(\"Fgraminearum_\", c(\"stress_PI567301B\", \"stress_wyandot\"))\n\n\n\n\nStep-by-step candidate gene mining\nExample: mining genes associated with resistance to Fusarium graminearum.\n\n# Step 1: finding genes close to SNPs\ncandidates1 &lt;- mine_step1(\n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Fgraminearum\n)\n\n# Step 2: finding coexpression modules enriched in guide genes\ncandidates2 &lt;- mine_step2(\n    exp = se_soyfungi,\n    gcn = gcn_soyfungi,\n    guides = guides_soyfungi$Gene,\n    candidates = candidates1$gene_id\n)\n\n# Step 3: finding genes with altered expression in a condition of interest\ncandidates3 &lt;- mine_step3(\n    exp = se_soyfungi,\n    candidates = candidates2$candidates,\n    metadata_cols = \"Pathogen_Treatment\",\n    sample_group = conditions\n)\n\n\n\n\nOne-step candidate gene mining\nExample: mining genes associated with resistance to Fusarium graminearum.\n\n# Single-step candidate mining with `mine_candidates()`\ncandidates &lt;- mine_candidates(\n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Fgraminearum, \n    exp = se_soyfungi,\n    gcn = gcn_soyfungi, \n    guides = guides_soyfungi$Gene,\n    metadata_cols = \"Pathogen_Treatment\",\n    sample_group = conditions\n)\n\n\n\n\nBecause mine_candidates() is basically a wrapper that runs mine_step1(), mine_step2(), and mine_step3() one after another, the results obtained with the one-step and the step-by-step mining are the same.\n\n\n\n\n\n\nPractice\n\n\n\n\nVerify that results obtained with the one-step and with the step-by-step mining are the same.\nRepeat the candidate mining with mine_candidates(), but now look for high-confidence candidates against Fusarium virguliforme. Use the following vector as sample_group:\n\n\nfvir_conditions &lt;- paste0(\n    \"Fvirguliforme_\",\n    c(\n        \"stress_0dpi\", \"stress_10-24days\", \"stress_10dpi\", \"stress_14dpi\",\n        \"stress_2dpi\", \"stress_3-5days\", \"stress_4dpi\", \"stress_7dpi\"\n    )\n)\n\nHow many high-confidence candidate genes are there?\n\n\n\n\n\n\nSolutions\n\n\n\n\n\n\n# Q1\nc1 &lt;- unique(candidates3$gene)\nc2 &lt;- unique(candidates$gene)\nidentical(c1, c2)\n\n[1] TRUE\n\n# Q2\nfvir_conditions &lt;- paste0(\n    \"Fvirguliforme_\",\n    c(\n        \"stress_0dpi\", \"stress_10-24days\", \"stress_10dpi\", \"stress_14dpi\",\n        \"stress_2dpi\", \"stress_3-5days\", \"stress_4dpi\", \"stress_7dpi\"\n    )\n)\n\ncandidates_fvir &lt;- mine_candidates(\n    gene_ranges = gene_ranges, \n    marker_ranges = snps_soyfungi$Fgraminearum, \n    exp = se_soyfungi,\n    gcn = gcn_soyfungi, \n    guides = guides_soyfungi$Gene,\n    metadata_cols = \"Pathogen_Treatment\",\n    sample_group = fvir_conditions\n)"
  },
  {
    "objectID": "chapters/03_network-based_data_integration.html#scoring-prioritized-candidate-genes",
    "href": "chapters/03_network-based_data_integration.html#scoring-prioritized-candidate-genes",
    "title": "3  Network-based data integration for gene discovery",
    "section": "3.4 Scoring prioritized candidate genes",
    "text": "3.4 Scoring prioritized candidate genes\nOnce you’ve prioritized candidate genes with mine_candidates(), you might be interested in scoring genes so they can be ranked. This can be performed with the function score_genes(), which uses the following formulae:\n\\[\nS_i = r_{pb} \\kappa\n\\] where \\(\\kappa = 2\\) if the gene either a TF or a hub, \\(\\kappa = 3\\) is the gene is both a TF and a hub, and \\(\\kappa = 1\\) is the gene is neither a TF nor a hub.\nLet’s demonstrate how this works:\n\n# Load vector of TFs\nload(here(\"data\", \"gma_tfs.rda\"))\n\n# Get hubs\nhubs &lt;- BioNERO::get_hubs_gcn(exp = se_soyfungi, net = gcn_soyfungi)$Gene\n\n# Score candidates\nscored_genes &lt;- score_genes(\n    mined_candidates = candidates,\n    hubs = hubs,\n    tfs = gma_tfs\n)\n\nhead(scored_genes)\n\n                gene                         trait        cor       pvalue\n6160 Glyma.10G093100 Fgraminearum_stress_PI567301B  0.3305157 0.0001475706\n8040 Glyma.17G112900 Fgraminearum_stress_PI567301B -0.2912690 0.0008927231\n2447 Glyma.05G103300 Fgraminearum_stress_PI567301B -0.2801566 0.0014221203\n5409 Glyma.07G250900   Fgraminearum_stress_wyandot  0.2780755 0.0015484780\n191  Glyma.04G008900 Fgraminearum_stress_PI567301B -0.2588389 0.0032994086\n8746 Glyma.19G126800   Fgraminearum_stress_wyandot -0.2442952 0.0056416338\n                  group      score\n6160 Pathogen_Treatment  0.6610315\n8040 Pathogen_Treatment -0.5825379\n2447 Pathogen_Treatment -0.5603132\n5409 Pathogen_Treatment  0.5561510\n191  Pathogen_Treatment -0.5176778\n8746 Pathogen_Treatment -0.4885903\n\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the output of score_genes() and answer the questions below:\n\nWhich gene has the highest score?\nWhich gene has the lowest score?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nscored_genes[which.max(abs(scored_genes$score)), ]\n\n                gene                         trait       cor       pvalue\n6160 Glyma.10G093100 Fgraminearum_stress_PI567301B 0.3305157 0.0001475706\n                  group     score\n6160 Pathogen_Treatment 0.6610315\n\n# Q2\nscored_genes[which.min(abs(scored_genes$score)), ]\n\n                gene                         trait        cor     pvalue\n2259 Glyma.05G063600 Fgraminearum_stress_PI567301B -0.2028942 0.02215251\n                  group      score\n2259 Pathogen_Treatment -0.4057883"
  },
  {
    "objectID": "chapters/03_network-based_data_integration.html#session-information",
    "href": "chapters/03_network-based_data_integration.html#session-information",
    "title": "3  Network-based data integration for gene discovery",
    "section": "Session information",
    "text": "Session information\nThis chapter was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-09-05\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n AnnotationFilter       1.24.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocFileCache          2.8.0     2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocIO                 1.10.0    2023-04-25 [1] Bioconductor\n BiocManager            1.30.21.1 2023-07-18 [1] CRAN (R 4.3.0)\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BiocStyle              2.29.1    2023-08-04 [1] Github (Bioconductor/BiocStyle@7c0e093)\n biomaRt                2.56.0    2023-04-25 [1] Bioconductor\n BioNERO                1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n biovizBase             1.48.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n BSgenome               1.68.0    2023-04-25 [1] Bioconductor\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n cageminer            * 1.7.2     2023-08-31 [1] Bioconductor\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n commonmark             1.9.0     2023-03-17 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n curl                   5.0.0     2023-01-12 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n dbplyr                 2.3.2     2023-03-21 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n dichromat              2.0-0.1   2022-05-02 [1] CRAN (R 4.3.0)\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                  1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n ensembldb              2.24.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n filelock               1.0.2     2018-10-05 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicAlignments      1.36.0    2023-04-25 [1] Bioconductor\n GenomicFeatures        1.52.0    2023-04-25 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n GGally                 2.1.2     2021-06-21 [1] CRAN (R 4.3.0)\n ggbio                  1.48.0    2023-04-25 [1] Bioconductor\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2                3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n ggtext                 0.1.2     2022-09-16 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n graph                  1.78.0    2023-04-25 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gridtext               0.1.5     2022-09-16 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lazyeval               0.2.2     2019-03-15 [1] CRAN (R 4.3.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n markdown               1.6       2023-04-07 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n OrganismDbi            1.42.0    2023-04-25 [1] Bioconductor\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n prettyunits            1.1.1     2020-01-24 [1] CRAN (R 4.3.0)\n progress               1.2.2     2019-05-16 [1] CRAN (R 4.3.0)\n ProtGenerics           1.32.0    2023-04-25 [1] Bioconductor\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n rappdirs               0.3.3     2021-01-31 [1] CRAN (R 4.3.0)\n RBGL                   1.76.0    2023-04-25 [1] Bioconductor\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n reshape                0.8.9     2022-04-12 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n restfulr               0.0.15    2022-06-16 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n Rsamtools              2.16.0    2023-04-25 [1] Bioconductor\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n rtracklayer            1.60.0    2023-04-25 [1] Bioconductor\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr                1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble                 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n VariantAnnotation      1.46.0    2023-04-25 [1] Bioconductor\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xml2                   1.3.4     2023-04-27 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "chapters/03_network-based_data_integration.html#references",
    "href": "chapters/03_network-based_data_integration.html#references",
    "title": "3  Network-based data integration for gene discovery",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, and Thiago M Venancio. 2021. “Integration of Genome-Wide Association Studies and Gene Coexpression Networks Unveils Promising Soybean Resistance Genes Against Five Common Fungal Pathogens.” Scientific Reports 11 (1): 24453."
  },
  {
    "objectID": "chapters/04_inference_and_analysis_of_GRNs.html#getting-to-know-the-example-data",
    "href": "chapters/04_inference_and_analysis_of_GRNs.html#getting-to-know-the-example-data",
    "title": "4  Inference and analysis of gene regulatory networks (GRNs)",
    "section": "4.1 Getting to know the example data",
    "text": "4.1 Getting to know the example data\nHere, we will use an example data set available in data/se_PRJNA800609.rda in the Github repo associated with this course. This experiment comprises soybean (Glycine max) pods infected with the pathogenic fungus Colletotrichum truncatum, and data were downloaded from The Soybean Expression Atlas v2 (Almeida-Silva, Pedrosa-Silva, and Venancio 2023) using the BioProject accession PRJNA800609. The original data were generated by Zhu et al. (2022).\n\n# Load expression data\nload(here(\"data\", \"se_PRJNA800609.rda\"))\n\n# Rename object to a simpler name\nexp &lt;- se_PRJNA800609\nrm(se_PRJNA800609)\n\n# Take a look at the object\nexp\n\nclass: SummarizedExperiment \ndim: 31422 60 \nmetadata(0):\nassays(1): ''\nrownames(31422): Glyma.15G153300 Glyma.15G153400 ... Glyma.09G145600\n  Glyma.09G145700\nrowData names(0):\ncolnames(60): SAMN25263487 SAMN25263488 ... SAMN25263525 SAMN25263526\ncolData names(4): Part Cultivar Treatment Timepoint\n\n\nWe will also use soybean transcription factors obtained from PlantTFDB 4.0 (Jin et al. 2016), which are stored in data/gma_tfs.rda.\n\n# Load transcription factors\nload(here(\"data\", \"gma_tfs.rda\"))\n\nhead(gma_tfs)\n\n[1] \"Glyma.10G204400\" \"Glyma.02G099500\" \"Glyma.20G186200\" \"Glyma.01G087500\"\n[5] \"Glyma.20G247300\" \"Glyma.01G000600\"\n\nlength(gma_tfs)\n\n[1] 3747"
  },
  {
    "objectID": "chapters/04_inference_and_analysis_of_GRNs.html#grn-inference",
    "href": "chapters/04_inference_and_analysis_of_GRNs.html#grn-inference",
    "title": "4  Inference and analysis of gene regulatory networks (GRNs)",
    "section": "4.2 GRN inference",
    "text": "4.2 GRN inference\nTo infer GRNs, we need two input objects:\n\nA gene expression matrix (or a SummarizedExperiment object)\nA vector of known regulators (e.g., TFs).\n\nFirst, let’s preprocess our expression data with exp_preprocess(). Here, for the sake of demonstration, we will only use the top 2000 genes with the highest variances.\n\n# Preprocess the input data\nfinal_exp &lt;- exp_preprocess(\n    exp,\n    min_exp = 5, \n    variance_filter = TRUE, \n    n = 2000\n)\n\nNow we’re good to go. With BioNERO, one can infer GRNs using 3 popular algorithms: GENIE3 (huynh2010inferring?), ARACNE (Margolin et al. 2006), and CLR (Faith et al. 2007). Users can also infer GRNs using a combination of methods (a.k.a. “wisdom of the crowds” principle), which has been shown to lead to more accurate results (Marbach et al. 2012). Let’s demonstrate each of these approaches.\n\n4.2.1 Individual algorithms\nTo infer GRNs using individual algorithms, you’d use the function grn_infer() and specify the method in the method parameter. Below you can find a short description of each algorithm and how to run them.\nGENIE3: a regression-tree based algorithm that decomposes the prediction of GRNs for n genes into n regression problems. For each regression problem, the expression profile of a target gene is predicted from the expression profiles of all other genes using random forests (default) or extra-trees.\n\n# Infer a GRN with GENIE3\ngrn_genie3 &lt;- grn_infer(\n    final_exp, \n    method = \"genie3\", \n    regulators = gma_tfs,\n1    nTrees = 10\n)\n\nhead(grn_genie3)\n\n\n1\n\nHere, for demonstration purposes, we’re using only 10 trees, but one should use at least 1000 trees (default).\n\n\n\n\n                 Node1           Node2    Weight\n109961 Glyma.20G209700 Glyma.03G245300 0.3373682\n160260 Glyma.12G216100 Glyma.07G149600 0.3122377\n105394 Glyma.02G217800 Glyma.03G189100 0.2984574\n211825 Glyma.16G012600 Glyma.14G201800 0.2816710\n186303 Glyma.06G034000 Glyma.13G149100 0.2773383\n51236  Glyma.11G049300 Glyma.19G121600 0.2736725\n\n\nARACNE: information-theoretic algorithm that aims to remove indirect interactions inferred by coexpression.\n\n# Infer a GRN with ARACNE\ngrn_aracne &lt;- grn_infer(\n    final_exp, \n    method = \"aracne\", \n    regulators = gma_tfs\n)\n\nhead(grn_aracne)\n\n                 Node1           Node2   Weight\n70935  Glyma.20G209700 Glyma.01G037200 1.728753\n89918  Glyma.04G226700 Glyma.02G149600 1.643472\n238984 Glyma.07G212400 Glyma.10G224500 1.623464\n211176 Glyma.07G212400 Glyma.14G195200 1.607392\n91633  Glyma.20G209700 Glyma.02G195300 1.552133\n290894 Glyma.04G226700 Glyma.09G143800 1.542347\n\n\nCLR: extension of the relevance networks algorithm that uses mutual information to identify regulatory interactions.\n\n# Infer a GRN with CLR\ngrn_clr &lt;- grn_infer(\n    final_exp,\n    method = \"clr\",\n    regulators = gma_tfs\n)\n\nhead(grn_clr)\n\n                 Node1           Node2   Weight\n260329 Glyma.15G152000 Glyma.12G009200 14.83700\n154366 Glyma.19G260900 Glyma.07G049400 13.98161\n197182 Glyma.16G017400 Glyma.13G289600 13.27572\n97603  Glyma.15G029500 Glyma.02G309500 12.62377\n55258  Glyma.13G344700 Glyma.19G211600 12.54761\n226254 Glyma.16G017400 Glyma.09G227100 12.49256\n\n\nNote that these functions return a fully connected graph, so you’ll need to filter the edge list to remove spurious edges. One way to do it is by removing edges below a particular value for the Weight variable. However, since choosing a cut-off is not straightforward and often arbitrary, you can use the function grn_filter() to perform a graph-based filtering. Briefly, this function splits the network in N subnetworks of increasing size and calculates the scale-free topology fit for each subgraph. In the end, the subgraph with the best scale-free topology fit will be chosen as the optimum.\nThis is how you can use it:\n\n# Filter the GENIE3-derived GRN based on optimal SFT fit\nfiltered_grn &lt;- grn_filter(grn_genie3)\nhead(filtered_grn)\n\n                 Node1           Node2\n109961 Glyma.20G209700 Glyma.03G245300\n160260 Glyma.12G216100 Glyma.07G149600\n105394 Glyma.02G217800 Glyma.03G189100\n211825 Glyma.16G012600 Glyma.14G201800\n186303 Glyma.06G034000 Glyma.13G149100\n51236  Glyma.11G049300 Glyma.19G121600\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nFilter the GRN obtained with GENIE3 to keep only edges with weight \\(\\ge\\) 0.2. Then, answer the questions below:\n\n\nWhat is the top TF in number of targets?\nWhat genes are regulated by the top TF?\n\n\nWhat is the rank of the edge Glyma.07G212400 -&gt; Glyma.10G224500 in all three networks? What is the mean rank?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\n## top TF\ngenie3_filt &lt;- grn_genie3[grn_genie3$Weight &gt;= 0.2, ]\nhead(sort(table(genie3_filt$Node1), decreasing = TRUE))\n\n\nGlyma.06G034000 Glyma.16G012600 Glyma.20G006400 Glyma.08G250700 Glyma.02G217800 \n              8               7               7               6               5 \nGlyma.12G040600 \n              4 \n\n## targets of the top TF\ngenie3_filt[genie3_filt$Node1 == \"Glyma.06G034000\", \"Node2\"]\n\n[1] \"Glyma.13G149100\" \"Glyma.05G033500\" \"Glyma.02G083702\" \"Glyma.19G195500\"\n[5] \"Glyma.19G225500\" \"Glyma.20G189300\" \"Glyma.09G011200\" \"Glyma.20G132651\"\n\n# Q2\nedge &lt;- c(\"Glyma.07G212400\", \"Glyma.10G224500\")\n\nrank_genie3 &lt;- which(grn_genie3$Node1 == edge[1] & grn_genie3$Node2 == edge[2])\nrank_aracne &lt;- which(grn_aracne$Node1 == edge[1] & grn_aracne$Node2 == edge[2])\nrank_clr &lt;- which(grn_clr$Node1 == edge[1] & grn_clr$Node2 == edge[2])\n\nmean(rank_genie3, rank_aracne, rank_clr)\n\n[1] 168\n\n\n\n\n\n\n\n\n\n4.2.2 Wisdom of the crowds\nThe “wisdom of the crowds” principle consists in combining inferences from multiple methods to obtain robust and more accurate predictions. As Marbach et al. (2012) stated in their paper:\n\nWe observe that no single inference method performs optimally across all datasets. In contrast, integration of predictions from multiple inference methods shows robust and high performance across diverse datasets.\n\nIn BioNERO, this is performed by computing average edge ranks across different networks, exactly as you did in the previous practice problem, and it can be executed with the function exp2grn(). After computing average ranks for each edge, exp2grn() sorts the edges based on ranks (in increasing order) and uses the graph-based filtering approach (as in grn_filter()) to remove spurious edges.\n\n# Infer GRN\ngrn &lt;- exp2grn(\n    exp = final_exp,\n    regulators = gma_tfs,\n    nTrees = 10 # again, using only 10 trees for demonstration purposes\n)\n\nhead(grn)\n\n           Regulator          Target\n376  Glyma.04G226700 Glyma.02G149600\n2474 Glyma.20G209700 Glyma.01G037200\n260  Glyma.03G247100 Glyma.02G022000\n2020 Glyma.17G144100 Glyma.04G228400\n1403 Glyma.12G117000 Glyma.11G137300\n1056 Glyma.09G011800 Glyma.09G143800\n\n\n\n\n\n\n\n\nPractice\n\n\n\nExplore the output of the GRN inferred with exp2grn() and answer the following questions.\n\nWhat regulator has the greatest number of targets?\nWhat genes are regulated by the top regulator?\nWhat is the minimum, maximum, mean, and median number of regulators per target?\n\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\n# Q1\nhead(sort(table(grn$Regulator), decreasing = TRUE))\n\n\nGlyma.15G019400 Glyma.05G103300 Glyma.20G006400 Glyma.20G051500 Glyma.07G212400 \n             13              12              12              12              11 \nGlyma.08G115300 \n             11 \n\n# Q2\ngrn[grn$Regulator == \"Glyma.15G019400\", \"Target\"]\n\n [1] \"Glyma.19G089800\" \"Glyma.13G116200\" \"Glyma.01G211300\" \"Glyma.11G252200\"\n [5] \"Glyma.08G330600\" \"Glyma.10G070900\" \"Glyma.12G181500\" \"Glyma.07G239200\"\n [9] \"Glyma.18G172300\" \"Glyma.15G023700\" \"Glyma.07G261000\" \"Glyma.03G148300\"\n[13] \"Glyma.20G159900\"\n\n# Q3\nreg_per_target &lt;- grn |&gt;\n    group_by(Target) |&gt;\n    summarise(Nregs = length(unique(Regulator)))\n\nsummary(reg_per_target$Nregs)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   1.000   1.000   1.296   1.000   4.000"
  },
  {
    "objectID": "chapters/04_inference_and_analysis_of_GRNs.html#grn-analyses",
    "href": "chapters/04_inference_and_analysis_of_GRNs.html#grn-analyses",
    "title": "4  Inference and analysis of gene regulatory networks (GRNs)",
    "section": "4.3 GRN analyses",
    "text": "4.3 GRN analyses\nAfter you have a GRN, there are many things you can do with it. The downstream analyses you should do will really depend on the question you’re trying to address. Nevertheless, in this section you will see examples of common analyses people do, but keep in mind that these are not the only ones; you can (and should) be creative and explore different aspects of the GRN based on your research project.\n\n4.3.1 Finding GRN hubs\nFinding hubs in GRNs is a very common practice in publications, and the goal here is to identify the so-called master regulators of particular biological processes.\nThis can be performed with the function get_hubs_grn(), which returns the top 10% regulators (adjustable) based on degree.\n\n# Find GRN hubs\ngrn_hubs &lt;- get_hubs_grn(grn)\n\nhead(grn_hubs)\n\n             Gene Degree\n1 Glyma.15G019400     13\n2 Glyma.05G103300     12\n3 Glyma.20G006400     12\n4 Glyma.20G051500     12\n5 Glyma.20G209700     11\n6 Glyma.19G022200     11\n\n\n\n\n\n\n\n\nPractice\n\n\n\nWhat is the minimum, maximum, mean, and median degree for GRN hubs?\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\nsummary(grn_hubs$Degree)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  5.000   6.000   7.000   7.562   9.000  13.000 \n\n\n\n\n\n\n\n\n\n4.3.2 Exploring and visualizing GRNs\nAnother common analysis is to extract subgraphs for a particular group of genes (usually known to be involved in a process of interest) and plot them.\nFirst, let’s plot the entire network. This is feasible here because we specifically filtered the expression data to have a small network (for demonstration purposes), but it is often not feasible in real-world networks.\n\n# Plot the entire network\np_all &lt;- plot_grn(grn)\n\np_all\n\n\n\n\nBy default, only the top 5 hubs are labeled, but you can change that based on your preferences. For example:\n\n# Label the top 10 hubs\nplot_grn(grn, top_n_hubs = 10)\n\n\n\n# Hide all labels\nplot_grn(grn, show_labels = \"none\")\n\n\n\n\nNow, we will visualize the subgraph for the top hub and its targets. You can do that by filtering the edge list to keep only edges containing the gene(s) you’re interested (here, the top hub).\n\n# Keep only edges containing the top hub\ntop_hub &lt;- grn_hubs$Gene[1]\nedges_top_hub &lt;- grn[grn$Regulator == top_hub, ]\n\nhead(edges_top_hub)\n\n           Regulator          Target\n1789 Glyma.15G019400 Glyma.19G089800\n1785 Glyma.15G019400 Glyma.13G116200\n1770 Glyma.15G019400 Glyma.01G211300\n1783 Glyma.15G019400 Glyma.11G252200\n1779 Glyma.15G019400 Glyma.08G330600\n1781 Glyma.15G019400 Glyma.10G070900\n\n# Visualize the subgraph\nplot_grn(edges_top_hub)\n\n\n\n\nWith smaller subgraphs, it’s nice to play with parameters in plot_grn() to customize your visualization. For example:\n\n# Show all nodes\nplot_grn(edges_top_hub, show_labels = \"all\")\n\n\n\n\nFinally, since the output of plot_grn() is a ggplot object (same for plot_gcn() and plot_ppi()), you can store it in an object and modify it later. For example:\n\np_grn &lt;- plot_grn(edges_top_hub)\n\n# Change colors of regulators and targets\np_grn +\n    scale_fill_manual(values = c(\"dodgerblue3\", \"firebrick3\"))\n\n\n\n# Remove legend\np_grn +\n    theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\nPractice\n\n\n\nCreate a subgraph with the top 10 hubs and their targets. Then, create different network visualizations based on the following instructions:\nNetwork 1: Default parameters in plot_grn()\nNetwork 2: Label all hubs.\nNetwork 3: Label all hubs and change node colors (the fill aesthetics) so that regulators have the colors “black” and targets have the color “grey70”.\nNetwork 4: Label all hubs and add the following plot title: “Network representation of the top 10 hubs and their targets”\nNetwork 5: Label all hubs, change the network layout function to with_gem, and move the legend to the bottom of the plot.\n\n\n\n\n\n\nShow me the solutions\n\n\n\n\n\n\nedges &lt;- grn[grn$Regulator %in% grn_hubs$Gene[1:10], ]\n\n# 1\nplot_grn(edges)\n\n\n\n# 2\nplot_grn(edges, show_labels = \"allhubs\")\n\n\n\n# 3\nplot_grn(edges, show_labels = \"allhubs\") +\n    scale_fill_manual(values = c(\"grey70\", \"black\"))\n\n\n\n# 4\nplot_grn(edges, show_labels = \"allhubs\") +\n    labs(title = \"Network representation of the top 10 hubs and their targets\")\n\n\n\n# 5\nplot_grn(edges, show_labels = \"allhubs\", layout = igraph::with_gem) +\n    theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "chapters/04_inference_and_analysis_of_GRNs.html#session-information",
    "href": "chapters/04_inference_and_analysis_of_GRNs.html#session-information",
    "title": "4  Inference and analysis of gene regulatory networks (GRNs)",
    "section": "Session information",
    "text": "Session information\nThis chapter was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.0 (2023-04-21)\n os       Ubuntu 20.04.5 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2023-09-10\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.0)\n annotate               1.78.0    2023-04-25 [1] Bioconductor\n AnnotationDbi          1.62.0    2023-04-25 [1] Bioconductor\n backports              1.4.1     2021-12-13 [1] CRAN (R 4.3.0)\n base64enc              0.1-3     2015-07-28 [1] CRAN (R 4.3.0)\n Biobase              * 2.60.0    2023-04-25 [1] Bioconductor\n BiocGenerics         * 0.46.0    2023-04-25 [1] Bioconductor\n BiocParallel           1.34.0    2023-04-25 [1] Bioconductor\n BioNERO              * 1.9.7     2023-08-23 [1] Bioconductor\n Biostrings             2.68.0    2023-04-25 [1] Bioconductor\n bit                    4.0.5     2022-11-15 [1] CRAN (R 4.3.0)\n bit64                  4.0.5     2020-08-30 [1] CRAN (R 4.3.0)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.0)\n blob                   1.2.4     2023-03-17 [1] CRAN (R 4.3.0)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.0)\n checkmate              2.2.0     2023-04-27 [1] CRAN (R 4.3.0)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.0)\n cli                    3.6.1     2023-03-23 [1] CRAN (R 4.3.0)\n clue                   0.3-64    2023-01-31 [1] CRAN (R 4.3.0)\n cluster                2.1.4     2022-08-22 [4] CRAN (R 4.2.1)\n coda                   0.19-4    2020-09-30 [1] CRAN (R 4.3.0)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.0)\n ComplexHeatmap         2.16.0    2023-04-25 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.0)\n data.table             1.14.8    2023-02-17 [1] CRAN (R 4.3.0)\n DBI                    1.1.3     2022-06-18 [1] CRAN (R 4.3.0)\n DelayedArray           0.26.1    2023-05-01 [1] Bioconductor\n digest                 0.6.33    2023-07-07 [1] CRAN (R 4.3.0)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.0)\n dplyr                * 1.1.2     2023-04-20 [1] CRAN (R 4.3.0)\n dynamicTreeCut         1.63-1    2016-03-11 [1] CRAN (R 4.3.0)\n edgeR                  3.42.0    2023-04-25 [1] Bioconductor\n evaluate               0.21      2023-05-05 [1] CRAN (R 4.3.0)\n fansi                  1.0.4     2023-01-22 [1] CRAN (R 4.3.0)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.0)\n fastcluster            1.2.3     2021-05-24 [1] CRAN (R 4.3.0)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.0)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.0)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.0)\n foreign                0.8-82    2022-01-13 [4] CRAN (R 4.1.2)\n Formula                1.2-5     2023-02-24 [1] CRAN (R 4.3.0)\n genefilter             1.82.0    2023-04-25 [1] Bioconductor\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.0)\n GENIE3                 1.22.0    2023-04-25 [1] Bioconductor\n GenomeInfoDb         * 1.36.0    2023-04-25 [1] Bioconductor\n GenomeInfoDbData       1.2.10    2023-04-28 [1] Bioconductor\n GenomicRanges        * 1.52.0    2023-04-25 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.0)\n ggdendro               0.1.23    2022-02-16 [1] CRAN (R 4.3.0)\n ggnetwork              0.5.12    2023-03-06 [1] CRAN (R 4.3.0)\n ggplot2              * 3.4.1     2023-02-10 [1] CRAN (R 4.3.0)\n ggrepel                0.9.3     2023-02-03 [1] CRAN (R 4.3.0)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.0)\n glue                   1.6.2     2022-02-24 [1] CRAN (R 4.3.0)\n GO.db                  3.17.0    2023-05-02 [1] Bioconductor\n gridExtra              2.3       2017-09-09 [1] CRAN (R 4.3.0)\n gtable                 0.3.3     2023-03-21 [1] CRAN (R 4.3.0)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.0)\n Hmisc                  5.0-1     2023-03-08 [1] CRAN (R 4.3.0)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.0)\n htmlTable              2.4.1     2022-07-07 [1] CRAN (R 4.3.0)\n htmltools              0.5.5     2023-03-23 [1] CRAN (R 4.3.0)\n htmlwidgets            1.6.2     2023-03-17 [1] CRAN (R 4.3.0)\n httr                   1.4.5     2023-02-24 [1] CRAN (R 4.3.0)\n igraph                 1.4.2     2023-04-07 [1] CRAN (R 4.3.0)\n impute                 1.74.0    2023-04-25 [1] Bioconductor\n intergraph             2.0-2     2016-12-05 [1] CRAN (R 4.3.0)\n IRanges              * 2.34.0    2023-04-25 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.0)\n jsonlite               1.8.7     2023-06-29 [1] CRAN (R 4.3.0)\n KEGGREST               1.40.0    2023-04-25 [1] Bioconductor\n knitr                  1.43      2023-05-25 [1] CRAN (R 4.3.0)\n labeling               0.4.2     2020-10-20 [1] CRAN (R 4.3.0)\n lattice                0.20-45   2021-09-22 [4] CRAN (R 4.2.0)\n lifecycle              1.0.3     2022-10-07 [1] CRAN (R 4.3.0)\n limma                  3.56.0    2023-04-25 [1] Bioconductor\n locfit                 1.5-9.7   2023-01-02 [1] CRAN (R 4.3.0)\n lubridate            * 1.9.2     2023-02-10 [1] CRAN (R 4.3.0)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.0)\n MASS                   7.3-58.2  2023-01-23 [4] CRAN (R 4.2.2)\n Matrix                 1.5-1     2022-09-13 [4] CRAN (R 4.2.1)\n MatrixGenerics       * 1.12.2    2023-06-09 [1] Bioconductor\n matrixStats          * 1.0.0     2023-06-02 [1] CRAN (R 4.3.0)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.0)\n mgcv                   1.8-41    2022-10-21 [4] CRAN (R 4.2.1)\n minet                  3.58.0    2023-04-25 [1] Bioconductor\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.0)\n NetRep                 1.2.6     2023-01-06 [1] CRAN (R 4.3.0)\n network                1.18.1    2023-01-24 [1] CRAN (R 4.3.0)\n nlme                   3.1-162   2023-01-31 [4] CRAN (R 4.2.2)\n nnet                   7.3-18    2022-09-28 [4] CRAN (R 4.2.1)\n patchwork              1.1.2     2022-08-19 [1] CRAN (R 4.3.0)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.0)\n plyr                   1.8.8     2022-11-11 [1] CRAN (R 4.3.0)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.0)\n preprocessCore         1.62.0    2023-04-25 [1] Bioconductor\n purrr                * 1.0.1     2023-01-10 [1] CRAN (R 4.3.0)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.0)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.0)\n Rcpp                   1.0.10    2023-01-22 [1] CRAN (R 4.3.0)\n RCurl                  1.98-1.12 2023-03-27 [1] CRAN (R 4.3.0)\n readr                * 2.1.4     2023-02-10 [1] CRAN (R 4.3.0)\n reshape2               1.4.4     2020-04-09 [1] CRAN (R 4.3.0)\n RhpcBLASctl            0.23-42   2023-02-11 [1] CRAN (R 4.3.0)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.0)\n rlang                  1.1.1     2023-04-28 [1] CRAN (R 4.3.0)\n rmarkdown              2.23      2023-07-01 [1] CRAN (R 4.3.0)\n rpart                  4.1.19    2022-10-21 [4] CRAN (R 4.2.1)\n rprojroot              2.0.3     2022-04-02 [1] CRAN (R 4.3.0)\n RSQLite                2.3.1     2023-04-03 [1] CRAN (R 4.3.0)\n rstudioapi             0.14      2022-08-22 [1] CRAN (R 4.3.0)\n S4Arrays               1.0.1     2023-05-01 [1] Bioconductor\n S4Vectors            * 0.38.0    2023-04-25 [1] Bioconductor\n scales                 1.2.1     2022-08-20 [1] CRAN (R 4.3.0)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.0)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.0)\n statmod                1.5.0     2023-01-06 [1] CRAN (R 4.3.0)\n statnet.common         4.8.0     2023-01-24 [1] CRAN (R 4.3.0)\n stringi                1.7.12    2023-01-11 [1] CRAN (R 4.3.0)\n stringr              * 1.5.0     2022-12-02 [1] CRAN (R 4.3.0)\n SummarizedExperiment * 1.30.1    2023-05-01 [1] Bioconductor\n survival               3.5-3     2023-02-12 [4] CRAN (R 4.2.2)\n sva                    3.48.0    2023-04-25 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.0)\n tidyr                * 1.3.0     2023-01-24 [1] CRAN (R 4.3.0)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.0)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.0)\n timechange             0.2.0     2023-01-11 [1] CRAN (R 4.3.0)\n tzdb                   0.3.0     2022-03-28 [1] CRAN (R 4.3.0)\n utf8                   1.2.3     2023-01-31 [1] CRAN (R 4.3.0)\n vctrs                  0.6.3     2023-06-14 [1] CRAN (R 4.3.0)\n WGCNA                  1.72-1    2023-01-18 [1] CRAN (R 4.3.0)\n withr                  2.5.0     2022-03-03 [1] CRAN (R 4.3.0)\n xfun                   0.39      2023-04-20 [1] CRAN (R 4.3.0)\n XML                    3.99-0.14 2023-03-19 [1] CRAN (R 4.3.0)\n xtable                 1.8-4     2019-04-21 [1] CRAN (R 4.3.0)\n XVector                0.40.0    2023-04-25 [1] Bioconductor\n yaml                   2.3.7     2023-01-23 [1] CRAN (R 4.3.0)\n zlibbioc               1.46.0    2023-04-25 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "chapters/04_inference_and_analysis_of_GRNs.html#references",
    "href": "chapters/04_inference_and_analysis_of_GRNs.html#references",
    "title": "4  Inference and analysis of gene regulatory networks (GRNs)",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, Francisnei Pedrosa-Silva, and Thiago M Venancio. 2023. “The Soybean Expression Atlas V2: A Comprehensive Database of over 5000 RNA-Seq Samples.” bioRxiv, 2023–04.\n\n\nFaith, Jeremiah J, Boris Hayete, Joshua T Thaden, Ilaria Mogno, Jamey Wierzbowski, Guillaume Cottarel, Simon Kasif, James J Collins, and Timothy S Gardner. 2007. “Large-Scale Mapping and Validation of Escherichia Coli Transcriptional Regulation from a Compendium of Expression Profiles.” PLoS Biology 5 (1): e8.\n\n\nJin, Jinpu, Feng Tian, De-Chang Yang, Yu-Qi Meng, Lei Kong, Jingchu Luo, and Ge Gao. 2016. “PlantTFDB 4.0: Toward a Central Hub for Transcription Factors and Regulatory Interactions in Plants.” Nucleic Acids Research, gkw982.\n\n\nMarbach, Daniel, James C Costello, Robert Küffner, Nicole M Vega, Robert J Prill, Diogo M Camacho, Kyle R Allison, Manolis Kellis, James J Collins, et al. 2012. “Wisdom of Crowds for Robust Gene Network Inference.” Nature Methods 9 (8): 796–804.\n\n\nMargolin, Adam A, Ilya Nemenman, Katia Basso, Chris Wiggins, Gustavo Stolovitzky, Riccardo Dalla Favera, and Andrea Califano. 2006. “ARACNE: An Algorithm for the Reconstruction of Gene Regulatory Networks in a Mammalian Cellular Context.” In BMC Bioinformatics, 7:1–15. 1. BioMed Central.\n\n\nZhu, Longming, Qinghua Yang, Xiaomin Yu, Xujun Fu, Hangxia Jin, and Fengjie Yuan. 2022. “Transcriptomic and Metabolomic Analyses Reveal a Potential Mechanism to Improve Soybean Resistance to Anthracnose.” Frontiers in Plant Science 13: 850829."
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#se_prjna800609.rda",
    "href": "chapters/appendix_01_data_acquisition.html#se_prjna800609.rda",
    "title": "Appendix: Data acquisition",
    "section": "se_PRJNA800609.rda",
    "text": "se_PRJNA800609.rda\nThis experiment comprises soybean pods infected with Colletotrichum truncatum, and data were downloaded from The Soybean Expression Atlas v2 using the “Download by project” tab.\n\n# Load expression matrix\nexp_matrix &lt;- read.csv(\n    \"~/Downloads/PRJNA800609_TPM.tsv\", header = TRUE, sep = \"\\t\",\n    row.names = 1\n)\n\n# Load sample metadata\nsample_metadata &lt;- read.csv(\n    \"~/Downloads/PRJNA800609_metadata.tsv\", header = TRUE, sep = \"\\t\"\n) |&gt;\n    inner_join(\n        read.csv(\n            \"~/Downloads/SraRunTable.txt\", header = TRUE\n        )    \n    ) |&gt;\n    select(BioSample, Part, Cultivar, Name = `Sample.Name`) |&gt;\n    mutate(\n        Treatment = case_when(\n            str_detect(Name, \"CK\") ~ \"control\",\n            str_detect(Name, \"IN\") ~ \"infected\"\n        ),\n        Timepoint = str_extract(Name, \"[0-9]*h\")\n    ) |&gt;\n    select(-Name) |&gt;\n    column_to_rownames(\"BioSample\")\n\n\n# Create a SummarizedExperiment object\nse_PRJNA800609 &lt;- SummarizedExperiment(\n    assays = list(TPM = exp_matrix), \n    colData = sample_metadata[colnames(exp_matrix), ]\n) |&gt;\n    BioNERO::remove_nonexp(method = \"median\", min_exp = 1)\n\n# Save object to .rda file\nsave(\n    se_PRJNA800609, compress = \"xz\",\n    file = here::here(\"data\", \"se_PRJNA800609.rda\")\n    \n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#se_prjna574764.rda",
    "href": "chapters/appendix_01_data_acquisition.html#se_prjna574764.rda",
    "title": "Appendix: Data acquisition",
    "section": "se_PRJNA574764.rda",
    "text": "se_PRJNA574764.rda\nThis experiment comprises soybean roots infected with Phytophthora sojae, and data were downloaded from The Soybean Expression Atlas v2 using the “Download by project” tab.\n\n# Load expression matrix\nexp_matrix &lt;- read.csv(\n    \"~/Downloads/PRJNA574764_TPM.tsv\", header = TRUE, sep = \"\\t\",\n    row.names = 1\n)\n\n# Load sample metadata\nsample_metadata &lt;- read.csv(\n    \"~/Downloads/PRJNA574764_metadata.tsv\", header = TRUE, sep = \"\\t\"\n) |&gt;\n    inner_join(\n        read.csv(\n            \"~/Downloads/SraRunTable_PRJNA574764.txt\", header = TRUE\n        )    \n    ) |&gt;\n    select(BioSample, Part, Cultivar, Age) |&gt;\n    mutate(\n        Treatment = case_when(\n            str_detect(Age, \"0 dpi\") ~ \"control\", TRUE ~ \"infected\"\n        ),\n        Timepoint = str_replace_all(Age, \" rep.*\", \"\")\n    ) |&gt;\n    select(-Age) |&gt;\n    column_to_rownames(\"BioSample\")\n\n\n# Create a SummarizedExperiment object\nse_PRJNA574764 &lt;- SummarizedExperiment(\n    assays = list(TPM = exp_matrix), \n    colData = sample_metadata[colnames(exp_matrix), ]\n) |&gt;\n    BioNERO::remove_nonexp(method = \"median\", min_exp = 1)\n\n# Save object to .rda file\nsave(\n    se_PRJNA574764, compress = \"xz\",\n    file = here::here(\"data\", \"se_PRJNA574764.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#gma_annotation.rda",
    "href": "chapters/appendix_01_data_acquisition.html#gma_annotation.rda",
    "title": "Appendix: Data acquisition",
    "section": "gma_annotation.rda",
    "text": "gma_annotation.rda\nThis object is a list of data frames with the following elements:\n\nMapMan: A 2-column data frame with gene IDs and their associated MapMan bins.\nInterPro: A 2-column data frame with gene IDs and their associated InterPro protein domains.\n\n\n# Get MapMan annotation\ngma_mapman &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/MapMan/mapman.gma.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |&gt;\n    dplyr::select(Gene = gene_id, MapMan = desc) |&gt;\n    dplyr::distinct() |&gt;\n    as.data.frame()\n\n# Get InterPro annotation\ngma_interpro &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/interpro.gma.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |&gt;\n    dplyr::select(Gene = `#gene_id`, Interpro = description) |&gt;\n    dplyr::distinct() |&gt;\n    as.data.frame()\n\n# Combine annotations in a list and save it\ngma_annotation &lt;- list(MapMan = gma_mapman, InterPro = gma_interpro)\n\nsave(\n    gma_annotation, compress = \"xz\",\n    file = here(\"data\", \"gma_annotation.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#gcn_soyfungi.rda-and-se_soyfungi.rda",
    "href": "chapters/appendix_01_data_acquisition.html#gcn_soyfungi.rda-and-se_soyfungi.rda",
    "title": "Appendix: Data acquisition",
    "section": "gcn_soyfungi.rda, and se_soyfungi.rda",
    "text": "gcn_soyfungi.rda, and se_soyfungi.rda\nThese files were obtained from Almeida-Silva and Venancio (2021), and they contain:\n\nse_soyfungi: A SummarizedExperiment object containing gene expression data on soybean tissues infected with multiple pathogenic fungi. Data were obtained the Soybean Expression Atlas (Almeida-Silva, Pedrosa-Silva, and Venancio 2023) and processed with BioNERO (Almeida-Silva and Venancio 2022).\ngcn_soyfungi: A gene coexpression network inferred with BioNERO::exp2gcn() using se_soyfungi as input.\n\nThese files were created with the code below. First, I identified which BioProjects to download from the Soybean Expression Atlas.\n\n# Get a data frame of sample metadata for fungi-infected samples\nburl &lt;- \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/data/\"\n\nfungi_samples &lt;- bind_rows(\n    read_tsv(file.path(burl, \"atlas_metadata_stress_samples.tsv\")),\n    read_tsv(file.path(burl, \"newsamples_metadata_stress_samples.tsv\"))\n) |&gt;\n    filter(Stress_info == \"fungus\")\n\n# List BioProjects to download\nunique(fungi_samples$BioProject)\n\nNext, I downloaded the TPM-normalized expression matrices for each BioProject by searching in the Download by project tab. Then, I loaded the expression matrices to the R session, created a SummarizedExperiment object, and processed it.\n\n# Load expression data\nexp_files &lt;- list.files(\"~/Downloads\", pattern = \"PRJ\", full.names = TRUE)\nexp_list &lt;- lapply(exp_files, function(x) {\n    return(read.csv(x, header = TRUE, sep = \"\\t\"))\n})\nexp &lt;- Reduce(function(x, y) merge(x, y, by = \"Gene\"), exp_list) |&gt;\n    tibble::column_to_rownames(\"Gene\")\n\n# Keep only samples present in both `exp` and `fungi_samples$BioSample`\nshared &lt;- intersect(names(exp), unique(fungi_samples$BioSample))\nexp &lt;- exp[, shared]\n\n# Create a data frame of sample metadata\ncoldata &lt;- fungi_samples |&gt;\n    filter(BioSample %in% shared) |&gt;\n    column_to_rownames(\"BioSample\") |&gt;\n    select(Pathogen, Treatment = Sample_description, Tissue)\n\ncoldata &lt;- coldata[names(exp), ] # reorder rows based on colnames of `exp`\n\n# Create `SummarizedExperiment` object\nse_soyfungi &lt;- SummarizedExperiment(\n    assays = list(exp_TPM = exp),\n    colData = coldata\n)\n\n# Process the `SummarizedExperiment` object\nse_soyfungi &lt;- BioNERO::exp_preprocess(\n    se_soyfungi, \n    min_exp = 5, \n    Zk_filtering = FALSE\n)\n\n# Add another metadata variable that combines `Pathogen` and `Treatment`\nse_soyfungi$Pathogen_Treatment &lt;- paste0(\n    se_soyfungi$Pathogen, \"_\", se_soyfungi$Treatment\n)\n\n# Save object\nsave(\n    se_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"se_soyfungi.rda\")\n)\n\nFinally, I used the process expression data to infer a GCN.\n\n# Infer GCN\nsft &lt;- SFT_fit(\n    se_soyfungi, \n    net_type = \"unsigned\", \n    cor_method = \"pearson\"\n)\n\ngcn_soyfungi &lt;- exp2gcn(\n    se_soyfungi, \n    net_type = \"unsigned\", \n    cor_method = \"pearson\",\n    SFTpower = sft$power\n)\n\n# Save network\ngcn_soyfungi$adjacency_matrix &lt;- NULL # to reduce file size\ngcn_soyfungi$correlation_matrix &lt;- NULL # to reduce file size\n\nsave(\n    gcn_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"gcn_soyfungi.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#snps_soyfungi.rda",
    "href": "chapters/appendix_01_data_acquisition.html#snps_soyfungi.rda",
    "title": "Appendix: Data acquisition",
    "section": "snps_soyfungi.rda",
    "text": "snps_soyfungi.rda\nThis object contains a GRangesList with genomic coordinates of soybean SNPs associated with resistance to phytopathogenic fungi, and they were obtained from Almeida-Silva and Venancio (2021) with the following code:\n\n# Download file\nfurl &lt;- \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/products/result_files/snp_granges.rda\"\noutfile &lt;- tempfile(fileext = \".rda\")\n\ndownload.file(\n    furl, destfile = outfile\n)\n\n# Load file\nload(outfile)\nsnps_soyfungi &lt;- snp_grangeslist\n\n# Save object\nsave(\n    snps_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"snps_soyfungi.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#guides_soyfungi.rda",
    "href": "chapters/appendix_01_data_acquisition.html#guides_soyfungi.rda",
    "title": "Appendix: Data acquisition",
    "section": "guides_soyfungi.rda",
    "text": "guides_soyfungi.rda\nThis object contains a data frame of resistance-related guide genes, and it was obtained from Almeida-Silva and Venancio (2021) with the following code:\n\n# Get data of guide genes\nguides_soyfungi &lt;- read_tsv(\n    \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/products/tables/sup_table3.tsv\",\n    show_col_types = FALSE\n)\n\n# Save object\nsave(\n    guides_soyfungi, compress = \"xz\",\n    file = here(\"data\", \"guides_soyfungi.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#gma_primary_transcripts.gff.gz",
    "href": "chapters/appendix_01_data_acquisition.html#gma_primary_transcripts.gff.gz",
    "title": "Appendix: Data acquisition",
    "section": "gma_primary_transcripts.gff.gz",
    "text": "gma_primary_transcripts.gff.gz\nThis file contains genomic ranges for primary transcripts.\n\n# Download GFF file\ndownload.file(\n    \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/data/PLAZA_selected.transcripts.gff.gz\",\n    destfile = here(\"data\", \"gma_primary_transcripts.gff3.gz\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#gma_chrlen.rda",
    "href": "chapters/appendix_01_data_acquisition.html#gma_chrlen.rda",
    "title": "Appendix: Data acquisition",
    "section": "gma_chrlen.rda",
    "text": "gma_chrlen.rda\nThis file contains a GRanges object with chromosome lengths for the soybean genome, and it was created with the code below.\n\n# Download file temporarily\nurl &lt;- \"https://github.com/almeidasilvaf/SoyFungi_GWAS_GCN/raw/main/data/chr_size_soybean.rda\"\nout &lt;- tempfile(fileext = \".rda\")\ndownload.file(url, destfile = out)\n\n\n# Load object and create GRanges\nload(out)\n\ngma_chrlen &lt;- data.frame(\n    seqnames = rownames(chr_size),\n    start = 1, \n    end = chr_size[, 1]\n)\ngma_chrlen &lt;- GenomicRanges::makeGRangesFromDataFrame(gma_chrlen)\n\n# Save object\nsave(\n    gma_chrlen, compress = \"xz\",\n    file = here(\"data\", \"gma_chrlen.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#gma_tfs.rda",
    "href": "chapters/appendix_01_data_acquisition.html#gma_tfs.rda",
    "title": "Appendix: Data acquisition",
    "section": "gma_tfs.rda",
    "text": "gma_tfs.rda\nThis object is a character vector of gene IDs for soybean TFs, and it was obtained with the following code:\n\n# Get a vector of TF gene IDs\ngma_tfs &lt;- readr::read_tsv(\n    \"http://planttfdb.gao-lab.org/download/TF_list/Gma_TF_list.txt.gz\"\n) |&gt;\n    dplyr::pull(Gene_ID) |&gt;\n    unique()\n\n# Save object\nsave(\n    gma_tfs, compress = \"xz\",\n    file = here(\"data\", \"gma_tfs.rda\")\n)"
  },
  {
    "objectID": "chapters/appendix_01_data_acquisition.html#references",
    "href": "chapters/appendix_01_data_acquisition.html#references",
    "title": "Appendix: Data acquisition",
    "section": "References",
    "text": "References\n\n\n\n\nAlmeida-Silva, Fabricio, Francisnei Pedrosa-Silva, and Thiago M Venancio. 2023. “The Soybean Expression Atlas V2: A Comprehensive Database of over 5000 RNA-Seq Samples.” bioRxiv, 2023–04.\n\n\nAlmeida-Silva, Fabricio, and Thiago M Venancio. 2021. “Integration of Genome-Wide Association Studies and Gene Coexpression Networks Unveils Promising Soybean Resistance Genes Against Five Common Fungal Pathogens.” Scientific Reports 11 (1): 24453.\n\n\n———. 2022. “BioNERO: An All-in-One r/Bioconductor Package for Comprehensive and Easy Biological Network Reconstruction.” Functional & Integrative Genomics 22 (1): 131–36."
  }
]